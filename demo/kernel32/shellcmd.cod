; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\demo\kernel32\shellcmd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG2414	DB	'mem', 00H
$SG2415	DB	'cls', 00H
$SG2416	DB	'com', 00H
$SG2417	DB	'inb', 00H
$SG2418	DB	'outb', 00H
	ORG $+3
$SG2419	DB	'ind', 00H
$SG2446	DB	'0: %02X', 0aH, 00H
	ORG $+3
$SG2449	DB	'1: %02X', 0aH, 00H
	ORG $+3
$SG2452	DB	'2: %02X', 0aH, 00H
	ORG $+3
$SG2455	DB	'3: %02X', 0aH, 00H
	ORG $+3
$SG2458	DB	'5: %02X', 0aH, 00H
	ORG $+3
$SG2471	DB	'port: %04X', 0aH, 'data: %02X', 0aH, 00H
	ORG $+1
$SG2487	DB	'port: %04X', 0aH, 'data: %02X', 0aH, 00H
	ORG $+1
$SG2501	DB	'port: %04X', 0aH, 'data: %08X', 0aH, 00H
_DATA	ENDS
PUBLIC	_Shell_cmd_initial
EXTRN	_Shell_cmd_add:PROC
; Function compile flags: /Odtp
; File e:\sourcexstudio\lenix\lenix\demo\kernel32\shellcmd.c
_TEXT	SEGMENT
_Shell_cmd_initial PROC

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   :     Shell_cmd_add("mem"     ,Sc_mem);

  00003	68 00 00 00 00	 push	 OFFSET _Sc_mem
  00008	68 00 00 00 00	 push	 OFFSET $SG2414
  0000d	e8 00 00 00 00	 call	 _Shell_cmd_add
  00012	83 c4 08	 add	 esp, 8

; 16   :     Shell_cmd_add("cls"     ,Sc_cls);

  00015	68 00 00 00 00	 push	 OFFSET _Sc_cls
  0001a	68 00 00 00 00	 push	 OFFSET $SG2415
  0001f	e8 00 00 00 00	 call	 _Shell_cmd_add
  00024	83 c4 08	 add	 esp, 8

; 17   :     Shell_cmd_add("com"     ,Sc_com);

  00027	68 00 00 00 00	 push	 OFFSET _Sc_com
  0002c	68 00 00 00 00	 push	 OFFSET $SG2416
  00031	e8 00 00 00 00	 call	 _Shell_cmd_add
  00036	83 c4 08	 add	 esp, 8

; 18   :     Shell_cmd_add("inb"     ,Sc_inb);

  00039	68 00 00 00 00	 push	 OFFSET _Sc_inb
  0003e	68 00 00 00 00	 push	 OFFSET $SG2417
  00043	e8 00 00 00 00	 call	 _Shell_cmd_add
  00048	83 c4 08	 add	 esp, 8

; 19   :     Shell_cmd_add("outb"    ,Sc_outb);

  0004b	68 00 00 00 00	 push	 OFFSET _Sc_outb
  00050	68 00 00 00 00	 push	 OFFSET $SG2418
  00055	e8 00 00 00 00	 call	 _Shell_cmd_add
  0005a	83 c4 08	 add	 esp, 8

; 20   :     Shell_cmd_add("ind"     ,Sc_ind);

  0005d	68 00 00 00 00	 push	 OFFSET _Sc_ind
  00062	68 00 00 00 00	 push	 OFFSET $SG2419
  00067	e8 00 00 00 00	 call	 _Shell_cmd_add
  0006c	83 c4 08	 add	 esp, 8

; 21   : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_Shell_cmd_initial ENDP
_TEXT	ENDS
EXTRN	__mprintf:PROC
EXTRN	__atoi:PROC
EXTRN	__atoh:PROC
EXTRN	_Sc_get_param:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_m$ = -12						; size = 4
_param$ = -8						; size = 4
_size$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_mem	PROC

; 32   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 33   :     const char          *   param   = NULL;

  00086	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _param$[ebp], 0

; 34   :     void                *   m       = NULL;

  0008d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0

; 35   :     int                     size    = 256;

  00094	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR _size$[ebp], 256 ; 00000100H

; 36   : 
; 37   :     param = Sc_get_param(argc,argv,'m');

  0009b	6a 6d		 push	 109			; 0000006dH
  0009d	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 _Sc_get_param
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 38   : 
; 39   :     if( param )

  000b0	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  000b4	74 0f		 je	 SHORT $LN3@Sc_mem

; 40   :         m = (void *)_atoh(param);

  000b6	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 __atoh
  000bf	83 c4 04	 add	 esp, 4
  000c2	89 45 f4	 mov	 DWORD PTR _m$[ebp], eax
$LN3@Sc_mem:

; 41   : 
; 42   :     param = Sc_get_param(argc,argv,'l');

  000c5	6a 6c		 push	 108			; 0000006cH
  000c7	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _Sc_get_param
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 43   : 
; 44   :     if( param )

  000da	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  000de	74 1f		 je	 SHORT $LN2@Sc_mem

; 45   :     {
; 46   :         size = _atoi(param);

  000e0	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 __atoi
  000e9	83 c4 04	 add	 esp, 4
  000ec	89 45 fc	 mov	 DWORD PTR _size$[ebp], eax

; 47   :         if( size > 256 )

  000ef	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _size$[ebp], 256 ; 00000100H
  000f6	7e 07		 jle	 SHORT $LN2@Sc_mem

; 48   :             size = 256;

  000f8	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR _size$[ebp], 256 ; 00000100H
$LN2@Sc_mem:

; 49   :     }
; 50   : 
; 51   :     _mprintf(m,size);

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _size$[ebp]
  00102	50		 push	 eax
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _m$[ebp]
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 __mprintf
  0010c	83 c4 08	 add	 esp, 8

; 52   : 
; 53   :     return 0;

  0010f	33 c0		 xor	 eax, eax

; 54   : }

  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_Sc_mem	ENDP
_TEXT	ENDS
EXTRN	_Con_cls:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_cls	PROC

; 58   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp

; 59   :     Con_cls();

  00123	e8 00 00 00 00	 call	 _Con_cls

; 60   : 
; 61   :     argc = argc;

  00128	8b 45 08	 mov	 eax, DWORD PTR _argc$[ebp]
  0012b	89 45 08	 mov	 DWORD PTR _argc$[ebp], eax

; 62   :     argv = argv;

  0012e	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  00131	89 4d 0c	 mov	 DWORD PTR _argv$[ebp], ecx

; 63   : 
; 64   :     return 0;

  00134	33 c0		 xor	 eax, eax

; 65   : }

  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
_Sc_cls	ENDP
_TEXT	ENDS
EXTRN	__printf:PROC
EXTRN	_Io_inb:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_uart$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_com	PROC

; 69   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	51		 push	 ecx

; 70   :     uart_t uart = PC_UART0;

  00144	c7 45 fc f8 03
	00 00		 mov	 DWORD PTR _uart$[ebp], 1016 ; 000003f8H

; 71   :     _printf("0: %02X\n",Io_inb(uart));

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _uart$[ebp]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _Io_inb
  00154	83 c4 04	 add	 esp, 4
  00157	0f b6 c8	 movzx	 ecx, al
  0015a	51		 push	 ecx
  0015b	68 00 00 00 00	 push	 OFFSET $SG2446
  00160	e8 00 00 00 00	 call	 __printf
  00165	83 c4 08	 add	 esp, 8

; 72   :     _printf("1: %02X\n",Io_inb(UART_IRQ_ENABLE(uart)));

  00168	8b 55 fc	 mov	 edx, DWORD PTR _uart$[ebp]
  0016b	83 c2 01	 add	 edx, 1
  0016e	52		 push	 edx
  0016f	e8 00 00 00 00	 call	 _Io_inb
  00174	83 c4 04	 add	 esp, 4
  00177	0f b6 c0	 movzx	 eax, al
  0017a	50		 push	 eax
  0017b	68 00 00 00 00	 push	 OFFSET $SG2449
  00180	e8 00 00 00 00	 call	 __printf
  00185	83 c4 08	 add	 esp, 8

; 73   :     _printf("2: %02X\n",Io_inb(UART_IRQ_FLAG(uart)));

  00188	8b 4d fc	 mov	 ecx, DWORD PTR _uart$[ebp]
  0018b	83 c1 02	 add	 ecx, 2
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 _Io_inb
  00194	83 c4 04	 add	 esp, 4
  00197	0f b6 d0	 movzx	 edx, al
  0019a	52		 push	 edx
  0019b	68 00 00 00 00	 push	 OFFSET $SG2452
  001a0	e8 00 00 00 00	 call	 __printf
  001a5	83 c4 08	 add	 esp, 8

; 74   :     _printf("3: %02X\n",Io_inb(UART_LINE_CTRL(uart)));

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _uart$[ebp]
  001ab	83 c0 03	 add	 eax, 3
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 _Io_inb
  001b4	83 c4 04	 add	 esp, 4
  001b7	0f b6 c8	 movzx	 ecx, al
  001ba	51		 push	 ecx
  001bb	68 00 00 00 00	 push	 OFFSET $SG2455
  001c0	e8 00 00 00 00	 call	 __printf
  001c5	83 c4 08	 add	 esp, 8

; 75   :     _printf("5: %02X\n",Io_inb(UART_LINE_STATUS(uart)));

  001c8	8b 55 fc	 mov	 edx, DWORD PTR _uart$[ebp]
  001cb	83 c2 05	 add	 edx, 5
  001ce	52		 push	 edx
  001cf	e8 00 00 00 00	 call	 _Io_inb
  001d4	83 c4 04	 add	 esp, 4
  001d7	0f b6 c0	 movzx	 eax, al
  001da	50		 push	 eax
  001db	68 00 00 00 00	 push	 OFFSET $SG2458
  001e0	e8 00 00 00 00	 call	 __printf
  001e5	83 c4 08	 add	 esp, 8

; 76   :     argc = argc;

  001e8	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  001eb	89 4d 08	 mov	 DWORD PTR _argc$[ebp], ecx

; 77   :     argv = argv;

  001ee	8b 55 0c	 mov	 edx, DWORD PTR _argv$[ebp]
  001f1	89 55 0c	 mov	 DWORD PTR _argv$[ebp], edx

; 78   :     return 0;

  001f4	33 c0		 xor	 eax, eax

; 79   : }

  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c3		 ret	 0
_Sc_com	ENDP
; Function compile flags: /Odtp
_ioaddr$ = -12						; size = 4
_param$ = -8						; size = 4
_data$ = -1						; size = 1
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_inb	PROC

; 83   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 84   :     int                     ioaddr      = 0;

  00206	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ioaddr$[ebp], 0

; 85   :     byte_t                  data        = -1;

  0020d	c6 45 ff ff	 mov	 BYTE PTR _data$[ebp], 255 ; 000000ffH

; 86   :     const char          *   param       = NULL;

  00211	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _param$[ebp], 0

; 87   :     
; 88   :     if( argc > 1 )

  00218	83 7d 08 01	 cmp	 DWORD PTR _argc$[ebp], 1
  0021c	7e 2a		 jle	 SHORT $LN2@Sc_inb

; 89   :     {
; 90   :         param = Sc_get_param(argc,argv,'a');

  0021e	6a 61		 push	 97			; 00000061H
  00220	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  00223	50		 push	 eax
  00224	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  00227	51		 push	 ecx
  00228	e8 00 00 00 00	 call	 _Sc_get_param
  0022d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00230	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 91   :         if( param )

  00233	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  00237	74 0f		 je	 SHORT $LN2@Sc_inb

; 92   :             ioaddr = _atoh(param);

  00239	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  0023c	52		 push	 edx
  0023d	e8 00 00 00 00	 call	 __atoh
  00242	83 c4 04	 add	 esp, 4
  00245	89 45 f4	 mov	 DWORD PTR _ioaddr$[ebp], eax
$LN2@Sc_inb:

; 93   :     }
; 94   :     data = Io_inb((void *)ioaddr);

  00248	8b 45 f4	 mov	 eax, DWORD PTR _ioaddr$[ebp]
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 _Io_inb
  00251	83 c4 04	 add	 esp, 4
  00254	88 45 ff	 mov	 BYTE PTR _data$[ebp], al

; 95   :     _printf("port: %04X\ndata: %02X\n",ioaddr,data);

  00257	0f b6 4d ff	 movzx	 ecx, BYTE PTR _data$[ebp]
  0025b	51		 push	 ecx
  0025c	8b 55 f4	 mov	 edx, DWORD PTR _ioaddr$[ebp]
  0025f	52		 push	 edx
  00260	68 00 00 00 00	 push	 OFFSET $SG2471
  00265	e8 00 00 00 00	 call	 __printf
  0026a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 96   : 
; 97   :     return 0;

  0026d	33 c0		 xor	 eax, eax

; 98   : }

  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
_Sc_inb	ENDP
_TEXT	ENDS
EXTRN	_Io_outb:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ioaddr$ = -12						; size = 4
_param$ = -8						; size = 4
_data$ = -1						; size = 1
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_outb PROC

; 102  : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 103  :     int                     ioaddr      = 0;

  00286	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ioaddr$[ebp], 0

; 104  :     byte_t                  data        = -1;

  0028d	c6 45 ff ff	 mov	 BYTE PTR _data$[ebp], 255 ; 000000ffH

; 105  :     const char          *   param       = NULL;

  00291	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _param$[ebp], 0

; 106  : 
; 107  :     if( argc > 1 )

  00298	83 7d 08 01	 cmp	 DWORD PTR _argc$[ebp], 1
  0029c	7e 77		 jle	 SHORT $LN4@Sc_outb

; 108  :     {
; 109  :         param = Sc_get_param(argc,argv,'a');

  0029e	6a 61		 push	 97			; 00000061H
  002a0	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  002a3	50		 push	 eax
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 _Sc_get_param
  002ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b0	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 110  :         if( param )

  002b3	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  002b7	74 0f		 je	 SHORT $LN3@Sc_outb

; 111  :             ioaddr = _atoh(param);

  002b9	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 __atoh
  002c2	83 c4 04	 add	 esp, 4
  002c5	89 45 f4	 mov	 DWORD PTR _ioaddr$[ebp], eax
$LN3@Sc_outb:

; 112  :         param = Sc_get_param(argc,argv,'d');

  002c8	6a 64		 push	 100			; 00000064H
  002ca	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  002cd	50		 push	 eax
  002ce	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _Sc_get_param
  002d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002da	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 113  :         if( param )

  002dd	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  002e1	74 0f		 je	 SHORT $LN2@Sc_outb

; 114  :             data = (byte_t)_atoh(param);

  002e3	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  002e6	52		 push	 edx
  002e7	e8 00 00 00 00	 call	 __atoh
  002ec	83 c4 04	 add	 esp, 4
  002ef	88 45 ff	 mov	 BYTE PTR _data$[ebp], al
$LN2@Sc_outb:

; 115  :         param = Sc_get_param(argc,argv,'c');

  002f2	6a 63		 push	 99			; 00000063H
  002f4	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  002f7	50		 push	 eax
  002f8	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  002fb	51		 push	 ecx
  002fc	e8 00 00 00 00	 call	 _Sc_get_param
  00301	83 c4 0c	 add	 esp, 12			; 0000000cH
  00304	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 116  :         if( param )

  00307	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  0030b	74 08		 je	 SHORT $LN4@Sc_outb

; 117  :             data = (byte_t)(*param);

  0030d	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  00310	8a 02		 mov	 al, BYTE PTR [edx]
  00312	88 45 ff	 mov	 BYTE PTR _data$[ebp], al
$LN4@Sc_outb:

; 118  :     }
; 119  :     _printf("port: %04X\ndata: %02X\n",ioaddr,data);

  00315	0f b6 4d ff	 movzx	 ecx, BYTE PTR _data$[ebp]
  00319	51		 push	 ecx
  0031a	8b 55 f4	 mov	 edx, DWORD PTR _ioaddr$[ebp]
  0031d	52		 push	 edx
  0031e	68 00 00 00 00	 push	 OFFSET $SG2487
  00323	e8 00 00 00 00	 call	 __printf
  00328	83 c4 0c	 add	 esp, 12			; 0000000cH

; 120  :     Io_outb((void *)ioaddr,data);

  0032b	8a 45 ff	 mov	 al, BYTE PTR _data$[ebp]
  0032e	50		 push	 eax
  0032f	8b 4d f4	 mov	 ecx, DWORD PTR _ioaddr$[ebp]
  00332	51		 push	 ecx
  00333	e8 00 00 00 00	 call	 _Io_outb
  00338	83 c4 08	 add	 esp, 8

; 121  : 
; 122  :     asm int 024h

  0033b	cd 24		 int	 36			; 00000024H

; 123  :     return 0;

  0033d	33 c0		 xor	 eax, eax

; 124  : }

  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c3		 ret	 0
_Sc_outb ENDP
_TEXT	ENDS
EXTRN	_Io_ind:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ioaddr$ = -12						; size = 4
_param$ = -8						; size = 4
_data$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_Sc_ind	PROC

; 128  : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 129  :     int                     ioaddr      = 0;

  00356	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ioaddr$[ebp], 0

; 130  :     dword_t                 data        = -1;

  0035d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _data$[ebp], -1

; 131  :     const char          *   param       = NULL;

  00364	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _param$[ebp], 0

; 132  :     
; 133  :     if( argc > 1 )

  0036b	83 7d 08 01	 cmp	 DWORD PTR _argc$[ebp], 1
  0036f	7e 2a		 jle	 SHORT $LN2@Sc_ind

; 134  :     {
; 135  :         param = Sc_get_param(argc,argv,'a');

  00371	6a 61		 push	 97			; 00000061H
  00373	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  00376	50		 push	 eax
  00377	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  0037a	51		 push	 ecx
  0037b	e8 00 00 00 00	 call	 _Sc_get_param
  00380	83 c4 0c	 add	 esp, 12			; 0000000cH
  00383	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 136  :         if( param )

  00386	83 7d f8 00	 cmp	 DWORD PTR _param$[ebp], 0
  0038a	74 0f		 je	 SHORT $LN2@Sc_ind

; 137  :             ioaddr = _atoh(param);

  0038c	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  0038f	52		 push	 edx
  00390	e8 00 00 00 00	 call	 __atoh
  00395	83 c4 04	 add	 esp, 4
  00398	89 45 f4	 mov	 DWORD PTR _ioaddr$[ebp], eax
$LN2@Sc_ind:

; 138  :     }
; 139  :     data = Io_ind((void *)ioaddr);

  0039b	8b 45 f4	 mov	 eax, DWORD PTR _ioaddr$[ebp]
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 _Io_ind
  003a4	83 c4 04	 add	 esp, 4
  003a7	89 45 fc	 mov	 DWORD PTR _data$[ebp], eax

; 140  :     _printf("port: %04X\ndata: %08X\n",ioaddr,data);

  003aa	8b 4d fc	 mov	 ecx, DWORD PTR _data$[ebp]
  003ad	51		 push	 ecx
  003ae	8b 55 f4	 mov	 edx, DWORD PTR _ioaddr$[ebp]
  003b1	52		 push	 edx
  003b2	68 00 00 00 00	 push	 OFFSET $SG2501
  003b7	e8 00 00 00 00	 call	 __printf
  003bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 
; 142  :     return 0;

  003bf	33 c0		 xor	 eax, eax

; 143  : }

  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c3		 ret	 0
_Sc_ind	ENDP
_TEXT	ENDS
END
