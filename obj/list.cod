; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\libc\list.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_List_get_head
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\libc\list.c
;	COMDAT _List_get_head
_TEXT	SEGMENT
_list$ = 8						; size = 4
_List_get_head PROC					; COMDAT

; 31   :     return list->ls_head;    

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 32   : }

  00006	c3		 ret	 0
_List_get_head ENDP
_TEXT	ENDS
PUBLIC	_List_get_tail
; Function compile flags: /Ogtpy
;	COMDAT _List_get_tail
_TEXT	SEGMENT
_list$ = 8						; size = 4
_List_get_tail PROC					; COMDAT

; 36   :     return list->ls_tail;    

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 37   : }

  00007	c3		 ret	 0
_List_get_tail ENDP
_TEXT	ENDS
PUBLIC	_List_add_head
; Function compile flags: /Ogtpy
;	COMDAT _List_add_head
_TEXT	SEGMENT
_list$ = 8						; size = 4
_ln$ = 12						; size = 4
_List_add_head PROC					; COMDAT

; 41   :     if( NULL == list->ls_head )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	83 38 00	 cmp	 DWORD PTR [eax], 0

; 42   :     {
; 43   :         list->ls_head   = ln;

  00007	8b 4c 24 08	 mov	 ecx, DWORD PTR _ln$[esp-4]
  0000b	75 15		 jne	 SHORT $LN1@List_add_h
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 44   :         list->ls_tail   = ln;

  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 45   :         ln->ln_next     = NULL;

  00012	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 46   :         ln->ln_prev     = NULL;

  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 54   : 
; 55   :     return RESULT_SUCCEED;

  0001f	33 c0		 xor	 eax, eax

; 56   : }

  00021	c3		 ret	 0
$LN1@List_add_h:

; 47   :         return RESULT_SUCCEED;
; 48   :     }
; 49   : 
; 50   :     ln->ln_prev             = 0 ;

  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 51   :     ln->ln_next             = list->ls_head;

  00028	8b 10		 mov	 edx, DWORD PTR [eax]
  0002a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 52   :     list->ls_head->ln_prev  = ln;

  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	89 0a		 mov	 DWORD PTR [edx], ecx

; 53   :     list->ls_head           = ln;

  00031	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 
; 55   :     return RESULT_SUCCEED;

  00033	33 c0		 xor	 eax, eax

; 56   : }

  00035	c3		 ret	 0
_List_add_head ENDP
_TEXT	ENDS
PUBLIC	_List_add_tail
; Function compile flags: /Ogtpy
;	COMDAT _List_add_tail
_TEXT	SEGMENT
_list$ = 8						; size = 4
_ln$ = 12						; size = 4
_List_add_tail PROC					; COMDAT

; 60   :     if( NULL == list->ls_head )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]

; 61   :     {
; 62   :         list->ls_head   = ln;

  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR _ln$[esp-4]
  00008	33 d2		 xor	 edx, edx
  0000a	39 10		 cmp	 DWORD PTR [eax], edx
  0000c	75 0d		 jne	 SHORT $LN1@List_add_t
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 63   :         list->ls_tail   = ln;

  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 64   :         ln->ln_next     = NULL;

  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 65   :         ln->ln_prev     = NULL;

  00016	89 11		 mov	 DWORD PTR [ecx], edx

; 73   : 
; 74   :     return RESULT_SUCCEED;

  00018	33 c0		 xor	 eax, eax

; 75   : }

  0001a	c3		 ret	 0
$LN1@List_add_t:
  0001b	56		 push	 esi

; 66   :         return RESULT_SUCCEED;
; 67   :     }
; 68   : 
; 69   :     ln->ln_prev             = list->ls_tail ;

  0001c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0001f	89 31		 mov	 DWORD PTR [ecx], esi

; 70   :     ln->ln_next             = 0;

  00021	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 71   :     list->ls_tail->ln_next  = ln;

  00024	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00027	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 72   :     list->ls_tail           = ln;

  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0002d	5e		 pop	 esi

; 73   : 
; 74   :     return RESULT_SUCCEED;

  0002e	33 c0		 xor	 eax, eax

; 75   : }

  00030	c3		 ret	 0
_List_add_tail ENDP
_TEXT	ENDS
PUBLIC	_List_del_head
; Function compile flags: /Ogtpy
;	COMDAT _List_del_head
_TEXT	SEGMENT
_list$ = 8						; size = 4
_ln$ = 12						; size = 4
_List_del_head PROC					; COMDAT

; 79   :     list_node_t * next;
; 80   : 
; 81   :     if( list->ls_head == NULL)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _list$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN3@List_del_h

; 82   :         return RESULT_FAILED;

  0000a	83 c8 ff	 or	 eax, -1

; 103  : }

  0000d	c3		 ret	 0
$LN3@List_del_h:

; 83   : 
; 84   :     *ln = list->ls_head;

  0000e	8b 4c 24 08	 mov	 ecx, DWORD PTR _ln$[esp-4]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 85   : 
; 86   :     next = list->ls_head->ln_next;

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 87   : 
; 88   :     (*ln)->ln_next    = NULL;
; 89   :     (*ln)->ln_prev    = NULL;
; 90   : 
; 91   :     if( next == NULL)

  00019	85 c0		 test	 eax, eax
  0001b	57		 push	 edi
  0001c	8b 39		 mov	 edi, DWORD PTR [ecx]
  0001e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00025	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00027	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002d	5f		 pop	 edi
  0002e	75 06		 jne	 SHORT $LN2@List_del_h

; 92   :     {
; 93   :         list->ls_head = NULL;

  00030	89 02		 mov	 DWORD PTR [edx], eax

; 94   :         list->ls_tail = NULL;

  00032	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 103  : }

  00035	c3		 ret	 0
$LN2@List_del_h:

; 95   :     }
; 96   :     else
; 97   :     {
; 98   :         next->ln_prev = NULL;

  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 99   :         list->ls_head = next;

  0003c	89 02		 mov	 DWORD PTR [edx], eax

; 100  :     }
; 101  : 
; 102  :     return RESULT_SUCCEED;

  0003e	33 c0		 xor	 eax, eax

; 103  : }

  00040	c3		 ret	 0
_List_del_head ENDP
_TEXT	ENDS
PUBLIC	_List_del_tail
; Function compile flags: /Ogtpy
;	COMDAT _List_del_tail
_TEXT	SEGMENT
_list$ = 8						; size = 4
_ln$ = 12						; size = 4
_List_del_tail PROC					; COMDAT

; 107  :     list_node_t * prev;
; 108  : 
; 109  :     if( list->ls_head == NULL)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	83 38 00	 cmp	 DWORD PTR [eax], 0
  00007	75 04		 jne	 SHORT $LN3@List_del_t

; 110  :         return RESULT_FAILED;

  00009	83 c8 ff	 or	 eax, -1

; 131  : }

  0000c	c3		 ret	 0
$LN3@List_del_t:

; 111  : 
; 112  :     *ln = list->ls_tail;

  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	8b 54 24 08	 mov	 edx, DWORD PTR _ln$[esp-4]
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 113  : 
; 114  :     prev = list->ls_tail->ln_prev;

  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 115  : 
; 116  :     (*ln)->ln_next      = NULL;
; 117  :     (*ln)->ln_prev      = NULL;
; 118  : 
; 119  :     if( prev == NULL)

  0001b	85 c9		 test	 ecx, ecx
  0001d	57		 push	 edi
  0001e	8b 3a		 mov	 edi, DWORD PTR [edx]
  00020	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00027	8b 12		 mov	 edx, DWORD PTR [edx]
  00029	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0002f	5f		 pop	 edi
  00030	75 08		 jne	 SHORT $LN2@List_del_t

; 120  :     {
; 121  :         list->ls_head   = NULL;

  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 122  :         list->ls_tail   = NULL;

  00034	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 128  :     }
; 129  : 
; 130  :     return RESULT_SUCCEED;

  00037	33 c0		 xor	 eax, eax

; 131  : }

  00039	c3		 ret	 0
$LN2@List_del_t:

; 123  :     }
; 124  :     else
; 125  :     {
; 126  :         prev->ln_next   = NULL;

  0003a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 127  :         list->ls_tail   = prev;

  00041	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 128  :     }
; 129  : 
; 130  :     return RESULT_SUCCEED;

  00044	33 c0		 xor	 eax, eax

; 131  : }

  00046	c3		 ret	 0
_List_del_tail ENDP
_TEXT	ENDS
PUBLIC	_List_del_at
; Function compile flags: /Ogtpy
;	COMDAT _List_del_at
_TEXT	SEGMENT
_prev$ = 8						; size = 4
_list$ = 8						; size = 4
_ln$ = 12						; size = 4
_List_del_at PROC					; COMDAT

; 135  :     list_node_t         *   prev,
; 136  :                         *   next;
; 137  : 
; 138  :     if( list == NULL)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _list$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	75 04		 jne	 SHORT $LN3@List_del_a

; 139  :         return RESULT_FAILED;

  00008	83 c8 ff	 or	 eax, -1

; 155  : }

  0000b	c3		 ret	 0
$LN3@List_del_a:

; 140  : 
; 141  :     if( list->ls_head == ln )

  0000c	8b 44 24 08	 mov	 eax, DWORD PTR _ln$[esp-4]
  00010	39 01		 cmp	 DWORD PTR [ecx], eax
  00012	75 0f		 jne	 SHORT $LN2@List_del_a

; 142  :         return List_del_head(list,&prev);   //  这里prev当作临时变量使用

  00014	8d 44 24 04	 lea	 eax, DWORD PTR _prev$[esp-4]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _List_del_head
  0001f	83 c4 08	 add	 esp, 8

; 155  : }

  00022	c3		 ret	 0
$LN2@List_del_a:

; 143  : 
; 144  :     if( list->ls_tail == ln)

  00023	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00026	75 0f		 jne	 SHORT $LN1@List_del_a

; 145  :         return List_del_tail(list,&prev);   //  这里prev当作临时变量使用

  00028	8d 54 24 04	 lea	 edx, DWORD PTR _prev$[esp-4]
  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _List_del_tail
  00033	83 c4 08	 add	 esp, 8

; 155  : }

  00036	c3		 ret	 0
$LN1@List_del_a:

; 146  : 
; 147  :     prev            = ln->ln_prev;

  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 148  :     next            = ln->ln_next;

  00039	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 149  :     prev->ln_next   = next;

  0003c	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 150  :     next->ln_prev   = prev;

  0003f	89 0a		 mov	 DWORD PTR [edx], ecx

; 151  :     ln->ln_next     = NULL;

  00041	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 152  :     ln->ln_prev     = NULL;

  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 153  : 
; 154  :     return RESULT_SUCCEED;

  0004e	33 c0		 xor	 eax, eax

; 155  : }

  00050	c3		 ret	 0
_List_del_at ENDP
_TEXT	ENDS
PUBLIC	_List_insert_before
; Function compile flags: /Ogtpy
;	COMDAT _List_insert_before
_TEXT	SEGMENT
_list$ = 8						; size = 4
_cn$ = 12						; size = 4
_ln$ = 16						; size = 4
_List_insert_before PROC				; COMDAT

; 159  :     list_node_t * prev ;
; 160  : 
; 161  :     if( list == NULL)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 04		 jne	 SHORT $LN2@List_inser

; 162  :         return RESULT_FAILED;

  00008	83 c8 ff	 or	 eax, -1

; 176  : }

  0000b	c3		 ret	 0
$LN2@List_inser:

; 163  : 
; 164  :     if( list->ls_head == cn )

  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	8b 4c 24 08	 mov	 ecx, DWORD PTR _cn$[esp-4]
  00012	3b d1		 cmp	 edx, ecx
  00014	75 29		 jne	 SHORT $LN1@List_inser

; 165  :         return List_add_head(list,ln);

  00016	85 d2		 test	 edx, edx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ln$[esp-4]
  0001c	75 0d		 jne	 SHORT $LN5@List_inser
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00023	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00026	89 11		 mov	 DWORD PTR [ecx], edx

; 174  : 
; 175  :     return RESULT_SUCCEED;

  00028	33 c0		 xor	 eax, eax

; 176  : }

  0002a	c3		 ret	 0

; 165  :         return List_add_head(list,ln);

$LN5@List_inser:
  0002b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00036	8b 10		 mov	 edx, DWORD PTR [eax]
  00038	89 0a		 mov	 DWORD PTR [edx], ecx
  0003a	89 08		 mov	 DWORD PTR [eax], ecx

; 174  : 
; 175  :     return RESULT_SUCCEED;

  0003c	33 c0		 xor	 eax, eax

; 176  : }

  0003e	c3		 ret	 0
$LN1@List_inser:

; 166  : 
; 167  :     prev = cn->ln_prev;
; 168  : 
; 169  :     prev->ln_next   = ln;

  0003f	8b 44 24 0c	 mov	 eax, DWORD PTR _ln$[esp-4]
  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 170  :     ln->ln_prev     = prev;

  00048	89 10		 mov	 DWORD PTR [eax], edx

; 171  : 
; 172  :     ln->ln_next     = cn;

  0004a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 173  :     cn->ln_prev     = ln;

  0004d	89 01		 mov	 DWORD PTR [ecx], eax

; 174  : 
; 175  :     return RESULT_SUCCEED;

  0004f	33 c0		 xor	 eax, eax

; 176  : }

  00051	c3		 ret	 0
_List_insert_before ENDP
_TEXT	ENDS
PUBLIC	_List_insert_after
; Function compile flags: /Ogtpy
;	COMDAT _List_insert_after
_TEXT	SEGMENT
_list$ = 8						; size = 4
_cn$ = 12						; size = 4
_ln$ = 16						; size = 4
_List_insert_after PROC					; COMDAT

; 180  :     list_node_t * next;
; 181  :     if( list == NULL)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _list$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 04		 jne	 SHORT $LN2@List_inser@2

; 182  :         return RESULT_FAILED;

  00008	83 c8 ff	 or	 eax, -1

; 195  : }

  0000b	c3		 ret	 0
$LN2@List_inser@2:

; 183  : 
; 184  :     if( list->ls_tail == cn)

  0000c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000f	8b 4c 24 08	 mov	 ecx, DWORD PTR _cn$[esp-4]
  00013	3b d1		 cmp	 edx, ecx
  00015	75 33		 jne	 SHORT $LN1@List_inser@2

; 185  :         return List_add_tail(list,ln);

  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ln$[esp-4]
  0001e	75 15		 jne	 SHORT $LN5@List_inser@2
  00020	89 08		 mov	 DWORD PTR [eax], ecx
  00022	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00025	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 193  : 
; 194  :     return RESULT_SUCCEED;

  00032	33 c0		 xor	 eax, eax

; 195  : }

  00034	c3		 ret	 0

; 185  :         return List_add_tail(list,ln);

$LN5@List_inser@2:
  00035	89 11		 mov	 DWORD PTR [ecx], edx
  00037	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00044	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 193  : 
; 194  :     return RESULT_SUCCEED;

  00047	33 c0		 xor	 eax, eax

; 195  : }

  00049	c3		 ret	 0
$LN1@List_inser@2:

; 186  : 
; 187  :     next = cn->ln_next;
; 188  : 
; 189  :     cn->ln_next     = ln;

  0004a	8b 44 24 0c	 mov	 eax, DWORD PTR _ln$[esp-4]
  0004e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00051	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 190  :     ln->ln_prev     = cn;

  00054	89 08		 mov	 DWORD PTR [eax], ecx

; 191  :     ln->ln_next     = next;

  00056	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 192  :     next->ln_prev   = ln;

  00059	89 02		 mov	 DWORD PTR [edx], eax

; 193  : 
; 194  :     return RESULT_SUCCEED;

  0005b	33 c0		 xor	 eax, eax

; 195  : }

  0005d	c3		 ret	 0
_List_insert_after ENDP
_TEXT	ENDS
END
