; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\kernel\koum.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@LPMMEOOG@kot_unuse?5?$CB?$DN?5type?$AA@ ; `string'
PUBLIC	??_C@_0BA@HILKLLDE@NULL?5?$CB?$DN?5release?$AA@	; `string'
PUBLIC	??_C@_0O@GNOLGLLG@assert?5failed?$AA@		; `string'
PUBLIC	??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0P@FICDHJCA@NULL?5?$CB?$DN?5object?$AA@	; `string'
PUBLIC	??_C@_06JGPNJGPO@koum?4c?$AA@			; `string'
PUBLIC	_Koum_add
EXTRN	_Cpu_psw_set:PROC
EXTRN	_Cpu_disable_interrupt:PROC
EXTRN	_Sys_halt:PROC
EXTRN	__printf:PROC
_BSS	SEGMENT
_koum_table DB	04000H DUP (?)
_koum_idx DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@LPMMEOOG@kot_unuse?5?$CB?$DN?5type?$AA@
; File e:\sourcexstudio\lenix\lenix\src\kernel\koum.c
CONST	SEGMENT
??_C@_0BC@LPMMEOOG@kot_unuse?5?$CB?$DN?5type?$AA@ DB 'kot_unuse != type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HILKLLDE@NULL?5?$CB?$DN?5release?$AA@
CONST	SEGMENT
??_C@_0BA@HILKLLDE@NULL?5?$CB?$DN?5release?$AA@ DB 'NULL != release', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
CONST	SEGMENT
??_C@_0O@GNOLGLLG@assert?5failed?$AA@ DB 'assert failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ DB 'a'
	DB	'ssert: %s ', 0aH, 'file: %s', 0aH, 'line : %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FICDHJCA@NULL?5?$CB?$DN?5object?$AA@
CONST	SEGMENT
??_C@_0P@FICDHJCA@NULL?5?$CB?$DN?5object?$AA@ DB 'NULL != object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGPNJGPO@koum?4c?$AA@
CONST	SEGMENT
??_C@_06JGPNJGPO@koum?4c?$AA@ DB 'koum.c', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Koum_add
_TEXT	SEGMENT
_handle$ = -8						; size = 4
_idx$ = -4						; size = 4
___psw$ = 8						; size = 4
_object$ = 8						; size = 4
_release$ = 12						; size = 4
_type$ = 16						; size = 4
_attr$ = 20						; size = 1
_Koum_add PROC						; COMDAT

; 68   : {

  00000	83 ec 08	 sub	 esp, 8

; 69   :     koi_t         * koi     = NULL;
; 70   :     handle_t        handle  = INVALID_HANDLE;
; 71   :     uint_t          idx     = koum_idx;

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _koum_idx
  00008	53		 push	 ebx
  00009	55		 push	 ebp
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 72   :     CRITICAL_DECLARE(koum_table_lock);
; 73   : 
; 74   :     ASSERT( NULL != object);

  0000c	8b 7c 24 1c	 mov	 edi, DWORD PTR _object$[esp+20]
  00010	33 f6		 xor	 esi, esi
  00012	3b fe		 cmp	 edi, esi
  00014	89 74 24 10	 mov	 DWORD PTR _handle$[esp+24], esi
  00018	89 44 24 14	 mov	 DWORD PTR _idx$[esp+24], eax
  0001c	75 23		 jne	 SHORT $LN22@Koum_add
  0001e	6a 4a		 push	 74			; 0000004aH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FICDHJCA@NULL?5?$CB?$DN?5object?$AA@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0002f	e8 00 00 00 00	 call	 __printf
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00039	e8 00 00 00 00	 call	 _Sys_halt
  0003e	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@Koum_add:

; 75   :     ASSERT( NULL != release);

  00041	8b 6c 24 20	 mov	 ebp, DWORD PTR _release$[esp+20]
  00045	3b ee		 cmp	 ebp, esi
  00047	75 23		 jne	 SHORT $LN18@Koum_add
  00049	6a 4b		 push	 75			; 0000004bH
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HILKLLDE@NULL?5?$CB?$DN?5release?$AA@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0005a	e8 00 00 00 00	 call	 __printf
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00064	e8 00 00 00 00	 call	 _Sys_halt
  00069	83 c4 14	 add	 esp, 20			; 00000014H
$LN18@Koum_add:

; 76   :     ASSERT( kot_unuse != type);

  0006c	8b 5c 24 24	 mov	 ebx, DWORD PTR _type$[esp+20]
  00070	85 db		 test	 ebx, ebx
  00072	75 23		 jne	 SHORT $LN14@Koum_add
  00074	6a 4c		 push	 76			; 0000004cH
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LPMMEOOG@kot_unuse?5?$CB?$DN?5type?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  00085	e8 00 00 00 00	 call	 __printf
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  0008f	e8 00 00 00 00	 call	 _Sys_halt
  00094	83 c4 14	 add	 esp, 20			; 00000014H
$LN14@Koum_add:

; 77   : #ifdef _CFG_RUN_TIME_CHECK_
; 78   :     if( NULL == object || NULL == release || kot_unuse == type )

  00097	85 ff		 test	 edi, edi
  00099	0f 84 8b 00 00
	00		 je	 $LN30@Koum_add
  0009f	85 ed		 test	 ebp, ebp
  000a1	0f 84 83 00 00
	00		 je	 $LN30@Koum_add
  000a7	85 db		 test	 ebx, ebx
  000a9	0f 84 7b 00 00
	00		 je	 $LN30@Koum_add

; 79   :         goto koum_add_end;
; 80   : #endif  /*  _CFG_RUN_TIME_CHECK_ */
; 81   :     /*  跳过第一个内核对象项 */
; 82   :     CRITICAL_BEGIN();

  000af	e8 00 00 00 00	 call	 _Cpu_disable_interrupt
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _koum_idx
  000ba	89 44 24 1c	 mov	 DWORD PTR ___psw$[esp+20], eax
  000be	b8 01 00 00 00	 mov	 eax, 1
$LL6@Koum_add:

; 83   :     do{
; 84   :         if( NULL == koum_table[koum_idx].koi_object )

  000c3	8b ca		 mov	 ecx, edx
  000c5	c1 e1 04	 shl	 ecx, 4
  000c8	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _koum_table[ecx], 0
  000cf	8d 89 00 00 00
	00		 lea	 ecx, DWORD PTR _koum_table[ecx]
  000d5	75 0f		 jne	 SHORT $LN3@Koum_add

; 85   :         {
; 86   :             koi = &koum_table[koum_idx];

  000d7	8b f1		 mov	 esi, ecx

; 87   :             koi->koi_object     = object;

  000d9	89 3e		 mov	 DWORD PTR [esi], edi

; 88   :             koi->koi_release    = release;

  000db	89 6e 04	 mov	 DWORD PTR [esi+4], ebp

; 89   :             koi->koi_type       = type;

  000de	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 90   :             koi->koi_ref_cnt    = 1;

  000e1	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 91   :             ((koh_t *)object)->koh_type = type;

  000e4	89 1f		 mov	 DWORD PTR [edi], ebx
$LN3@Koum_add:

; 92   :         }
; 93   :         koum_idx = (koum_idx + 1) % KOUM_MAX;

  000e6	03 d0		 add	 edx, eax
  000e8	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH

; 94   :     }while(NULL == koi && idx != koum_idx);

  000ee	85 f6		 test	 esi, esi
  000f0	75 06		 jne	 SHORT $LN32@Koum_add
  000f2	39 54 24 14	 cmp	 DWORD PTR _idx$[esp+24], edx
  000f6	75 cb		 jne	 SHORT $LL6@Koum_add
$LN32@Koum_add:

; 92   :         }
; 93   :         koum_idx = (koum_idx + 1) % KOUM_MAX;

  000f8	89 15 00 00 00
	00		 mov	 DWORD PTR _koum_idx, edx

; 95   :     CRITICAL_END();

  000fe	8b 54 24 1c	 mov	 edx, DWORD PTR ___psw$[esp+20]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _Cpu_psw_set
  00108	83 c4 04	 add	 esp, 4

; 96   :     if( koi )

  0010b	85 f6		 test	 esi, esi
  0010d	74 1b		 je	 SHORT $LN30@Koum_add

; 97   :     {
; 98   :         ((hnd_part_t *)(&handle))->hp_idx   = koi - koum_table;
; 99   :         ((hnd_part_t *)(&handle))->hp_pad   = 0;
; 100  :         ((hnd_part_t *)(&handle))->hp_attr  = attr;

  0010f	8a 44 24 28	 mov	 al, BYTE PTR _attr$[esp+20]
  00113	81 ee 00 00 00
	00		 sub	 esi, OFFSET _koum_table
  00119	c1 fe 04	 sar	 esi, 4
  0011c	66 89 74 24 10	 mov	 WORD PTR _handle$[esp+24], si
  00121	c6 44 24 12 00	 mov	 BYTE PTR _handle$[esp+26], 0
  00126	88 44 24 13	 mov	 BYTE PTR _handle$[esp+27], al
$LN30@Koum_add:

; 101  :     }
; 102  : koum_add_end:
; 103  :     return handle;

  0012a	8b 44 24 10	 mov	 eax, DWORD PTR _handle$[esp+24]
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5d		 pop	 ebp
$koum_add_end$1566:
  00131	5b		 pop	 ebx

; 104  : }

  00132	83 c4 08	 add	 esp, 8
  00135	c3		 ret	 0
_Koum_add ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@PMLAOBHG@koi?9?$DOkoi_ref_cnt?5?$DO?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BI@LJDMCJJJ@NULL?5?$CB?$DN?5koi?9?$DOkoi_object?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OHCLPFHE@INVALID_HANDLE?5?$CB?$DN?5handle?$AA@ ; `string'
PUBLIC	_Koum_release
;	COMDAT ??_C@_0BG@PMLAOBHG@koi?9?$DOkoi_ref_cnt?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BG@PMLAOBHG@koi?9?$DOkoi_ref_cnt?5?$DO?$DN?50?$AA@ DB 'koi->koi_re'
	DB	'f_cnt >= 0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LJDMCJJJ@NULL?5?$CB?$DN?5koi?9?$DOkoi_object?$AA@
CONST	SEGMENT
??_C@_0BI@LJDMCJJJ@NULL?5?$CB?$DN?5koi?9?$DOkoi_object?$AA@ DB 'NULL != k'
	DB	'oi->koi_object', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OHCLPFHE@INVALID_HANDLE?5?$CB?$DN?5handle?$AA@
CONST	SEGMENT
??_C@_0BJ@OHCLPFHE@INVALID_HANDLE?5?$CB?$DN?5handle?$AA@ DB 'INVALID_HAND'
	DB	'LE != handle', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Koum_release
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_Koum_release PROC					; COMDAT

; 122  : {

  00000	56		 push	 esi

; 123  :     koi_t         * koi     = 0;
; 124  :     CRITICAL_DECLARE(koum_table_lock);
; 125  : 
; 126  :     ASSERT( INVALID_HANDLE != handle );

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _handle$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 23		 jne	 SHORT $LN17@Koum_relea
  00009	6a 7e		 push	 126			; 0000007eH
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OHCLPFHE@INVALID_HANDLE?5?$CB?$DN?5handle?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0001a	e8 00 00 00 00	 call	 __printf
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00024	e8 00 00 00 00	 call	 _Sys_halt
  00029	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@Koum_relea:

; 127  :     koi = &koum_table[HANDLE_TO_IDX(handle)];

  0002c	0f b7 f6	 movzx	 esi, si
  0002f	c1 e6 04	 shl	 esi, 4

; 128  :     ASSERT( NULL != koi->koi_object );

  00032	83 be 00 00 00
	00 00		 cmp	 DWORD PTR _koum_table[esi], 0
  00039	8d b6 00 00 00
	00		 lea	 esi, DWORD PTR _koum_table[esi]
  0003f	75 26		 jne	 SHORT $LN13@Koum_relea
  00041	68 80 00 00 00	 push	 128			; 00000080H
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LJDMCJJJ@NULL?5?$CB?$DN?5koi?9?$DOkoi_object?$AA@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  00055	e8 00 00 00 00	 call	 __printf
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  0005f	e8 00 00 00 00	 call	 _Sys_halt
  00064	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@Koum_relea:

; 129  :     /*
; 130  :      *  检查类型。防止对象句柄变化，造成错误释放
; 131  :      */
; 132  :     if( koi->koi_type != OBJECT_TYPE(koi->koi_object) )

  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0006e	75 42		 jne	 SHORT $koum_release_failed$1602

; 133  :         goto koum_release_failed;
; 134  :     koi->koi_ref_cnt--;

  00070	83 46 0c ff	 add	 DWORD PTR [esi+12], -1

; 135  :     ASSERT(koi->koi_ref_cnt >= 0 );

  00074	79 26		 jns	 SHORT $LN8@Koum_relea
  00076	68 87 00 00 00	 push	 135			; 00000087H
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PMLAOBHG@koi?9?$DOkoi_ref_cnt?5?$DO?$DN?50?$AA@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0008a	e8 00 00 00 00	 call	 __printf
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00094	e8 00 00 00 00	 call	 _Sys_halt
  00099	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@Koum_relea:

; 136  :     if( koi->koi_ref_cnt == 0 )

  0009c	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  000a0	75 46		 jne	 SHORT $LN5@Koum_relea

; 137  :     {
; 138  :         if( RESULT_FAILED == koi->koi_release(HANDLE_TO_OBJECT(handle)))

  000a2	8b 16		 mov	 edx, DWORD PTR [esi]
  000a4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a7	52		 push	 edx
  000a8	ff d0		 call	 eax
  000aa	83 c4 04	 add	 esp, 4
  000ad	83 f8 ff	 cmp	 eax, -1
  000b0	75 05		 jne	 SHORT $LN3@Koum_relea
$koum_release_failed$1602:

; 153  : koum_release_failed:
; 154  :     return RESULT_FAILED;

  000b2	83 c8 ff	 or	 eax, -1
  000b5	5e		 pop	 esi

; 155  : }

  000b6	c3		 ret	 0
$LN3@Koum_relea:

; 139  :             goto koum_release_failed;
; 140  :         CRITICAL_BEGIN();

  000b7	e8 00 00 00 00	 call	 _Cpu_disable_interrupt

; 141  :         koi->koi_object     = NULL;

  000bc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 142  :         koi->koi_release    = NULL;

  000c2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 143  :         koi->koi_type       = kot_unuse;

  000c9	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 144  :         /*
; 145  :          *    将查找索引设置为释放的条目，可以让下一次查找时，立即获得可用条目,
; 146  :          *  有助于提高性能。
; 147  :          */
; 148  :         koum_idx = koi - koum_table; 

  000d0	81 ee 00 00 00
	00		 sub	 esi, OFFSET _koum_table
  000d6	c1 fe 04	 sar	 esi, 4

; 149  :         CRITICAL_END();

  000d9	50		 push	 eax
  000da	89 35 00 00 00
	00		 mov	 DWORD PTR _koum_idx, esi
  000e0	e8 00 00 00 00	 call	 _Cpu_psw_set
  000e5	83 c4 04	 add	 esp, 4
$LN5@Koum_relea:

; 150  :     }
; 151  : 
; 152  :     return RESULT_SUCCEED;

  000e8	33 c0		 xor	 eax, eax
  000ea	5e		 pop	 esi

; 155  : }

  000eb	c3		 ret	 0
_Koum_release ENDP
_TEXT	ENDS
PUBLIC	_Koum_handle_object
; Function compile flags: /Ogtpy
;	COMDAT _Koum_handle_object
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_Koum_handle_object PROC				; COMDAT

; 174  : {

  00000	56		 push	 esi

; 175  :     koi_t         * koi     = 0;
; 176  : 
; 177  :     ASSERT( INVALID_HANDLE != handle );

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _handle$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 26		 jne	 SHORT $LN4@Koum_handl
  00009	68 b1 00 00 00	 push	 177			; 000000b1H
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_06JGPNJGPO@koum?4c?$AA@
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OHCLPFHE@INVALID_HANDLE?5?$CB?$DN?5handle?$AA@
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0001d	e8 00 00 00 00	 call	 __printf
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00027	e8 00 00 00 00	 call	 _Sys_halt
  0002c	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@Koum_handl:

; 178  :     koi = &koum_table[HANDLE_TO_IDX(handle)];

  0002f	0f b7 c6	 movzx	 eax, si
  00032	c1 e0 04	 shl	 eax, 4
  00035	05 00 00 00 00	 add	 eax, OFFSET _koum_table

; 179  : #ifdef _CFG_DEBUG_
; 180  :     /*_printk("handle type: %d object type: %d\n",
; 181  :         koi->koi_type,OBJECT_TYPE(koi->koi_object));
; 182  :     /**/
; 183  : #endif  /*  _CFG_DEBUG_ */
; 184  :     if( koi->koi_type == OBJECT_TYPE(koi->koi_object) )

  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003f	2b 01		 sub	 eax, DWORD PTR [ecx]
  00041	5e		 pop	 esi
  00042	f7 d8		 neg	 eax
  00044	1b c0		 sbb	 eax, eax
  00046	f7 d0		 not	 eax
  00048	23 c1		 and	 eax, ecx

; 185  :         return koi->koi_object;
; 186  :     return NULL;
; 187  : }

  0004a	c3		 ret	 0
_Koum_handle_object ENDP
_TEXT	ENDS
PUBLIC	_Koum_handle_release
; Function compile flags: /Ogtpy
;	COMDAT _Koum_handle_release
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_Koum_handle_release PROC				; COMDAT

; 206  :     return  HANDLE_TO_RELEASE(handle);

  00000	0f b7 44 24 04	 movzx	 eax, WORD PTR _handle$[esp-4]
  00005	c1 e0 04	 shl	 eax, 4
  00008	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR _koum_table[eax+4]

; 207  : }

  0000e	c3		 ret	 0
_Koum_handle_release ENDP
_TEXT	ENDS
PUBLIC	_Koum_handle_type
; Function compile flags: /Ogtpy
;	COMDAT _Koum_handle_type
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_Koum_handle_type PROC					; COMDAT

; 226  :     return HANDLE_TO_TYPE(handle);

  00000	0f b7 44 24 04	 movzx	 eax, WORD PTR _handle$[esp-4]
  00005	c1 e0 04	 shl	 eax, 4
  00008	8b 80 08 00 00
	00		 mov	 eax, DWORD PTR _koum_table[eax+8]

; 227  : }

  0000e	c3		 ret	 0
_Koum_handle_type ENDP
_TEXT	ENDS
END
