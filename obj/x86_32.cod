; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\asm\x86_32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Cpu_psw_get
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\asm\x86_32.c
;	COMDAT _Cpu_psw_get
_TEXT	SEGMENT
_Cpu_psw_get PROC					; COMDAT

; 12   :     __asm
; 13   :     {
; 14   :         pushfd;

  00000	9c		 pushfd

; 15   :         pop eax;

  00001	58		 pop	 eax

; 16   :         ret;

  00002	c3		 ret	 0
_Cpu_psw_get ENDP
_TEXT	ENDS
PUBLIC	_Cpu_psw_set
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_psw_set
_TEXT	SEGMENT
_psw$ = 8						; size = 4
_Cpu_psw_set PROC					; COMDAT

; 22   :     __asm
; 23   :     {
; 24   :         push [esp + 4];

  00000	ff 74 24 04	 push	 DWORD PTR [esp+4]

; 25   :         pushfd;

  00004	9c		 pushfd

; 26   :         pop eax;

  00005	58		 pop	 eax

; 27   :         popfd;

  00006	9d		 popfd

; 28   :         ret

  00007	c3		 ret	 0
_Cpu_psw_set ENDP
_TEXT	ENDS
PUBLIC	_Cpu_disable_interrupt
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_disable_interrupt
_TEXT	SEGMENT
_Cpu_disable_interrupt PROC				; COMDAT

; 35   :     __asm
; 36   :     {
; 37   :         pushfd

  00000	9c		 pushfd

; 38   :         cli

  00001	fa		 cli

; 39   :         pop eax

  00002	58		 pop	 eax

; 40   :         ret

  00003	c3		 ret	 0
_Cpu_disable_interrupt ENDP
_TEXT	ENDS
PUBLIC	_Cpu_enable_interrupt
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_enable_interrupt
_TEXT	SEGMENT
_Cpu_enable_interrupt PROC				; COMDAT

; 46   :     __asm
; 47   :     {
; 48   :         pushfd

  00000	9c		 pushfd

; 49   :         sti

  00001	fb		 sti

; 50   :         pop eax

  00002	58		 pop	 eax

; 51   :         ret

  00003	c3		 ret	 0
_Cpu_enable_interrupt ENDP
_TEXT	ENDS
PUBLIC	_Io_inb
; Function compile flags: /Ogtpy
;	COMDAT _Io_inb
_TEXT	SEGMENT
_port$ = 8						; size = 4
_Io_inb	PROC						; COMDAT

; 63   :     __asm
; 64   :     {
; 65   :         xor eax,eax

  00000	33 c0		 xor	 eax, eax

; 66   :         mov edx,[esp + 4];

  00002	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 67   :         in al,dx

  00006	ec		 in	 al, dx

; 68   :         ret

  00007	c3		 ret	 0
_Io_inb	ENDP
_TEXT	ENDS
PUBLIC	_Io_inw
; Function compile flags: /Ogtpy
;	COMDAT _Io_inw
_TEXT	SEGMENT
_port$ = 8						; size = 4
_Io_inw	PROC						; COMDAT

; 75   :     __asm
; 76   :     {
; 77   :         xor eax,eax

  00000	33 c0		 xor	 eax, eax

; 78   :         mov edx,[esp + 4];

  00002	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 79   :         in ax,dx

  00006	66 ed		 in	 ax, dx

; 80   :         ret

  00008	c3		 ret	 0
_Io_inw	ENDP
_TEXT	ENDS
PUBLIC	_Io_ind
; Function compile flags: /Ogtpy
;	COMDAT _Io_ind
_TEXT	SEGMENT
_port$ = 8						; size = 4
_Io_ind	PROC						; COMDAT

; 87   :     __asm
; 88   :     {
; 89   :         mov edx,[esp + 4];

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 90   :         in eax,dx

  00004	ed		 in	 eax, dx

; 91   :         ret

  00005	c3		 ret	 0
_Io_ind	ENDP
_TEXT	ENDS
PUBLIC	_Io_outb
; Function compile flags: /Ogtpy
;	COMDAT _Io_outb
_TEXT	SEGMENT
_port$ = 8						; size = 4
_dat$ = 12						; size = 1
_Io_outb PROC						; COMDAT

; 98   :     __asm
; 99   :     {
; 100  :         mov edx,[esp + 4]

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 101  :         mov al,[esp + 8]

  00004	8a 44 24 08	 mov	 al, BYTE PTR [esp+8]

; 102  :         out dx,al

  00008	ee		 out	 dx, al

; 103  :         ret

  00009	c3		 ret	 0
_Io_outb ENDP
_TEXT	ENDS
PUBLIC	_Io_outw
; Function compile flags: /Ogtpy
;	COMDAT _Io_outw
_TEXT	SEGMENT
_port$ = 8						; size = 4
_dat$ = 12						; size = 2
_Io_outw PROC						; COMDAT

; 110  :     __asm
; 111  :     {
; 112  :         mov edx,[esp + 4]

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 113  :         mov ax,[esp + 8]

  00004	66 8b 44 24 08	 mov	 ax, WORD PTR [esp+8]

; 114  :         out dx,ax

  00009	66 ef		 out	 dx, ax

; 115  :         ret

  0000b	c3		 ret	 0
_Io_outw ENDP
_TEXT	ENDS
PUBLIC	_Io_outd
; Function compile flags: /Ogtpy
;	COMDAT _Io_outd
_TEXT	SEGMENT
_port$ = 8						; size = 4
_dat$ = 12						; size = 4
_Io_outd PROC						; COMDAT

; 122  :     __asm
; 123  :     {
; 124  :         mov edx,[esp + 4]

  00000	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 125  :         mov eax,[esp + 8]

  00004	8b 44 24 08	 mov	 eax, DWORD PTR [esp+8]

; 126  :         out dx,eax

  00008	ef		 out	 dx, eax

; 127  :         ret

  00009	c3		 ret	 0
_Io_outd ENDP
_TEXT	ENDS
PUBLIC	_Io_inw_buffer
; Function compile flags: /Ogtpy
;	COMDAT _Io_inw_buffer
_TEXT	SEGMENT
_port$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Io_inw_buffer PROC					; COMDAT

; 134  :     __asm
; 135  :     {
; 136  :         cld

  00000	fc		 cld

; 137  :         mov edx,[esp +  4];

  00001	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 138  :         mov edi,[esp +  8];

  00005	8b 7c 24 08	 mov	 edi, DWORD PTR [esp+8]

; 139  :         mov ecx,[esp + 12]

  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR [esp+12]

; 140  :         rep insw

  0000d	f3 66 6d	 rep	  insw

; 141  :         ret

  00010	c3		 ret	 0
_Io_inw_buffer ENDP
_TEXT	ENDS
PUBLIC	_Io_outw_buffer
; Function compile flags: /Ogtpy
;	COMDAT _Io_outw_buffer
_TEXT	SEGMENT
_port$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Io_outw_buffer PROC					; COMDAT

; 148  :     __asm
; 149  :     {
; 150  :         cld

  00000	fc		 cld

; 151  :         mov edx,[esp +  4];

  00001	8b 54 24 04	 mov	 edx, DWORD PTR [esp+4]

; 152  :         mov esi,[esp +  8];

  00005	8b 74 24 08	 mov	 esi, DWORD PTR [esp+8]

; 153  :         mov ecx,[esp + 12]

  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR [esp+12]

; 154  :         rep outsw

  0000d	f3 66 6f	 rep	  outsw

; 155  :         ret

  00010	c3		 ret	 0
_Io_outw_buffer ENDP
_TEXT	ENDS
PUBLIC	_Cpu_hlt
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_hlt
_TEXT	SEGMENT
_Cpu_hlt PROC						; COMDAT

; 161  :     __asm
; 162  :     {
; 163  :         hlt

  00000	f4		 hlt

; 164  :         ret

  00001	c3		 ret	 0
_Cpu_hlt ENDP
_TEXT	ENDS
PUBLIC	_Cpu_tas_i
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_tas_i
_TEXT	SEGMENT
_lck$ = 8						; size = 4
_test$ = 12						; size = 4
_set$ = 16						; size = 4
_Cpu_tas_i PROC						; COMDAT

; 171  :     __asm
; 172  :     {
; 173  :         mov ecx,[esp + 4]

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR [esp+4]

; 174  :         mov eax,[esp + 8]

  00004	8b 44 24 08	 mov	 eax, DWORD PTR [esp+8]

; 175  :         mov edx,[esp + 12]

  00008	8b 54 24 0c	 mov	 edx, DWORD PTR [esp+12]

; 176  :         lock cmpxchg [ecx],edx

  0000c	f0 0f b1 11	 lock	  cmpxchg DWORD PTR [ecx], edx

; 177  :         ret

  00010	c3		 ret	 0
_Cpu_tas_i ENDP
_TEXT	ENDS
PUBLIC	_Seg_get_cs
; Function compile flags: /Ogtpy
;	COMDAT _Seg_get_cs
_TEXT	SEGMENT
_Seg_get_cs PROC					; COMDAT

; 184  :     __asm
; 185  :     {
; 186  :         xor eax,eax

  00000	33 c0		 xor	 eax, eax

; 187  :         mov ax,cs

  00002	66 8c c8	 mov	 ax, cs

; 188  :         ret

  00005	c3		 ret	 0
_Seg_get_cs ENDP
_TEXT	ENDS
PUBLIC	_Seg_get_ds
; Function compile flags: /Ogtpy
;	COMDAT _Seg_get_ds
_TEXT	SEGMENT
_Seg_get_ds PROC					; COMDAT

; 195  :     __asm
; 196  :     {
; 197  :         xor eax,eax

  00000	33 c0		 xor	 eax, eax

; 198  :         mov ax,cs

  00002	66 8c c8	 mov	 ax, cs

; 199  :         ret

  00005	c3		 ret	 0
_Seg_get_ds ENDP
_TEXT	ENDS
PUBLIC	_Seg_get_ss
; Function compile flags: /Ogtpy
;	COMDAT _Seg_get_ss
_TEXT	SEGMENT
_Seg_get_ss PROC					; COMDAT

; 205  :     __asm
; 206  :     {
; 207  :         xor eax,eax

  00000	33 c0		 xor	 eax, eax

; 208  :         mov ax,cs

  00002	66 8c c8	 mov	 ax, cs

; 209  :         ret

  00005	c3		 ret	 0
_Seg_get_ss ENDP
_TEXT	ENDS
PUBLIC	_Proc_switch_to
EXTRN	_Proc_switch_prepare:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Proc_switch_to
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eflags$ = 12						; size = 4
_next$ = 16						; size = 4
_Proc_switch_to PROC					; COMDAT

; 216  :     __asm
; 217  :     {
; 218  :         pushad

  00000	60		 pushad

; 219  :         mov ebx,esp

  00001	8b dc		 mov	 ebx, esp

; 220  :         mov eax,[esp + 44]

  00003	8b 44 24 2c	 mov	 eax, DWORD PTR [esp+44]

; 221  :         push eax;

  00007	50		 push	 eax

; 222  :         push ebx

  00008	53		 push	 ebx

; 223  :         call Proc_switch_prepare

  00009	e8 00 00 00 00	 call	 _Proc_switch_prepare

; 224  :         mov esp,eax

  0000e	8b e0		 mov	 esp, eax

; 225  :         popad

  00010	61		 popad

; 226  :         iretd;

  00011	cf		 iretd
_Proc_switch_to ENDP
_TEXT	ENDS
PUBLIC	_Ivt_get
; Function compile flags: /Ogtpy
;	COMDAT _Ivt_get
_TEXT	SEGMENT
_id$ = 8						; size = 4
_Ivt_get PROC						; COMDAT

; 233  :     return 0;

  00000	33 c0		 xor	 eax, eax

; 234  : }

  00002	c3		 ret	 0
_Ivt_get ENDP
_TEXT	ENDS
PUBLIC	_Sys_call_entry
; Function compile flags: /Ogtpy
;	COMDAT _Sys_call_entry
_TEXT	SEGMENT
_Sys_call_entry PROC					; COMDAT

; 238  : }

  00000	c3		 ret	 0
_Sys_call_entry ENDP
_TEXT	ENDS
END
