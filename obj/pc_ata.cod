; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\driver\pc_ata.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

EXTRN	_Io_delay:PROC
EXTRN	_Io_inb:PROC
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\driver\pc_ata.c
;	COMDAT _Ata_device_ready
_TEXT	SEGMENT
_Ata_device_ready PROC					; COMDAT
; _ata$ = edi

; 62   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 63   :     int             retry   = ATA_RETRY_TIMES;

  00002	be 10 27 00 00	 mov	 esi, 10000		; 00002710H

; 64   :     result_t        result  = RESULT_FAILED;

  00007	83 cb ff	 or	 ebx, -1
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Ata_device:

; 65   : 
; 66   :     while( retry-- > 0 )
; 67   :     {
; 68   :         if( ATA_STATUS(ata) & ATA_STATUS_DRDY )

  00010	8b 07		 mov	 eax, DWORD PTR [edi]
  00012	83 c0 07	 add	 eax, 7
  00015	50		 push	 eax
  00016	83 ee 01	 sub	 esi, 1
  00019	e8 00 00 00 00	 call	 _Io_inb
  0001e	83 c4 04	 add	 esp, 4
  00021	a8 40		 test	 al, 64			; 00000040H
  00023	75 0e		 jne	 SHORT $LN7@Ata_device

; 71   :             break;
; 72   :         }
; 73   :         Io_delay();

  00025	e8 00 00 00 00	 call	 _Io_delay
  0002a	85 f6		 test	 esi, esi
  0002c	7f e2		 jg	 SHORT $LL3@Ata_device
  0002e	5e		 pop	 esi

; 74   :     }
; 75   :     return result;

  0002f	8b c3		 mov	 eax, ebx
  00031	5b		 pop	 ebx

; 76   : }

  00032	c3		 ret	 0
$LN7@Ata_device:
  00033	5e		 pop	 esi

; 69   :         {
; 70   :             result = RESULT_SUCCEED;

  00034	33 c0		 xor	 eax, eax
  00036	5b		 pop	 ebx

; 76   : }

  00037	c3		 ret	 0
_Ata_device_ready ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_data_request
_TEXT	SEGMENT
_Ata_data_request PROC					; COMDAT
; _ata$ = edi

; 97   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 98   :     int             retry   = ATA_RETRY_TIMES;

  00002	be 10 27 00 00	 mov	 esi, 10000		; 00002710H

; 99   :     result_t        result  = RESULT_FAILED;

  00007	83 cb ff	 or	 ebx, -1
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Ata_data_r:

; 100  : 
; 101  :     while( retry-- > 0 )
; 102  :     {
; 103  :         if( ATA_STATUS(ata) & ATA_STATUS_DRQ )

  00010	8b 07		 mov	 eax, DWORD PTR [edi]
  00012	83 c0 07	 add	 eax, 7
  00015	50		 push	 eax
  00016	83 ee 01	 sub	 esi, 1
  00019	e8 00 00 00 00	 call	 _Io_inb
  0001e	83 c4 04	 add	 esp, 4
  00021	a8 08		 test	 al, 8
  00023	75 0e		 jne	 SHORT $LN7@Ata_data_r

; 106  :             break;
; 107  :         }
; 108  :         Io_delay();

  00025	e8 00 00 00 00	 call	 _Io_delay
  0002a	85 f6		 test	 esi, esi
  0002c	7f e2		 jg	 SHORT $LL3@Ata_data_r
  0002e	5e		 pop	 esi

; 109  :    }
; 110  :     return result;

  0002f	8b c3		 mov	 eax, ebx
  00031	5b		 pop	 ebx

; 111  : }

  00032	c3		 ret	 0
$LN7@Ata_data_r:
  00033	5e		 pop	 esi

; 104  :         {
; 105  :             result = RESULT_SUCCEED;

  00034	33 c0		 xor	 eax, eax
  00036	5b		 pop	 ebx

; 111  : }

  00037	c3		 ret	 0
_Ata_data_request ENDP
_TEXT	ENDS
EXTRN	_Io_inw_buffer:PROC
EXTRN	_Io_outb:PROC
EXTRN	__memzero:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Ata_size
_TEXT	SEGMENT
_dev$ = -516						; size = 1
_buf$ = -512						; size = 512
_Ata_size PROC						; COMDAT
; _ata$ = eax

; 133  : {

  00000	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	57		 push	 edi

; 134  :     byte_t          dev     = 0xE0;
; 135  :     byte_t        * port    = NULL;
; 136  :     byte_t          err     = 0;
; 137  :     qword_t         size    = 0;

  00009	33 ed		 xor	 ebp, ebp

; 138  :     word_t          buf[256]= {0,};

  0000b	68 fe 01 00 00	 push	 510			; 000001feH
  00010	8b f8		 mov	 edi, eax
  00012	8d 44 24 16	 lea	 eax, DWORD PTR _buf$[esp+534]
  00016	55		 push	 ebp
  00017	50		 push	 eax
  00018	c6 44 24 18 e0	 mov	 BYTE PTR _dev$[esp+540], 224 ; 000000e0H
  0001d	33 db		 xor	 ebx, ebx
  0001f	66 89 6c 24 1c	 mov	 WORD PTR _buf$[esp+540], bp
  00024	e8 00 00 00 00	 call	 _memset
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 139  : 
; 140  :     if( ata->ata_flag & ATA_FLAG_ADDR48 )

  0002c	f6 47 04 02	 test	 BYTE PTR [edi+4], 2
  00030	0f 85 a7 00 00
	00		 jne	 $LN7@Ata_size
  00036	56		 push	 esi

; 141  :         goto ata_addr48;
; 142  :     /*
; 143  :      *  28位ata地址处理。
; 144  :      */
; 145  :     _memzero(buf,512);

  00037	8d 4c 24 14	 lea	 ecx, DWORD PTR _buf$[esp+532]
  0003b	68 00 02 00 00	 push	 512			; 00000200H
  00040	51		 push	 ecx
$ata_addr48$1914:
  00041	e8 00 00 00 00	 call	 __memzero

; 146  :     port = ata->ata_io_addr;

  00046	8b 37		 mov	 esi, DWORD PTR [edi]
  00048	83 c4 08	 add	 esp, 8

; 147  :     if( ata->ata_flag & ATA_FLAG_SLAVE )

  0004b	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0004f	74 05		 je	 SHORT $LN3@Ata_size

; 148  :         dev = 0xF0;

  00051	c6 44 24 10 f0	 mov	 BYTE PTR _dev$[esp+532], 240 ; 000000f0H
$LN3@Ata_size:

; 149  :     if( Ata_device_ready(ata) != RESULT_SUCCEED )

  00056	e8 00 00 00 00	 call	 _Ata_device_ready
  0005b	85 c0		 test	 eax, eax
  0005d	0f 85 88 00 00
	00		 jne	 $LN9@Ata_size

; 150  :         goto ata_size_end;
; 151  :     Io_outb(port + 2,0);

  00063	50		 push	 eax
  00064	8d 56 02	 lea	 edx, DWORD PTR [esi+2]
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 _Io_outb

; 152  :     Io_outb(port + 3,0);

  0006d	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  00070	6a 00		 push	 0
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _Io_outb

; 153  :     Io_outb(port + 4,0);

  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0007b	6a 00		 push	 0
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _Io_outb

; 154  :     Io_outb(port + 5,0);

  00083	8d 56 05	 lea	 edx, DWORD PTR [esi+5]
  00086	6a 00		 push	 0
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _Io_outb

; 155  :     Io_outb(port + 6,dev);

  0008e	8b 44 24 30	 mov	 eax, DWORD PTR _dev$[esp+564]
  00092	50		 push	 eax
  00093	8d 4e 06	 lea	 ecx, DWORD PTR [esi+6]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _Io_outb

; 156  :     Io_outb(port + 7,ATA_CMD_IDENTIFY_DEVICE);

  0009c	8d 56 07	 lea	 edx, DWORD PTR [esi+7]
  0009f	68 ec 00 00 00	 push	 236			; 000000ecH
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _Io_outb
  000aa	83 c4 30	 add	 esp, 48			; 00000030H

; 157  :     if( Ata_data_request(ata) != RESULT_SUCCEED )

  000ad	e8 00 00 00 00	 call	 _Ata_data_request
  000b2	85 c0		 test	 eax, eax
  000b4	75 35		 jne	 SHORT $LN9@Ata_size

; 158  :         goto ata_size_end;
; 159  :     Io_inw_buffer(port,buf,256);

  000b6	68 00 01 00 00	 push	 256			; 00000100H
  000bb	8d 44 24 18	 lea	 eax, DWORD PTR _buf$[esp+536]
  000bf	50		 push	 eax
  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 _Io_inw_buffer

; 160  :     size = *((dword_t *)(buf + 60));

  000c6	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR _buf$[esp+664]
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5e		 pop	 esi
  000d1	5f		 pop	 edi
  000d2	5d		 pop	 ebp
  000d3	33 d2		 xor	 edx, edx
  000d5	5b		 pop	 ebx

; 169  : }

  000d6	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  000dc	c3		 ret	 0
$LN7@Ata_size:
  000dd	5f		 pop	 edi

; 161  :     goto ata_size_end;
; 162  : ata_addr48:
; 163  :     /*
; 164  :      *  48位ata地址处理
; 165  :      */
; 166  : 
; 167  : ata_size_end:
; 168  :     return size;

  000de	8b d5		 mov	 edx, ebp
  000e0	5d		 pop	 ebp
  000e1	8b c3		 mov	 eax, ebx
  000e3	5b		 pop	 ebx

; 169  : }

  000e4	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  000ea	c3		 ret	 0
$LN9@Ata_size:
  000eb	5e		 pop	 esi
  000ec	5f		 pop	 edi

; 161  :     goto ata_size_end;
; 162  : ata_addr48:
; 163  :     /*
; 164  :      *  48位ata地址处理
; 165  :      */
; 166  : 
; 167  : ata_size_end:
; 168  :     return size;

  000ed	8b d5		 mov	 edx, ebp
  000ef	5d		 pop	 ebp
  000f0	8b c3		 mov	 eax, ebx
$ata_size_end$1917:
  000f2	5b		 pop	 ebx

; 169  : }

  000f3	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  000f9	c3		 ret	 0
_Ata_size ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_command
_TEXT	SEGMENT
_cmd$ = 8						; size = 1
_address$ = 12						; size = 8
_sectors$ = 20						; size = 1
_Ata_command PROC					; COMDAT
; _ata$ = eax

; 195  : {

  00000	55		 push	 ebp
  00001	57		 push	 edi
  00002	8b f8		 mov	 edi, eax

; 196  :     byte_t        * addr    = NULL;             /*  以字节方式表示的地址  */
; 197  :     byte_t        * port    = NULL;             /*  端口        */
; 198  :     result_t        result  = RESULT_FAILED;    /*  返回值      */
; 199  : 
; 200  :     if( ata->ata_flag & ATA_FLAG_ADDR48 )

  00004	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00007	83 cd ff	 or	 ebp, -1
  0000a	a8 02		 test	 al, 2
  0000c	0f 85 8f 00 00
	00		 jne	 $LN7@Ata_comman
  00012	53		 push	 ebx

; 201  :         goto ata_addr48;
; 202  :     /*
; 203  :      *  28位ata地址处理。
; 204  :      */
; 205  :     addr = (byte_t *)&address;
; 206  :     port = ATA_PORT_CNT(ata);
; 207  :     if( ATA_IS_SLAVE(ata) )
; 208  :         address = (address & 0x0FFFFFFF) | 0xF0000000;

  00013	8b 5c 24 14	 mov	 ebx, DWORD PTR _address$[esp+8]
  00017	56		 push	 esi
  00018	8b 37		 mov	 esi, DWORD PTR [edi]
  0001a	83 c6 02	 add	 esi, 2
  0001d	81 e3 ff ff ff
	0f		 and	 ebx, 268435455		; 0fffffffH
  00023	a8 01		 test	 al, 1
$ata_addr48$1936:
  00025	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _address$[esp+16], 0
  0002d	74 08		 je	 SHORT $LN3@Ata_comman
  0002f	81 cb 00 00 00
	f0		 or	 ebx, -268435456		; f0000000H

; 209  :     else

  00035	eb 06		 jmp	 SHORT $LN11@Ata_comman
$LN3@Ata_comman:

; 210  :         address = (address & 0x0FFFFFFF) | 0xE0000000;

  00037	81 cb 00 00 00
	e0		 or	 ebx, -536870912		; e0000000H
$LN11@Ata_comman:
  0003d	89 5c 24 18	 mov	 DWORD PTR _address$[esp+12], ebx

; 211  :     if( Ata_device_ready(ata) != RESULT_SUCCEED )

  00041	e8 00 00 00 00	 call	 _Ata_device_ready
  00046	85 c0		 test	 eax, eax
  00048	75 5c		 jne	 SHORT $LN8@Ata_comman

; 212  :         goto ata_cmd_end;
; 213  :     Io_outb(port++,sectors);

  0004a	8b 44 24 20	 mov	 eax, DWORD PTR _sectors$[esp+12]
  0004e	50		 push	 eax
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _Io_outb
  00055	83 c6 01	 add	 esi, 1

; 214  :     Io_outb(port++,addr[0]);

  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _Io_outb

; 215  :     Io_outb(port++,addr[1]);

  0005f	8b 4c 24 29	 mov	 ecx, DWORD PTR _address$[esp+29]
  00063	51		 push	 ecx
  00064	83 c6 01	 add	 esi, 1
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 _Io_outb

; 216  :     Io_outb(port++,addr[2]);

  0006d	8b 54 24 32	 mov	 edx, DWORD PTR _address$[esp+38]
  00071	52		 push	 edx
  00072	83 c6 01	 add	 esi, 1
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _Io_outb

; 217  :     Io_outb(port++,addr[3]);

  0007b	8b 44 24 3b	 mov	 eax, DWORD PTR _address$[esp+47]
  0007f	50		 push	 eax
  00080	83 c6 01	 add	 esi, 1
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 _Io_outb

; 218  :     Io_outb(port  ,cmd    );

  00089	8b 4c 24 3c	 mov	 ecx, DWORD PTR _cmd$[esp+52]
  0008d	51		 push	 ecx
  0008e	83 c6 01	 add	 esi, 1
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 _Io_outb
  00097	83 c4 30	 add	 esp, 48			; 00000030H
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	5f		 pop	 edi

; 219  :     result = RESULT_SUCCEED;

  0009d	33 c0		 xor	 eax, eax
  0009f	5d		 pop	 ebp

; 227  : }

  000a0	c3		 ret	 0
$LN7@Ata_comman:
  000a1	5f		 pop	 edi

; 220  :     goto ata_cmd_end;
; 221  : ata_addr48:
; 222  :     /*
; 223  :      *  48位ata地址处理
; 224  :      */
; 225  : ata_cmd_end:
; 226  :     return result;

  000a2	8b c5		 mov	 eax, ebp
  000a4	5d		 pop	 ebp

; 227  : }

  000a5	c3		 ret	 0
$LN8@Ata_comman:
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	5f		 pop	 edi

; 220  :     goto ata_cmd_end;
; 221  : ata_addr48:
; 222  :     /*
; 223  :      *  48位ata地址处理
; 224  :      */
; 225  : ata_cmd_end:
; 226  :     return result;

  000a9	8b c5		 mov	 eax, ebp
$ata_cmd_end$1943:
  000ab	5d		 pop	 ebp

; 227  : }

  000ac	c3		 ret	 0
_Ata_command ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_read_sectors
_TEXT	SEGMENT
_pos$ = 8						; size = 8
_buffer$ = 16						; size = 4
_sectors$ = 20						; size = 1
_Ata_read_sectors PROC					; COMDAT
; _ata$ = esi

; 242  : {

  00000	53		 push	 ebx

; 243  :     byte_t          left = sectors;

  00001	8a 5c 24 14	 mov	 bl, BYTE PTR _sectors$[esp]
  00005	55		 push	 ebp

; 244  : 
; 245  :     if( pos < 0 )

  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR _pos$[esp+8]
  0000a	85 ed		 test	 ebp, ebp
  0000c	7f 0f		 jg	 SHORT $LN27@Ata_read_s
  0000e	7c 08		 jl	 SHORT $LN23@Ata_read_s
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR _pos$[esp+4]
  00014	85 c0		 test	 eax, eax
  00016	73 09		 jae	 SHORT $LN13@Ata_read_s
$LN23@Ata_read_s:
  00018	5d		 pop	 ebp

; 246  :         return 0;

  00019	33 c0		 xor	 eax, eax
  0001b	5b		 pop	 ebx

; 260  : }

  0001c	c3		 ret	 0
$LN27@Ata_read_s:

; 244  : 
; 245  :     if( pos < 0 )

  0001d	8b 44 24 0c	 mov	 eax, DWORD PTR _pos$[esp+4]
$LN13@Ata_read_s:

; 247  :     while(left && (qword_t)pos < ata->ata_size)

  00021	84 db		 test	 bl, bl
  00023	0f 84 96 00 00
	00		 je	 $LN26@Ata_read_s
  00029	57		 push	 edi
  0002a	eb 08		 jmp	 SHORT $LN4@Ata_read_s
  0002c	8d 64 24 00	 npad	 4
$LL25@Ata_read_s:
  00030	8b 44 24 10	 mov	 eax, DWORD PTR _pos$[esp+8]
$LN4@Ata_read_s:
  00034	3b 6e 0c	 cmp	 ebp, DWORD PTR [esi+12]
  00037	0f 87 81 00 00
	00		 ja	 $LN28@Ata_read_s
  0003d	72 05		 jb	 SHORT $LN24@Ata_read_s
  0003f	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00042	73 7a		 jae	 SHORT $LN28@Ata_read_s
$LN24@Ata_read_s:

; 248  :     {
; 249  :         if( Ata_command(ata,ATA_CMD_READ_SECTORS,pos,1) != RESULT_SUCCEED )

  00044	6a 01		 push	 1
  00046	55		 push	 ebp
  00047	50		 push	 eax
  00048	6a 20		 push	 32			; 00000020H
  0004a	8b c6		 mov	 eax, esi
  0004c	e8 00 00 00 00	 call	 _Ata_command
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	75 66		 jne	 SHORT $LN28@Ata_read_s

; 250  :             break;
; 251  :         if( Ata_data_request(ata) != RESULT_SUCCEED )

  00058	bf 10 27 00 00	 mov	 edi, 10000		; 00002710H
  0005d	8d 49 00	 npad	 3
$LL10@Ata_read_s:
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	83 c0 07	 add	 eax, 7
  00065	50		 push	 eax
  00066	83 ef 01	 sub	 edi, 1
  00069	e8 00 00 00 00	 call	 _Io_inb
  0006e	83 c4 04	 add	 esp, 4
  00071	a8 08		 test	 al, 8
  00073	75 17		 jne	 SHORT $LN15@Ata_read_s
  00075	e8 00 00 00 00	 call	 _Io_delay
  0007a	85 ff		 test	 edi, edi
  0007c	7f e2		 jg	 SHORT $LL10@Ata_read_s

; 257  :     }
; 258  : 
; 259  :     return sectors - left;

  0007e	0f b6 44 24 1c	 movzx	 eax, BYTE PTR _sectors$[esp+8]
  00083	5f		 pop	 edi
  00084	0f b6 d3	 movzx	 edx, bl
  00087	5d		 pop	 ebp
  00088	2b c2		 sub	 eax, edx
  0008a	5b		 pop	 ebx

; 260  : }

  0008b	c3		 ret	 0
$LN15@Ata_read_s:

; 252  :             break;
; 253  :         Io_inw_buffer(ATA_PORT_DATA(ata),buffer,256);

  0008c	8b 7c 24 18	 mov	 edi, DWORD PTR _buffer$[esp+8]
  00090	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00092	68 00 01 00 00	 push	 256			; 00000100H
  00097	57		 push	 edi
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _Io_inw_buffer
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 254  :         ++pos;

  000a1	83 44 24 10 01	 add	 DWORD PTR _pos$[esp+8], 1
  000a6	83 d5 00	 adc	 ebp, 0

; 255  :         --left;

  000a9	80 c3 ff	 add	 bl, 255			; 000000ffH

; 256  :         ((byte_t *)(buffer)) += 512;

  000ac	81 c7 00 02 00
	00		 add	 edi, 512		; 00000200H
  000b2	84 db		 test	 bl, bl
  000b4	89 7c 24 18	 mov	 DWORD PTR _buffer$[esp+8], edi
  000b8	0f 85 72 ff ff
	ff		 jne	 $LL25@Ata_read_s
$LN28@Ata_read_s:
  000be	5f		 pop	 edi
$LN26@Ata_read_s:

; 257  :     }
; 258  : 
; 259  :     return sectors - left;

  000bf	0f b6 44 24 18	 movzx	 eax, BYTE PTR _sectors$[esp+4]
  000c4	0f b6 d3	 movzx	 edx, bl
  000c7	5d		 pop	 ebp
  000c8	2b c2		 sub	 eax, edx
  000ca	5b		 pop	 ebx

; 260  : }

  000cb	c3		 ret	 0
_Ata_read_sectors ENDP
_TEXT	ENDS
EXTRN	_Io_outw_buffer:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Ata_write_sectors
_TEXT	SEGMENT
_pos$ = 8						; size = 8
_buffer$ = 16						; size = 4
_sectors$ = 20						; size = 4
_Ata_write_sectors PROC					; COMDAT
; _ata$ = esi

; 265  : {

  00000	53		 push	 ebx

; 266  :     byte_t          left = sectors;

  00001	8a 5c 24 14	 mov	 bl, BYTE PTR _sectors$[esp]
  00005	55		 push	 ebp

; 267  : 
; 268  :     if( pos < 0 )

  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR _pos$[esp+8]
  0000a	85 ed		 test	 ebp, ebp
  0000c	7f 0f		 jg	 SHORT $LN27@Ata_write_
  0000e	7c 08		 jl	 SHORT $LN23@Ata_write_
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR _pos$[esp+4]
  00014	85 c0		 test	 eax, eax
  00016	73 09		 jae	 SHORT $LN13@Ata_write_
$LN23@Ata_write_:
  00018	5d		 pop	 ebp

; 269  :         return 0;

  00019	33 c0		 xor	 eax, eax
  0001b	5b		 pop	 ebx

; 283  : }

  0001c	c3		 ret	 0
$LN27@Ata_write_:

; 267  : 
; 268  :     if( pos < 0 )

  0001d	8b 44 24 0c	 mov	 eax, DWORD PTR _pos$[esp+4]
$LN13@Ata_write_:

; 270  :     while(left && (qword_t)pos < ata->ata_size)

  00021	84 db		 test	 bl, bl
  00023	0f 84 95 00 00
	00		 je	 $LN26@Ata_write_
  00029	57		 push	 edi
  0002a	eb 08		 jmp	 SHORT $LN4@Ata_write_
  0002c	8d 64 24 00	 npad	 4
$LL25@Ata_write_:
  00030	8b 44 24 10	 mov	 eax, DWORD PTR _pos$[esp+8]
$LN4@Ata_write_:
  00034	3b 6e 0c	 cmp	 ebp, DWORD PTR [esi+12]
  00037	0f 87 80 00 00
	00		 ja	 $LN28@Ata_write_
  0003d	72 05		 jb	 SHORT $LN24@Ata_write_
  0003f	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00042	73 79		 jae	 SHORT $LN28@Ata_write_
$LN24@Ata_write_:

; 271  :     {
; 272  :         if( Ata_command(ata,ATA_CMD_READ_SECTORS,pos,1) != RESULT_SUCCEED )

  00044	6a 01		 push	 1
  00046	55		 push	 ebp
  00047	50		 push	 eax
  00048	6a 20		 push	 32			; 00000020H
  0004a	8b c6		 mov	 eax, esi
  0004c	e8 00 00 00 00	 call	 _Ata_command
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	75 65		 jne	 SHORT $LN28@Ata_write_

; 273  :             break;
; 274  :         if( Ata_data_request(ata) != RESULT_SUCCEED )

  00058	bf 10 27 00 00	 mov	 edi, 10000		; 00002710H
  0005d	8d 49 00	 npad	 3
$LL10@Ata_write_:
  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	83 c0 07	 add	 eax, 7
  00065	50		 push	 eax
  00066	83 ef 01	 sub	 edi, 1
  00069	e8 00 00 00 00	 call	 _Io_inb
  0006e	83 c4 04	 add	 esp, 4
  00071	a8 08		 test	 al, 8
  00073	75 16		 jne	 SHORT $LN15@Ata_write_
  00075	e8 00 00 00 00	 call	 _Io_delay
  0007a	85 ff		 test	 edi, edi
  0007c	7f e2		 jg	 SHORT $LL10@Ata_write_

; 280  :     }
; 281  : 
; 282  :     return sectors - left;

  0007e	8b 44 24 1c	 mov	 eax, DWORD PTR _sectors$[esp+8]
  00082	5f		 pop	 edi
  00083	0f b6 d3	 movzx	 edx, bl
  00086	5d		 pop	 ebp
  00087	2b c2		 sub	 eax, edx
  00089	5b		 pop	 ebx

; 283  : }

  0008a	c3		 ret	 0
$LN15@Ata_write_:

; 275  :             break;
; 276  :         Io_outw_buffer(ATA_PORT_DATA(ata),buffer,256);

  0008b	8b 7c 24 18	 mov	 edi, DWORD PTR _buffer$[esp+8]
  0008f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00091	68 00 01 00 00	 push	 256			; 00000100H
  00096	57		 push	 edi
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _Io_outw_buffer
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 277  :         ++pos;

  000a0	83 44 24 10 01	 add	 DWORD PTR _pos$[esp+8], 1
  000a5	83 d5 00	 adc	 ebp, 0

; 278  :         --left;

  000a8	80 c3 ff	 add	 bl, 255			; 000000ffH

; 279  :         ((byte_t *)(buffer)) += 512;

  000ab	81 c7 00 02 00
	00		 add	 edi, 512		; 00000200H
  000b1	84 db		 test	 bl, bl
  000b3	89 7c 24 18	 mov	 DWORD PTR _buffer$[esp+8], edi
  000b7	0f 85 73 ff ff
	ff		 jne	 $LL25@Ata_write_
$LN28@Ata_write_:
  000bd	5f		 pop	 edi
$LN26@Ata_write_:

; 280  :     }
; 281  : 
; 282  :     return sectors - left;

  000be	8b 44 24 18	 mov	 eax, DWORD PTR _sectors$[esp+4]
  000c2	0f b6 d3	 movzx	 edx, bl
  000c5	5d		 pop	 ebp
  000c6	2b c2		 sub	 eax, edx
  000c8	5b		 pop	 ebx

; 283  : }

  000c9	c3		 ret	 0
_Ata_write_sectors ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_open
_TEXT	SEGMENT
_device$ = 8						; size = 4
_Ata_open PROC						; COMDAT

; 294  :     device = device;
; 295  :     return RESULT_SUCCEED;

  00000	33 c0		 xor	 eax, eax

; 296  : }

  00002	c3		 ret	 0
_Ata_open ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_close
_TEXT	SEGMENT
_device$ = 8						; size = 4
_Ata_close PROC						; COMDAT

; 300  :     device = device;
; 301  :     return RESULT_SUCCEED;

  00000	33 c0		 xor	 eax, eax

; 302  : }

  00002	c3		 ret	 0
_Ata_close ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_read
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_device$ = 8						; size = 4
_pos$ = 12						; size = 8
_buffer$ = 20						; size = 4
_size$ = 24						; size = 4
_Ata_read PROC						; COMDAT

; 310  :     ata_t         * ata     = NULL;
; 311  :     byte_t        * buf     = NULL;
; 312  :     int             left    = 0;
; 313  : 
; 314  :     ata     = DEV_DATA(device);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _device$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	8b 70 78	 mov	 esi, DWORD PTR [eax+120]
  0000a	85 f6		 test	 esi, esi
  0000c	57		 push	 edi
  0000d	75 03		 jne	 SHORT $LN8@Ata_read
  0000f	8d 70 58	 lea	 esi, DWORD PTR [eax+88]
$LN8@Ata_read:

; 315  :     buf     = buffer;
; 316  :     left    = size;
; 317  :     if( pos < 0 )

  00012	8b 7c 24 1c	 mov	 edi, DWORD PTR _pos$[esp+16]
  00016	85 ff		 test	 edi, edi
  00018	8b 44 24 20	 mov	 eax, DWORD PTR _buffer$[esp+12]
  0001c	8b 6c 24 24	 mov	 ebp, DWORD PTR _size$[esp+12]
  00020	8b 5c 24 18	 mov	 ebx, DWORD PTR _pos$[esp+12]
  00024	89 44 24 14	 mov	 DWORD PTR _buf$[esp+12], eax
  00028	7f 0d		 jg	 SHORT $LN9@Ata_read
  0002a	7c 04		 jl	 SHORT $LN12@Ata_read
  0002c	85 db		 test	 ebx, ebx
  0002e	73 07		 jae	 SHORT $LN9@Ata_read
$LN12@Ata_read:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp

; 318  :         return 0;

  00033	33 c0		 xor	 eax, eax
  00035	5b		 pop	 ebx

; 329  : }

  00036	c3		 ret	 0
$LN9@Ata_read:

; 319  :     while(left >= 512 && (qword_t)pos < ata->ata_size )

  00037	81 fd 00 02 00
	00		 cmp	 ebp, 512		; 00000200H
  0003d	7c 3f		 jl	 SHORT $LN15@Ata_read
  0003f	90		 npad	 1
$LL3@Ata_read:
  00040	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00043	77 39		 ja	 SHORT $LN15@Ata_read
  00045	72 05		 jb	 SHORT $LN13@Ata_read
  00047	3b 5e 08	 cmp	 ebx, DWORD PTR [esi+8]
  0004a	73 32		 jae	 SHORT $LN15@Ata_read
$LN13@Ata_read:

; 320  :     {
; 321  :         if( Ata_read_sectors(ata,pos,buf,1) < 1 )

  0004c	8b 4c 24 14	 mov	 ecx, DWORD PTR _buf$[esp+12]
  00050	6a 01		 push	 1
  00052	51		 push	 ecx
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _Ata_read_sectors
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	7c 1c		 jl	 SHORT $LN15@Ata_read

; 322  :             break;
; 323  :         ++pos;

  00062	83 c3 01	 add	 ebx, 1
  00065	83 d7 00	 adc	 edi, 0

; 324  :         left    -= 512;
; 325  :         buf     += 512;

  00068	81 44 24 14 00
	02 00 00	 add	 DWORD PTR _buf$[esp+12], 512 ; 00000200H
  00070	81 ed 00 02 00
	00		 sub	 ebp, 512		; 00000200H
  00076	81 fd 00 02 00
	00		 cmp	 ebp, 512		; 00000200H
  0007c	7d c2		 jge	 SHORT $LL3@Ata_read
$LN15@Ata_read:

; 326  :     }
; 327  : 
; 328  :     return size - left;

  0007e	8b 44 24 24	 mov	 eax, DWORD PTR _size$[esp+12]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	2b c5		 sub	 eax, ebp
  00086	5d		 pop	 ebp
  00087	5b		 pop	 ebx

; 329  : }

  00088	c3		 ret	 0
_Ata_read ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_write
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_device$ = 8						; size = 4
_pos$ = 12						; size = 8
_buffer$ = 20						; size = 4
_size$ = 24						; size = 4
_Ata_write PROC						; COMDAT

; 335  :     ata_t         * ata     = NULL;
; 336  :     const byte_t  * buf     = NULL;
; 337  :     int             left    = 0;
; 338  : 
; 339  :     ata     = DEV_DATA(device);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _device$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	8b 70 78	 mov	 esi, DWORD PTR [eax+120]
  0000a	85 f6		 test	 esi, esi
  0000c	57		 push	 edi
  0000d	75 03		 jne	 SHORT $LN8@Ata_write
  0000f	8d 70 58	 lea	 esi, DWORD PTR [eax+88]
$LN8@Ata_write:

; 340  :     buf     = buffer;
; 341  :     left    = size;
; 342  :     if( pos < 0 )

  00012	8b 7c 24 1c	 mov	 edi, DWORD PTR _pos$[esp+16]
  00016	85 ff		 test	 edi, edi
  00018	8b 44 24 20	 mov	 eax, DWORD PTR _buffer$[esp+12]
  0001c	8b 6c 24 24	 mov	 ebp, DWORD PTR _size$[esp+12]
  00020	8b 5c 24 18	 mov	 ebx, DWORD PTR _pos$[esp+12]
  00024	89 44 24 14	 mov	 DWORD PTR _buf$[esp+12], eax
  00028	7f 0e		 jg	 SHORT $LN9@Ata_write
  0002a	7c 04		 jl	 SHORT $LN12@Ata_write
  0002c	85 db		 test	 ebx, ebx
  0002e	73 08		 jae	 SHORT $LN9@Ata_write
$LN12@Ata_write:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp

; 343  :         return -1;

  00033	83 c8 ff	 or	 eax, -1
  00036	5b		 pop	 ebx

; 354  : }

  00037	c3		 ret	 0
$LN9@Ata_write:

; 344  :     while(left >= 512 && (qword_t)pos < ata->ata_size)

  00038	81 fd 00 02 00
	00		 cmp	 ebp, 512		; 00000200H
  0003e	7c 3e		 jl	 SHORT $LN15@Ata_write
$LL3@Ata_write:
  00040	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00043	77 39		 ja	 SHORT $LN15@Ata_write
  00045	72 05		 jb	 SHORT $LN13@Ata_write
  00047	3b 5e 08	 cmp	 ebx, DWORD PTR [esi+8]
  0004a	73 32		 jae	 SHORT $LN15@Ata_write
$LN13@Ata_write:

; 345  :     {
; 346  :         if( Ata_write_sectors(ata,pos,(void *)buf,1) < 1 )

  0004c	8b 4c 24 14	 mov	 ecx, DWORD PTR _buf$[esp+12]
  00050	6a 01		 push	 1
  00052	51		 push	 ecx
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _Ata_write_sectors
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	7c 1c		 jl	 SHORT $LN15@Ata_write

; 347  :             break;
; 348  :         ++pos;

  00062	83 c3 01	 add	 ebx, 1
  00065	83 d7 00	 adc	 edi, 0

; 349  :         left    -= 512;
; 350  :         buf     += 512;

  00068	81 44 24 14 00
	02 00 00	 add	 DWORD PTR _buf$[esp+12], 512 ; 00000200H
  00070	81 ed 00 02 00
	00		 sub	 ebp, 512		; 00000200H
  00076	81 fd 00 02 00
	00		 cmp	 ebp, 512		; 00000200H
  0007c	7d c2		 jge	 SHORT $LL3@Ata_write
$LN15@Ata_write:

; 351  :     }
; 352  : 
; 353  :     return size - left;

  0007e	8b 44 24 24	 mov	 eax, DWORD PTR _size$[esp+12]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	2b c5		 sub	 eax, ebp
  00086	5d		 pop	 ebp
  00087	5b		 pop	 ebx

; 354  : }

  00088	c3		 ret	 0
_Ata_write ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Ata_ctrl
_TEXT	SEGMENT
_device$ = 8						; size = 4
_cmd$ = 12						; size = 1
_arg$ = 16						; size = 4
_Ata_ctrl PROC						; COMDAT

; 359  :     ata_t               *   ata = NULL;
; 360  : 
; 361  :     ata = DEV_DATA(device);
; 362  : 
; 363  :     switch(cmd)

  00000	0f b6 44 24 08	 movzx	 eax, BYTE PTR _cmd$[esp-4]
  00005	83 e8 01	 sub	 eax, 1

; 364  :     {
; 365  :     case 1:
; 366  :         ata = ata;
; 367  :         arg = arg;
; 368  :         break;
; 369  :     default:
; 370  :         /*
; 371  :          *  不支持的命令都看作操作失败
; 372  :          */
; 373  :         return RESULT_FAILED;
; 374  :     }
; 375  : 
; 376  :     return RESULT_FAILED;

  00008	83 c8 ff	 or	 eax, -1

; 377  : }

  0000b	c3		 ret	 0
_Ata_ctrl ENDP
_TEXT	ENDS
PUBLIC	_Ata_entry
; Function compile flags: /Ogtpy
;	COMDAT _Ata_entry
_TEXT	SEGMENT
_aa$ = -16						; size = 16
_device$ = 8						; size = 4
_flag$ = 12						; size = 4
_param$ = 16						; size = 4
_Ata_entry PROC						; COMDAT

; 403  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 404  :     void          * aa[4]   = {PC_ATA_CONTROLOR1,
; 405  :                                PC_ATA_CONTROLOR1,
; 406  :                                PC_ATA_CONTROLOR2,
; 407  :                                PC_ATA_CONTROLOR2};  /*  ata address */
; 408  :     ata_t         * ata     = NULL;                 /*  ata对象     */
; 409  :     int             id      = *(int *)param & 3;    /*  设备编号    */
; 410  : 
; 411  :     switch(flag)

  00003	8b 4c 24 18	 mov	 ecx, DWORD PTR _flag$[esp+12]
  00007	b8 f0 01 00 00	 mov	 eax, 496		; 000001f0H
  0000c	89 04 24	 mov	 DWORD PTR _aa$[esp+16], eax
  0000f	89 44 24 04	 mov	 DWORD PTR _aa$[esp+20], eax
  00013	b8 70 01 00 00	 mov	 eax, 368		; 00000170H
  00018	89 44 24 08	 mov	 DWORD PTR _aa$[esp+24], eax
  0001c	89 44 24 0c	 mov	 DWORD PTR _aa$[esp+28], eax
  00020	8b 44 24 1c	 mov	 eax, DWORD PTR _param$[esp+12]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	83 e0 03	 and	 eax, 3
  00029	83 e9 00	 sub	 ecx, 0
  0002c	74 12		 je	 SHORT $LN4@Ata_entry
  0002e	83 e9 01	 sub	 ecx, 1
  00031	74 07		 je	 SHORT $LN1@Ata_entry

; 445  :     }
; 446  :     return RESULT_FAILED;

  00033	83 c8 ff	 or	 eax, -1

; 447  : }

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c3		 ret	 0
$LN1@Ata_entry:

; 442  :     case DEV_ENTRY_FLAG_UNREG:
; 443  :         ata = DEV_DATA(device);
; 444  :         return RESULT_SUCCEED;

  0003a	33 c0		 xor	 eax, eax

; 447  : }

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	c3		 ret	 0
$LN4@Ata_entry:

; 412  :     {
; 413  :     case DEV_ENTRY_FLAG_REG:
; 414  :         /*
; 415  :          *  向系统注册
; 416  :          */
; 417  :         device->dev_data_ext = NULL;
; 418  :         ata = DEV_DATA(device);
; 419  :         /*
; 420  :          *  解析参数，获得io地址、主从盘信息，以及磁盘大小
; 421  :          */
; 422  :         ata->ata_io_addr = aa[id];
; 423  :         if( id & 1 )

  00040	a8 01		 test	 al, 1
  00042	8b 0c 84	 mov	 ecx, DWORD PTR _aa$[esp+eax*4+16]
  00045	56		 push	 esi
  00046	8b 74 24 18	 mov	 esi, DWORD PTR _device$[esp+16]
  0004a	57		 push	 edi
  0004b	8d 7e 58	 lea	 edi, DWORD PTR [esi+88]
  0004e	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00055	89 0f		 mov	 DWORD PTR [edi], ecx
  00057	74 04		 je	 SHORT $LN3@Ata_entry

; 424  :             ata->ata_flag |= ATA_FLAG_SLAVE;

  00059	83 4f 04 01	 or	 DWORD PTR [edi+4], 1
$LN3@Ata_entry:

; 425  :         if( 0 == ( ata->ata_size = Ata_size(ata) ) )

  0005d	8b c7		 mov	 eax, edi
  0005f	e8 00 00 00 00	 call	 _Ata_size
  00064	85 c0		 test	 eax, eax
  00066	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00069	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  0006c	75 0d		 jne	 SHORT $LN2@Ata_entry
  0006e	85 d2		 test	 edx, edx
  00070	75 09		 jne	 SHORT $LN2@Ata_entry
  00072	5f		 pop	 edi

; 426  :             return RESULT_FAILED;

  00073	83 c8 ff	 or	 eax, -1
  00076	5e		 pop	 esi

; 447  : }

  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	c3		 ret	 0
$LN2@Ata_entry:

; 427  :         /*
; 428  :          *  设置DDO对象定义的接口
; 429  :          */
; 430  :         device->dev_ddo.ddo_open    = Ata_open;
; 431  :         device->dev_ddo.ddo_close   = Ata_close;
; 432  :         device->dev_ddo.ddo_read    = Ata_read;
; 433  :         device->dev_ddo.ddo_write   = Ata_write;
; 434  :         device->dev_ddo.ddo_ctrl    = Ata_ctrl;
; 435  :         /*  将设备设置为块设备和PIO方式*/
; 436  :         device->dev_flag        = DEV_FLAG_BLOCK | DEV_IO_PIO;

  0007b	b0 05		 mov	 al, 5
  0007d	88 46 1e	 mov	 BYTE PTR [esi+30], al
  00080	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], OFFSET _Ata_open
  00087	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], OFFSET _Ata_close
  0008e	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], OFFSET _Ata_read
  00095	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET _Ata_write
  0009c	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], OFFSET _Ata_ctrl

; 437  :         device->dev_capcity     = ata->ata_size;

  000a3	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000a6	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000a9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ac	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx

; 438  :         device->dev_io_addr[0]  = ata->ata_io_addr;

  000af	8b 17		 mov	 edx, DWORD PTR [edi]

; 439  :         device->dev_ivtid       = ISP_DISK;

  000b1	88 46 1c	 mov	 BYTE PTR [esi+28], al
  000b4	5f		 pop	 edi
  000b5	89 56 50	 mov	 DWORD PTR [esi+80], edx

; 440  :         
; 441  :         return RESULT_SUCCEED;

  000b8	33 c0		 xor	 eax, eax
  000ba	5e		 pop	 esi

; 447  : }

  000bb	83 c4 10	 add	 esp, 16			; 00000010H
  000be	c3		 ret	 0
_Ata_entry ENDP
_TEXT	ENDS
END
