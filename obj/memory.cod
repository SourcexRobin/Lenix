; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\libc\memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__memzero
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\libc\memory.c
;	COMDAT __memzero
_TEXT	SEGMENT
_des$ = 8						; size = 4
_size$ = 12						; size = 4
__memzero PROC						; COMDAT

; 6    :     register byte_t     *   d = des;
; 7    : 
; 8    :     while(size--)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _size$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 15		 je	 SHORT $LN8@memzero
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR _des$[esp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9    :         *d++= 0;
; 10   : 
; 11   :     return des;

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi

; 12   : }

  0001c	c3		 ret	 0
$LN8@memzero:

; 9    :         *d++= 0;
; 10   : 
; 11   :     return des;

  0001d	8b 44 24 04	 mov	 eax, DWORD PTR _des$[esp-4]

; 12   : }

  00021	c3		 ret	 0
__memzero ENDP
_TEXT	ENDS
PUBLIC	__memset
; Function compile flags: /Ogtpy
;	COMDAT __memset
_TEXT	SEGMENT
_des$ = 8						; size = 4
_v$ = 12						; size = 1
_size$ = 16						; size = 4
__memset PROC						; COMDAT

; 16   :     register char       *   d = des;
; 17   : 
; 18   :     while( size-- )

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _size$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 18		 je	 SHORT $LN8@memset
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR _des$[esp]
  0000d	50		 push	 eax
  0000e	8b 44 24 10	 mov	 eax, DWORD PTR _v$[esp+4]
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19   :         *d++ = v;
; 20   : 
; 21   :     return des;

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi

; 22   : }

  0001f	c3		 ret	 0
$LN8@memset:

; 19   :         *d++ = v;
; 20   : 
; 21   :     return des;

  00020	8b 44 24 04	 mov	 eax, DWORD PTR _des$[esp-4]

; 22   : }

  00024	c3		 ret	 0
__memset ENDP
_TEXT	ENDS
PUBLIC	__memcmp
; Function compile flags: /Ogtpy
;	COMDAT __memcmp
_TEXT	SEGMENT
_des$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
__memcmp PROC						; COMDAT

; 26   :     register const char *   d = des;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _des$[esp-4]

; 27   :     register const char *   s = src;

  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR _src$[esp-4]
  00008	56		 push	 esi

; 28   : 
; 29   :     while( size-- && *d == *s)

  00009	8b 74 24 10	 mov	 esi, DWORD PTR _size$[esp]
  0000d	85 f6		 test	 esi, esi
  0000f	74 13		 je	 SHORT $LN6@memcmp
$LL2@memcmp:
  00011	8a 10		 mov	 dl, BYTE PTR [eax]
  00013	83 ee 01	 sub	 esi, 1
  00016	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00018	75 0a		 jne	 SHORT $LN6@memcmp

; 30   :     {
; 31   :         d++;

  0001a	83 c0 01	 add	 eax, 1

; 32   :         s++;

  0001d	83 c1 01	 add	 ecx, 1
  00020	85 f6		 test	 esi, esi
  00022	75 ed		 jne	 SHORT $LL2@memcmp
$LN6@memcmp:

; 33   :     }
; 34   : 
; 35   :     return *d - *s;

  00024	0f be 09	 movsx	 ecx, BYTE PTR [ecx]
  00027	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0002a	2b c1		 sub	 eax, ecx
  0002c	5e		 pop	 esi

; 36   : }

  0002d	c3		 ret	 0
__memcmp ENDP
_TEXT	ENDS
PUBLIC	__memcpy
; Function compile flags: /Ogtpy
;	COMDAT __memcpy
_TEXT	SEGMENT
_des$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
__memcpy PROC						; COMDAT

; 40   :     register byte_t         *   d = des;
; 41   :     register const byte_t   *   s = src;
; 42   : 
; 43   :     if( 0 == size || d == s ) return des;

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _size$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR _des$[esp+4]
  0000c	8b d7		 mov	 edx, edi
  0000e	74 41		 je	 SHORT $LN7@memcpy
  00010	8b 74 24 10	 mov	 esi, DWORD PTR _src$[esp+4]
  00014	3b fe		 cmp	 edi, esi
  00016	74 39		 je	 SHORT $LN7@memcpy

; 44   : 
; 45   :     if( (uint_t)d < (uint_t)s )

  00018	73 1a		 jae	 SHORT $LN6@memcpy

; 46   :     {
; 47   :         while( size-- )

  0001a	2b f7		 sub	 esi, edi
  0001c	8d 64 24 00	 npad	 4
$LL5@memcpy:

; 48   :             *d++ = *s++;

  00020	8a 04 16	 mov	 al, BYTE PTR [esi+edx]
  00023	83 e9 01	 sub	 ecx, 1
  00026	88 02		 mov	 BYTE PTR [edx], al
  00028	83 c2 01	 add	 edx, 1
  0002b	85 c9		 test	 ecx, ecx
  0002d	75 f1		 jne	 SHORT $LL5@memcpy
  0002f	8b c7		 mov	 eax, edi
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 56   :     }
; 57   :     return des;
; 58   : }

  00033	c3		 ret	 0
$LN6@memcpy:

; 49   :     }
; 50   :     else
; 51   :     {
; 52   :         d += size - 1;

  00034	8d 54 0f ff	 lea	 edx, DWORD PTR [edi+ecx-1]

; 53   :         s += size - 1;

  00038	8d 74 0e ff	 lea	 esi, DWORD PTR [esi+ecx-1]
  0003c	8d 64 24 00	 npad	 4
$LL2@memcpy:

; 54   :         while( size-- )
; 55   :             *d-- = *s--;

  00040	8a 06		 mov	 al, BYTE PTR [esi]
  00042	83 e9 01	 sub	 ecx, 1
  00045	88 02		 mov	 BYTE PTR [edx], al
  00047	83 ea 01	 sub	 edx, 1
  0004a	83 ee 01	 sub	 esi, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	75 ef		 jne	 SHORT $LL2@memcpy
$LN7@memcpy:

; 40   :     register byte_t         *   d = des;
; 41   :     register const byte_t   *   s = src;
; 42   : 
; 43   :     if( 0 == size || d == s ) return des;

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 56   :     }
; 57   :     return des;
; 58   : }

  00055	c3		 ret	 0
__memcpy ENDP
_TEXT	ENDS
END
