; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\libc\char.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__up_case
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\libc\char.c
;	COMDAT __up_case
_TEXT	SEGMENT
_c$ = 8							; size = 1
__up_case PROC						; COMDAT

; 28   :     if( c >= 'a' &&  c <= 'z' )

  00000	8a 44 24 04	 mov	 al, BYTE PTR _c$[esp-4]
  00004	8a c8		 mov	 cl, al
  00006	80 e9 61	 sub	 cl, 97			; 00000061H
  00009	80 f9 19	 cmp	 cl, 25			; 00000019H
  0000c	77 02		 ja	 SHORT $LN2@up_case

; 29   :         return c & ~0x20;

  0000e	24 df		 and	 al, -33			; ffffffdfH
$LN2@up_case:

; 30   :     return c;
; 31   : }

  00010	c3		 ret	 0
__up_case ENDP
_TEXT	ENDS
PUBLIC	__lw_case
; Function compile flags: /Ogtpy
;	COMDAT __lw_case
_TEXT	SEGMENT
_c$ = 8							; size = 1
__lw_case PROC						; COMDAT

; 35   :     if( c >= 'A' && c <= 'Z' )

  00000	8a 44 24 04	 mov	 al, BYTE PTR _c$[esp-4]
  00004	8a c8		 mov	 cl, al
  00006	80 e9 41	 sub	 cl, 65			; 00000041H
  00009	80 f9 19	 cmp	 cl, 25			; 00000019H
  0000c	77 02		 ja	 SHORT $LN2@lw_case

; 36   :         return c | 0x20;

  0000e	0c 20		 or	 al, 32			; 00000020H
$LN2@lw_case:

; 37   :     return c;
; 38   : }

  00010	c3		 ret	 0
__lw_case ENDP
_TEXT	ENDS
PUBLIC	__is_up_case
; Function compile flags: /Ogtpy
;	COMDAT __is_up_case
_TEXT	SEGMENT
_c$ = 8							; size = 1
__is_up_case PROC					; COMDAT

; 42   :     if( c >= 'A' && c <= 'Z' )

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR _c$[esp-4]
  00005	2c 41		 sub	 al, 65			; 00000041H
  00007	b1 19		 mov	 cl, 25			; 00000019H
  00009	3a c8		 cmp	 cl, al
  0000b	1b c0		 sbb	 eax, eax
  0000d	83 c0 01	 add	 eax, 1

; 43   :         return 1;
; 44   :     return 0;
; 45   : 
; 46   : }

  00010	c3		 ret	 0
__is_up_case ENDP
_TEXT	ENDS
PUBLIC	__is_lw_case
; Function compile flags: /Ogtpy
;	COMDAT __is_lw_case
_TEXT	SEGMENT
_c$ = 8							; size = 1
__is_lw_case PROC					; COMDAT

; 50   :     if( c >= 'a' &&  c <= 'z' )

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR _c$[esp-4]
  00005	2c 61		 sub	 al, 97			; 00000061H
  00007	b1 19		 mov	 cl, 25			; 00000019H
  00009	3a c8		 cmp	 cl, al
  0000b	1b c0		 sbb	 eax, eax
  0000d	83 c0 01	 add	 eax, 1

; 51   :         return 1;
; 52   :     return 0;
; 53   : }

  00010	c3		 ret	 0
__is_lw_case ENDP
_TEXT	ENDS
PUBLIC	__is_hex
; Function compile flags: /Ogtpy
;	COMDAT __is_hex
_TEXT	SEGMENT
_c$ = 8							; size = 1
__is_hex PROC						; COMDAT

; 57   :     if( (c >= '0' && c <= '9') || ( c >= 'a' && c <= 'f' ) || \
; 58   :         (c >= 'A' && c <= 'Z'))

  00000	8a 44 24 04	 mov	 al, BYTE PTR _c$[esp-4]
  00004	3c 30		 cmp	 al, 48			; 00000030H
  00006	7c 04		 jl	 SHORT $LN2@is_hex
  00008	3c 39		 cmp	 al, 57			; 00000039H
  0000a	7e 0e		 jle	 SHORT $LN3@is_hex
$LN2@is_hex:
  0000c	3c 61		 cmp	 al, 97			; 00000061H
  0000e	7c 04		 jl	 SHORT $LN1@is_hex
  00010	3c 66		 cmp	 al, 102			; 00000066H
  00012	7e 06		 jle	 SHORT $LN3@is_hex
$LN1@is_hex:
  00014	2c 41		 sub	 al, 65			; 00000041H
  00016	3c 19		 cmp	 al, 25			; 00000019H
  00018	77 06		 ja	 SHORT $LN4@is_hex
$LN3@is_hex:

; 59   :         return 1;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 61   : }

  0001f	c3		 ret	 0
$LN4@is_hex:

; 60   :     return 0;

  00020	33 c0		 xor	 eax, eax

; 61   : }

  00022	c3		 ret	 0
__is_hex ENDP
_TEXT	ENDS
PUBLIC	__is_digital
; Function compile flags: /Ogtpy
;	COMDAT __is_digital
_TEXT	SEGMENT
_c$ = 8							; size = 1
__is_digital PROC					; COMDAT

; 65   :     if( (c >= '0' && c <= '9') )

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR _c$[esp-4]
  00005	2c 30		 sub	 al, 48			; 00000030H
  00007	b1 09		 mov	 cl, 9
  00009	3a c8		 cmp	 cl, al
  0000b	1b c0		 sbb	 eax, eax
  0000d	83 c0 01	 add	 eax, 1

; 66   :         return 1;
; 67   :     return 0;
; 68   : }

  00010	c3		 ret	 0
__is_digital ENDP
_TEXT	ENDS
END
