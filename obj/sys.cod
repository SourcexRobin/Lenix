; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\kernel\sys.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_syscall
_BSS	SEGMENT
_syscall DD	07fH DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0BE@KLGEIKPP@Lenix?5halt?4?5hit?3?5?$CFs?$AA@ ; `string'
PUBLIC	_Sys_halt
EXTRN	_Cpu_hlt:PROC
EXTRN	__printf:PROC
EXTRN	_proc_current:DWORD
;	COMDAT ??_C@_0BE@KLGEIKPP@Lenix?5halt?4?5hit?3?5?$CFs?$AA@
; File e:\sourcexstudio\lenix\lenix\src\kernel\sys.c
CONST	SEGMENT
??_C@_0BE@KLGEIKPP@Lenix?5halt?4?5hit?3?5?$CFs?$AA@ DB 'Lenix halt. hit: '
	DB	'%s', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Sys_halt
_TEXT	SEGMENT
_msg$ = 8						; size = 4
_Sys_halt PROC						; COMDAT

; 44   :     PROC_INC_SEIZE();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _proc_current
  00005	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]

; 45   : 
; 46   : #ifdef _CFG_TTY_ENABLE_
; 47   :     _printf("Lenix halt. hit: %s",msg);

  00008	8b 44 24 04	 mov	 eax, DWORD PTR _msg$[esp-4]
  0000c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _proc_current
  00012	50		 push	 eax
  00013	83 c1 01	 add	 ecx, 1
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KLGEIKPP@Lenix?5halt?4?5hit?3?5?$CFs?$AA@
  0001b	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
  0001e	e8 00 00 00 00	 call	 __printf
  00023	83 c4 08	 add	 esp, 8

; 48   : #else
; 49   :     msg = msg;
; 50   : #endif
; 51   : 
; 52   :     Disable_interrupt();

  00026	fa		 cli
$LL2@Sys_halt:

; 53   : 
; 54   :     for(;;) Cpu_hlt();    

  00027	e8 00 00 00 00	 call	 _Cpu_hlt
  0002c	eb f9		 jmp	 SHORT $LL2@Sys_halt
_Sys_halt ENDP
_TEXT	ENDS
PUBLIC	_Syscall_exit
EXTRN	_Proc_sched:PROC
EXTRN	_proc_need_sched:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _Syscall_exit
_TEXT	SEGMENT
_type$ = 8						; size = 4
_refresh$ = 12						; size = 4
_Syscall_exit PROC					; COMDAT

; 59   :     /*
; 60   :      *  系统调用后都要进行信号处理
; 61   :      */
; 62   : #ifdef _CFG_SIGNAL_ENABLE_
; 63   :     Signal_handle();
; 64   : #endif  /*  _CFG_SIGNAL_ENABLE_ */
; 65   : 
; 66   :     /*
; 67   :      *  根据退出类型执行不同的操作
; 68   :      */
; 69   :     if( SCEXIT_TYPE_IRQ == type )

  00000	83 7c 24 04 01	 cmp	 DWORD PTR _type$[esp-4], 1
  00005	75 14		 jne	 SHORT $LN1@Syscall_ex

; 70   :     {
; 71   :         /*
; 72   :          *  中断退出才执行调度
; 73   :          *  需要调度，可以抢占，不再中断处理内，才能调度
; 74   :          */
; 75   :         if( proc_need_sched ) 

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR _proc_need_sched
  0000c	85 c0		 test	 eax, eax
  0000e	74 0b		 je	 SHORT $LN1@Syscall_ex

; 76   :             Proc_sched(refresh);

  00010	8b 4c 24 08	 mov	 ecx, DWORD PTR _refresh$[esp-4]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 _Proc_sched
  0001a	59		 pop	 ecx
$LN1@Syscall_ex:

; 77   :     }
; 78   : }

  0001b	c3		 ret	 0
_Syscall_exit ENDP
_TEXT	ENDS
PUBLIC	_Syscall_initial
; Function compile flags: /Ogtpy
;	COMDAT _Syscall_initial
_TEXT	SEGMENT
_Syscall_initial PROC					; COMDAT

; 82   : }

  00000	c3		 ret	 0
_Syscall_initial ENDP
_TEXT	ENDS
END
