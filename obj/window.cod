; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\gui\window.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_win_pen:DWORD:02H
COMM	_win_brush:QWORD:02H
_DATA	ENDS
PUBLIC	_Window_get_focus
_BSS	SEGMENT
_win_focus DD	01H DUP (?)
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\gui\window.c
_BSS	ENDS
;	COMDAT _Window_get_focus
_TEXT	SEGMENT
_Window_get_focus PROC					; COMDAT

; 78   :     return win_focus;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_focus

; 79   : }

  00005	c3		 ret	 0
_Window_get_focus ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Window_alloc
_TEXT	SEGMENT
_Window_alloc PROC					; COMDAT

; 85   :     return NULL;

  00000	33 c0		 xor	 eax, eax

; 86   : }

  00002	c3		 ret	 0
_Window_alloc ENDP
_TEXT	ENDS
PUBLIC	_Window_create
; Function compile flags: /Ogtpy
;	COMDAT _Window_create
_TEXT	SEGMENT
_name$ = 8						; size = 4
_parent$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_style$ = 32						; size = 4
_Window_create PROC					; COMDAT

; 101  :     window_t            *   window      = NULL;
; 102  : 
; 103  :     name = name;
; 104  :     if( NULL == ( window = Window_alloc() ) )
; 105  :         return NULL;

  00000	33 c0		 xor	 eax, eax

; 106  : 
; 107  :     /*
; 108  :      *  如果父窗口为NULL，则用系统窗体作为父窗体
; 109  :      *  但应该是用进程的主窗体做父窗体 
; 110  :      */
; 111  :     if( NULL == parent ) 
; 112  :         parent = &win_system;
; 113  :     
; 114  :     //WIN_INSERT(parent->win_sub_window,window);
; 115  : 
; 116  :     WIN_RECT_LEFT(window)           = x;
; 117  :     WIN_RECT_TOP(window)            = y;
; 118  :     WIN_RECT_RIGHT(window)          = x + width;
; 119  :     WIN_RECT_BOTTOM(window)         = y + height;
; 120  :     window->win_style               = style;
; 121  :     window->win_pen                 = (pen_t *)win_pen;
; 122  :     window->win_brush               = (brush_t *)win_brush;
; 123  :     window->win_color_client_bkgd   = WINCLR_CLIENT_BKGD_DEF;
; 124  : 
; 125  :     return window;
; 126  : }

  00002	c3		 ret	 0
_Window_create ENDP
_TEXT	ENDS
PUBLIC	_Window_move
; Function compile flags: /Ogtpy
;	COMDAT _Window_move
_TEXT	SEGMENT
_window$ = 8						; size = 4
_rect$ = 12						; size = 4
_prev$ = 16						; size = 4
_Window_move PROC					; COMDAT

; 133  :     if( prev)

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _prev$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR _window$[esp-4]
  0000a	74 0b		 je	 SHORT $LN1@Window_mov

; 134  :         *prev = window->win_rect;

  0000c	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN1@Window_mov:

; 135  :     window->win_rect = *rect;

  00017	8b 4c 24 08	 mov	 ecx, DWORD PTR _rect$[esp-4]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	89 48 64	 mov	 DWORD PTR [eax+100], ecx

; 136  : }

  00026	c3		 ret	 0
_Window_move ENDP
_TEXT	ENDS
PUBLIC	_Window_position_get
; Function compile flags: /Ogtpy
;	COMDAT _Window_position_get
_TEXT	SEGMENT
_window$ = 8						; size = 4
_point$ = 12						; size = 4
_Window_position_get PROC				; COMDAT

; 168  :     point->pt_x = WIN_RECT_LEFT(window);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _window$[esp-4]
  00004	66 8b 51 60	 mov	 dx, WORD PTR [ecx+96]
  00008	8b 44 24 08	 mov	 eax, DWORD PTR _point$[esp-4]
  0000c	66 89 10	 mov	 WORD PTR [eax], dx

; 169  :     point->pt_y = WIN_RECT_TOP(window);

  0000f	66 8b 49 62	 mov	 cx, WORD PTR [ecx+98]
  00013	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 170  : 
; 171  :     return point;
; 172  : }

  00017	c3		 ret	 0
_Window_position_get ENDP
_TEXT	ENDS
PUBLIC	_Window_position_set
; Function compile flags: /Ogtpy
;	COMDAT _Window_position_set
_TEXT	SEGMENT
_window$ = 8						; size = 4
_point$ = 12						; size = 4
_prev$ = 16						; size = 4
_Window_position_set PROC				; COMDAT

; 177  :     if( prev )
; 178  :         return ;
; 179  :     window = window;
; 180  :     point = point;
; 181  : }

  00000	c3		 ret	 0
_Window_position_set ENDP
_TEXT	ENDS
PUBLIC	_Window_size_get
; Function compile flags: /Ogtpy
;	COMDAT _Window_size_get
_TEXT	SEGMENT
_window$ = 8						; size = 4
_size$ = 12						; size = 4
_Window_size_get PROC					; COMDAT

; 186  :     size->size_x = WIN_RECT_WIDTH(window); 

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _window$[esp-4]
  00004	0f bf 41 60	 movsx	 eax, WORD PTR [ecx+96]
  00008	0f bf 51 64	 movsx	 edx, WORD PTR [ecx+100]
  0000c	2b d0		 sub	 edx, eax
  0000e	8b 44 24 08	 mov	 eax, DWORD PTR _size$[esp-4]
  00012	89 10		 mov	 DWORD PTR [eax], edx

; 187  :     size->size_y = WIN_RECT_HEIGHT(window); 

  00014	0f bf 51 66	 movsx	 edx, WORD PTR [ecx+102]
  00018	0f bf 49 62	 movsx	 ecx, WORD PTR [ecx+98]
  0001c	2b d1		 sub	 edx, ecx
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 188  : 
; 189  :     return size;
; 190  : }

  00021	c3		 ret	 0
_Window_size_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_0O@GNOLGLLG@assert?5failed?$AA@		; `string'
PUBLIC	??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_06NFBEFKOC@window?$AA@			; `string'
PUBLIC	??_C@_08JLPFKPBO@window?4c?$AA@			; `string'
PUBLIC	_Window_size_set
EXTRN	_Sys_halt:PROC
EXTRN	__printf:PROC
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
CONST	SEGMENT
??_C@_0O@GNOLGLLG@assert?5failed?$AA@ DB 'assert failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ DB 'a'
	DB	'ssert: %s ', 0aH, 'file: %s', 0aH, 'line : %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFBEFKOC@window?$AA@
CONST	SEGMENT
??_C@_06NFBEFKOC@window?$AA@ DB 'window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JLPFKPBO@window?4c?$AA@
CONST	SEGMENT
??_C@_08JLPFKPBO@window?4c?$AA@ DB 'window.c', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Window_size_set
_TEXT	SEGMENT
_window$ = 8						; size = 4
_size$ = 12						; size = 4
_prev$ = 16						; size = 4
_Window_size_set PROC					; COMDAT

; 194  : {

  00000	56		 push	 esi

; 195  :     int                     cx      = 0,
; 196  :                             cy      = 0;
; 197  : 
; 198  :     ASSERT(window);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _window$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	75 26		 jne	 SHORT $LN8@Window_siz
  0000a	68 c6 00 00 00	 push	 198			; 000000c6H
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08JLPFKPBO@window?4c?$AA@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_06NFBEFKOC@window?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0001e	e8 00 00 00 00	 call	 __printf
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00028	e8 00 00 00 00	 call	 _Sys_halt
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@Window_siz:

; 199  :     ASSERT(size);

  00030	8b 7c 24 10	 mov	 edi, DWORD PTR _size$[esp+4]
  00034	85 ff		 test	 edi, edi
  00036	75 26		 jne	 SHORT $LN4@Window_siz
  00038	68 c7 00 00 00	 push	 199			; 000000c7H
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_08JLPFKPBO@window?4c?$AA@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_04IAGNFIBA@size?$AA@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0004c	e8 00 00 00 00	 call	 __printf
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00056	e8 00 00 00 00	 call	 _Sys_halt
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@Window_siz:

; 200  : 
; 201  :     if( prev )

  0005e	8b 44 24 14	 mov	 eax, DWORD PTR _prev$[esp+4]
  00062	85 c0		 test	 eax, eax
  00064	74 19		 je	 SHORT $LN1@Window_siz

; 202  :     {
; 203  :         prev->size_x = WIN_RECT_WIDTH(window); 

  00066	0f bf 56 60	 movsx	 edx, WORD PTR [esi+96]
  0006a	0f bf 4e 64	 movsx	 ecx, WORD PTR [esi+100]
  0006e	2b ca		 sub	 ecx, edx
  00070	89 08		 mov	 DWORD PTR [eax], ecx

; 204  :         prev->size_y = WIN_RECT_HEIGHT(window); 

  00072	0f bf 4e 66	 movsx	 ecx, WORD PTR [esi+102]
  00076	0f bf 56 62	 movsx	 edx, WORD PTR [esi+98]
  0007a	2b ca		 sub	 ecx, edx
  0007c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@Window_siz:

; 205  :     }
; 206  : 
; 207  :     window->win_rect.rect_right     = window->win_rect.rect_right + size->size_x; 

  0007f	66 8b 07	 mov	 ax, WORD PTR [edi]

; 208  :     window->win_rect.rect_bottom    = window->win_rect.rect_top + size->size_y; 

  00082	66 8b 4e 62	 mov	 cx, WORD PTR [esi+98]
  00086	66 01 46 64	 add	 WORD PTR [esi+100], ax
  0008a	66 03 4f 04	 add	 cx, WORD PTR [edi+4]
  0008e	5f		 pop	 edi
  0008f	66 89 4e 66	 mov	 WORD PTR [esi+102], cx
  00093	5e		 pop	 esi

; 209  : }

  00094	c3		 ret	 0
_Window_size_set ENDP
_TEXT	ENDS
PUBLIC	_Window_line
EXTRN	_Graph_clip_line_rect:PROC
_BSS	SEGMENT
_win_graph DD	01H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _Window_line
_TEXT	SEGMENT
_y1$ = -8						; size = 4
_x1$ = -4						; size = 4
_y2$ = 8						; size = 4
_window$ = 8						; size = 4
_x2$ = 12						; size = 4
_point$ = 12						; size = 4
_Window_line PROC					; COMDAT

; 213  : {

  00000	83 ec 08	 sub	 esp, 8

; 214  :     int x1,y1,x2,y2;
; 215  : 
; 216  :     x1 = window->win_current_pt.pt_x;
; 217  :     y1 = window->win_current_pt.pt_y;
; 218  :     x2 = point->pt_x;

  00003	8b 44 24 10	 mov	 eax, DWORD PTR _point$[esp+4]
  00007	0f bf 08	 movsx	 ecx, WORD PTR [eax]

; 219  :     y2 = point->pt_y;

  0000a	0f bf 50 02	 movsx	 edx, WORD PTR [eax+2]

; 220  : 
; 221  :     window->win_current_pt = *point;

  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	53		 push	 ebx
  00011	55		 push	 ebp
  00012	56		 push	 esi
  00013	8b 74 24 18	 mov	 esi, DWORD PTR _window$[esp+16]
  00017	0f bf 9e 32 03
	00 00		 movsx	 ebx, WORD PTR [esi+818]
  0001e	57		 push	 edi
  0001f	0f bf be 30 03
	00 00		 movsx	 edi, WORD PTR [esi+816]

; 222  : 
; 223  :     if( Graph_clip_line_rect(x1+ WIN_RECT_LEFT(window),y1 + WIN_RECT_TOP(window),
; 224  :         x2+ WIN_RECT_LEFT(window),y2 + WIN_RECT_TOP(window),
; 225  :         &window->win_rect,
; 226  :         &x1,&y1,&x2,&y2) )

  00026	8d 6c 24 1c	 lea	 ebp, DWORD PTR _y2$[esp+20]
  0002a	55		 push	 ebp
  0002b	8d 6c 24 24	 lea	 ebp, DWORD PTR _x2$[esp+24]
  0002f	55		 push	 ebp
  00030	89 86 30 03 00
	00		 mov	 DWORD PTR [esi+816], eax
  00036	8d 6c 24 18	 lea	 ebp, DWORD PTR _y1$[esp+32]
  0003a	55		 push	 ebp
  0003b	89 4c 24 2c	 mov	 DWORD PTR _x2$[esp+32], ecx
  0003f	0f bf 4e 62	 movsx	 ecx, WORD PTR [esi+98]
  00043	89 54 24 28	 mov	 DWORD PTR _y2$[esp+32], edx
  00047	0f bf 56 60	 movsx	 edx, WORD PTR [esi+96]
  0004b	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  0004e	8d 6c 24 20	 lea	 ebp, DWORD PTR _x1$[esp+36]
  00052	55		 push	 ebp
  00053	50		 push	 eax
  00054	8b 44 24 30	 mov	 eax, DWORD PTR _y2$[esp+40]
  00058	03 c1		 add	 eax, ecx
  0005a	50		 push	 eax
  0005b	8b 44 24 38	 mov	 eax, DWORD PTR _x2$[esp+44]
  0005f	03 c2		 add	 eax, edx
  00061	50		 push	 eax
  00062	03 cb		 add	 ecx, ebx
  00064	51		 push	 ecx
  00065	03 d7		 add	 edx, edi
  00067	52		 push	 edx
  00068	89 7c 24 38	 mov	 DWORD PTR _x1$[esp+60], edi
  0006c	89 5c 24 34	 mov	 DWORD PTR _y1$[esp+60], ebx
  00070	e8 00 00 00 00	 call	 _Graph_clip_line_rect
  00075	83 c4 24	 add	 esp, 36			; 00000024H
  00078	85 c0		 test	 eax, eax
  0007a	74 2e		 je	 SHORT $LN1@Window_lin

; 227  :     {
; 228  :         win_graph->g_line(win_graph,x1 ,y1,x2 ,y2,WIN_PEN_COLOR(window));

  0007c	8b 8e 24 03 00
	00		 mov	 ecx, DWORD PTR [esi+804]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	8b 44 24 1c	 mov	 eax, DWORD PTR _y2$[esp+20]
  00088	8b 4c 24 20	 mov	 ecx, DWORD PTR _x2$[esp+20]
  0008c	52		 push	 edx
  0008d	8b 54 24 14	 mov	 edx, DWORD PTR _y1$[esp+28]
  00091	50		 push	 eax
  00092	8b 44 24 1c	 mov	 eax, DWORD PTR _x1$[esp+32]
  00096	51		 push	 ecx
  00097	52		 push	 edx
  00098	50		 push	 eax
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0009e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a4	50		 push	 eax
  000a5	ff d1		 call	 ecx
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@Window_lin:
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp
  000ad	5b		 pop	 ebx

; 229  :     }
; 230  : 
; 231  : }

  000ae	83 c4 08	 add	 esp, 8
  000b1	c3		 ret	 0
_Window_line ENDP
_TEXT	ENDS
PUBLIC	_Window_draw_border
; Function compile flags: /Ogtpy
;	COMDAT _Window_draw_border
_TEXT	SEGMENT
_window$ = 8						; size = 4
_Window_draw_border PROC				; COMDAT

; 236  :     int left,top,right,bottom;
; 237  :         
; 238  :     left    = window->win_rect.rect_left;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _window$[esp-4]
  00004	53		 push	 ebx

; 239  :     right   = window->win_rect.rect_right;

  00005	0f bf 58 64	 movsx	 ebx, WORD PTR [eax+100]
  00009	55		 push	 ebp

; 240  :     top     = window->win_rect.rect_top;
; 241  :     bottom  = window->win_rect.rect_bottom;

  0000a	0f bf 68 66	 movsx	 ebp, WORD PTR [eax+102]
  0000e	56		 push	 esi
  0000f	0f bf 70 60	 movsx	 esi, WORD PTR [eax+96]
  00013	57		 push	 edi
  00014	0f bf 78 62	 movsx	 edi, WORD PTR [eax+98]

; 242  : 
; 243  :     win_graph->g_line(win_graph,left,top,right,top,COLOR_BLACK);

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0001d	6a 00		 push	 0
  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	57		 push	 edi
  00022	56		 push	 esi
  00023	50		 push	 eax
  00024	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0002a	ff d0		 call	 eax

; 244  :     win_graph->g_line(win_graph,left,bottom - 1,right,bottom - 1, COLOR_BLACK);   

  0002c	6a 00		 push	 0
  0002e	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	50		 push	 eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00039	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	ff d1		 call	 ecx

; 245  :     win_graph->g_line(win_graph,left,top,left,bottom, COLOR_BLACK);   

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00048	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  0004e	6a 00		 push	 0
  00050	55		 push	 ebp
  00051	56		 push	 esi
  00052	57		 push	 edi
  00053	56		 push	 esi
  00054	50		 push	 eax
  00055	ff d2		 call	 edx
  00057	83 c4 48	 add	 esp, 72			; 00000048H

; 246  :     win_graph->g_line(win_graph,right - 1,top,right - 1,bottom, COLOR_BLACK);   

  0005a	6a 00		 push	 0
  0005c	55		 push	 ebp
  0005d	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	50		 push	 eax
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00068	50		 push	 eax
  00069	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0006f	ff d0		 call	 eax
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx

; 247  : }

  00078	c3		 ret	 0
_Window_draw_border ENDP
_TEXT	ENDS
PUBLIC	_Window_draw_frame
; Function compile flags: /Ogtpy
;	COMDAT _Window_draw_frame
_TEXT	SEGMENT
tv352 = 8						; size = 4
_window$ = 8						; size = 4
_rect$ = 12						; size = 4
_flag$ = 16						; size = 4
_Window_draw_frame PROC					; COMDAT

; 252  :     int left,top,right,bottom;
; 253  : 
; 254  :     left    = WIN_RECT_LEFT(window)     + rect->rect_left     ;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _rect$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _window$[esp-4]
  00008	0f bf 4a 60	 movsx	 ecx, WORD PTR [edx+96]
  0000c	53		 push	 ebx

; 255  :     right   = WIN_RECT_LEFT(window)     + rect->rect_right    ;
; 256  :     top     = WIN_RECT_TOP(window)      + rect->rect_top      ;

  0000d	0f bf 58 02	 movsx	 ebx, WORD PTR [eax+2]
  00011	55		 push	 ebp

; 257  :     bottom  = WIN_RECT_TOP(window)      + rect->rect_bottom   ;

  00012	0f bf 68 06	 movsx	 ebp, WORD PTR [eax+6]
  00016	56		 push	 esi
  00017	0f bf 30	 movsx	 esi, WORD PTR [eax]
  0001a	57		 push	 edi
  0001b	0f bf 78 04	 movsx	 edi, WORD PTR [eax+4]

; 258  : 
; 259  :     if( flag )
; 260  :     {
; 261  :         /*  画上边界 */
; 262  :         win_graph->g_line(win_graph,left,top,right,top,WINCLR_3D_LIGHT);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00024	03 f1		 add	 esi, ecx
  00026	03 f9		 add	 edi, ecx
  00028	0f bf 4a 62	 movsx	 ecx, WORD PTR [edx+98]
  0002c	03 d9		 add	 ebx, ecx
  0002e	03 e9		 add	 ebp, ecx
  00030	83 7c 24 1c 00	 cmp	 DWORD PTR _flag$[esp+12], 0
  00035	0f 84 c9 00 00
	00		 je	 $LN2@Window_dra
  0003b	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  00040	53		 push	 ebx
  00041	57		 push	 edi
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	50		 push	 eax
  00045	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0004b	ff d0		 call	 eax

; 263  :         win_graph->g_line(win_graph,left,top + 1,right,top + 1,WINCLR_3D_LIGHT);   

  0004d	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  00052	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00055	50		 push	 eax
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0005d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00063	56		 push	 esi
  00064	50		 push	 eax
  00065	ff d1		 call	 ecx

; 264  : 
; 265  :         /*  画下边界 */
; 266  :         win_graph->g_line(win_graph,left,bottom - 1,right,bottom - 1,WINCLR_3D_DARK);   

  00067	68 60 40 40 00	 push	 4210784			; 00404060H
  0006c	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  0006f	50		 push	 eax
  00070	57		 push	 edi
  00071	50		 push	 eax
  00072	89 44 24 54	 mov	 DWORD PTR tv352[esp+76], eax
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0007b	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	ff d2		 call	 edx
  00085	83 c4 48	 add	 esp, 72			; 00000048H

; 267  :         win_graph->g_line(win_graph,left,bottom - 2,right,bottom - 2,WINCLR_3D_MID);   

  00088	68 a0 a0 a0 00	 push	 10526880		; 00a0a0a0H
  0008d	8d 45 fe	 lea	 eax, DWORD PTR [ebp-2]
  00090	50		 push	 eax
  00091	57		 push	 edi
  00092	50		 push	 eax
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  000a0	ff d0		 call	 eax

; 268  : 
; 269  :         /*  画左边界 */
; 270  :         win_graph->g_line(win_graph,left,top,left,bottom - 1,WINCLR_3D_LIGHT);   

  000a2	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv352[esp+36]
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  000ab	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  000b1	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  000b6	51		 push	 ecx
  000b7	56		 push	 esi
  000b8	53		 push	 ebx
  000b9	56		 push	 esi
  000ba	50		 push	 eax
  000bb	ff d2		 call	 edx

; 271  :         win_graph->g_line(win_graph,left + 1,top + 1,left + 1,bottom - 2,WINCLR_3D_LIGHT);   

  000bd	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  000c2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000c5	8d 4d fe	 lea	 ecx, DWORD PTR [ebp-2]
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  000cd	56		 push	 esi
  000ce	50		 push	 eax
  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  000d4	50		 push	 eax
  000d5	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  000db	ff d0		 call	 eax
  000dd	83 c4 48	 add	 esp, 72			; 00000048H

; 272  : 
; 273  :         /*  画右边界 */
; 274  :         win_graph->g_line(win_graph,right - 1,top,right - 1,bottom,WINCLR_3D_DARK);   

  000e0	68 60 40 40 00	 push	 4210784			; 00404060H
  000e5	55		 push	 ebp
  000e6	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000e9	50		 push	 eax
  000ea	53		 push	 ebx
  000eb	50		 push	 eax
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  000f1	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000f7	50		 push	 eax
  000f8	ff d1		 call	 ecx

; 275  :         win_graph->g_line(win_graph,right - 2,top + 1,right - 2,bottom - 1,WINCLR_3D_MID);

  000fa	68 a0 a0 a0 00	 push	 10526880		; 00a0a0a0H

; 276  :     }
; 277  :     else

  000ff	e9 c0 00 00 00	 jmp	 $LN5@Window_dra
$LN2@Window_dra:

; 278  :     {
; 279  :         /*  画上边界 */
; 280  :         win_graph->g_line(win_graph,left,top,right,top,WINCLR_3D_DARK);

  00104	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0010a	68 60 40 40 00	 push	 4210784			; 00404060H
  0010f	53		 push	 ebx
  00110	57		 push	 edi
  00111	53		 push	 ebx
  00112	56		 push	 esi
  00113	50		 push	 eax
  00114	ff d1		 call	 ecx

; 281  :         win_graph->g_line(win_graph,left,top + 1,right,top + 1, WINCLR_3D_MID);   

  00116	68 a0 a0 a0 00	 push	 10526880		; 00a0a0a0H
  0011b	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0011e	50		 push	 eax
  0011f	57		 push	 edi
  00120	50		 push	 eax
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00126	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  0012c	56		 push	 esi
  0012d	50		 push	 eax
  0012e	ff d2		 call	 edx

; 282  : 
; 283  :         /*  画下边界 */
; 284  :         win_graph->g_line(win_graph,left,bottom - 1,right,bottom - 1, WINCLR_3D_LIGHT);   

  00130	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  00135	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00138	50		 push	 eax
  00139	57		 push	 edi
  0013a	50		 push	 eax
  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00140	56		 push	 esi
  00141	50		 push	 eax
  00142	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00148	ff d0		 call	 eax
  0014a	83 c4 48	 add	 esp, 72			; 00000048H

; 285  :         win_graph->g_line(win_graph,left,bottom - 2,right,bottom - 2, WINCLR_3D_LIGHT);   

  0014d	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  00152	8d 45 fe	 lea	 eax, DWORD PTR [ebp-2]
  00155	50		 push	 eax
  00156	57		 push	 edi
  00157	50		 push	 eax
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0015d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00163	56		 push	 esi
  00164	50		 push	 eax
  00165	ff d1		 call	 ecx

; 286  : 
; 287  :         /*  画左边界 */
; 288  :         win_graph->g_line(win_graph,left,top,left,bottom,WINCLR_3D_DARK);   

  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0016c	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00172	68 60 40 40 00	 push	 4210784			; 00404060H
  00177	55		 push	 ebp
  00178	56		 push	 esi
  00179	53		 push	 ebx
  0017a	56		 push	 esi
  0017b	50		 push	 eax
  0017c	ff d2		 call	 edx

; 289  :         win_graph->g_line(win_graph,left + 1,top + 1,left + 1,bottom - 1,WINCLR_3D_MID);   

  0017e	68 a0 a0 a0 00	 push	 10526880		; 00a0a0a0H
  00183	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  00186	51		 push	 ecx
  00187	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0018a	50		 push	 eax
  0018b	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  0018e	56		 push	 esi
  0018f	50		 push	 eax
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00195	50		 push	 eax
  00196	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0019c	89 4c 24 5c	 mov	 DWORD PTR tv352[esp+84], ecx
  001a0	ff d0		 call	 eax
  001a2	83 c4 48	 add	 esp, 72			; 00000048H

; 290  : 
; 291  :         /*  画右边界 */
; 292  :         win_graph->g_line(win_graph,right - 1,top,right - 1,bottom, WINCLR_3D_LIGHT);   

  001a5	68 dd dd dd 00	 push	 14540253		; 00ddddddH
  001aa	55		 push	 ebp
  001ab	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  001ae	50		 push	 eax
  001af	53		 push	 ebx
  001b0	50		 push	 eax
  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  001b6	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  001bc	50		 push	 eax
  001bd	ff d1		 call	 ecx

; 293  :         win_graph->g_line(win_graph,right - 2,top + 1,right - 2,bottom - 1,WINCLR_3D_LIGHT);   

  001bf	68 dd dd dd 00	 push	 14540253		; 00ddddddH
$LN5@Window_dra:
  001c4	8b 54 24 30	 mov	 edx, DWORD PTR tv352[esp+40]
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  001cd	52		 push	 edx
  001ce	83 c7 fe	 add	 edi, -2			; fffffffeH
  001d1	57		 push	 edi
  001d2	56		 push	 esi
  001d3	57		 push	 edi
  001d4	50		 push	 eax
  001d5	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  001db	ff d0		 call	 eax
  001dd	83 c4 30	 add	 esp, 48			; 00000030H
  001e0	5f		 pop	 edi
  001e1	5e		 pop	 esi
  001e2	5d		 pop	 ebp
  001e3	5b		 pop	 ebx

; 294  :     }
; 295  : }

  001e4	c3		 ret	 0
_Window_draw_frame ENDP
_TEXT	ENDS
_BSS	SEGMENT
_win_background DD 01H DUP (?)
_win_color_title_bar DD 01H DUP (?)
_win_task_bar_height DD 01H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _Window_title_bar
_TEXT	SEGMENT
_Window_title_bar PROC					; COMDAT
; _window$ = eax

; 301  :     int                     left,
; 302  :                             top,
; 303  :                             right,
; 304  :                             bottom;
; 305  : 
; 306  :     left    = WIN_RECT_LEFT(window)     + 2;
; 307  :     right   = WIN_RECT_RIGHT(window)    - 2;
; 308  :     top     = WIN_RECT_TOP(window)      + 2;

  00000	0f bf 48 62	 movsx	 ecx, WORD PTR [eax+98]

; 309  :     bottom  = WIN_RECT_TOP(window)      + 2 + win_task_bar_height ;

  00004	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _win_task_bar_height
  0000a	53		 push	 ebx
  0000b	55		 push	 ebp
  0000c	56		 push	 esi
  0000d	0f bf 70 64	 movsx	 esi, WORD PTR [eax+100]
  00011	57		 push	 edi
  00012	0f bf 78 60	 movsx	 edi, WORD PTR [eax+96]
  00016	83 c7 02	 add	 edi, 2
  00019	83 ee 02	 sub	 esi, 2

; 310  : 
; 311  :     /* 如果定义了3D显示，需要调整，*/
; 312  :     if( window->win_style & WIN_STYLE_3D )

  0001c	f6 40 68 02	 test	 BYTE PTR [eax+104], 2
  00020	8d 69 02	 lea	 ebp, DWORD PTR [ecx+2]
  00023	8d 5c 11 02	 lea	 ebx, DWORD PTR [ecx+edx+2]
  00027	74 0c		 je	 SHORT $LN1@Window_tit

; 313  :     {
; 314  :         left        += 2;

  00029	83 c7 02	 add	 edi, 2

; 315  :         right       -= 2;

  0002c	83 ee 02	 sub	 esi, 2

; 316  :         top         += 2;

  0002f	83 c5 02	 add	 ebp, 2

; 317  :         bottom      += 2;

  00032	83 c3 02	 add	 ebx, 2
$LN1@Window_tit:

; 318  :     }
; 319  : 
; 320  :     win_graph->g_fill_rect(win_graph,left,top,right,bottom,win_color_title_bar);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_color_title_bar
  0003a	50		 push	 eax
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00040	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	55		 push	 ebp
  00049	57		 push	 edi
  0004a	50		 push	 eax
  0004b	ff d1		 call	 ecx

; 321  :     win_graph->g_rect(win_graph,--left,--top,++right,++bottom,win_background);

  0004d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _win_background
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  00058	52		 push	 edx
  00059	83 c3 01	 add	 ebx, 1
  0005c	53		 push	 ebx
  0005d	83 c6 01	 add	 esi, 1
  00060	56		 push	 esi
  00061	83 ed 01	 sub	 ebp, 1
  00064	55		 push	 ebp
  00065	83 ef 01	 sub	 edi, 1
  00068	57		 push	 edi
  00069	50		 push	 eax
  0006a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  00070	ff d0		 call	 eax

; 322  :     win_graph->g_rect(win_graph,--left,--top,++right,bottom,win_background);

  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _win_background
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0007d	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  00083	51		 push	 ecx
  00084	53		 push	 ebx
  00085	83 c6 01	 add	 esi, 1
  00088	56		 push	 esi
  00089	83 c5 ff	 add	 ebp, -1
  0008c	55		 push	 ebp
  0008d	83 c7 ff	 add	 edi, -1
  00090	57		 push	 edi
  00091	50		 push	 eax
  00092	ff d2		 call	 edx
  00094	83 c4 48	 add	 esp, 72			; 00000048H
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5d		 pop	 ebp
  0009a	5b		 pop	 ebx

; 323  : 
; 324  : }

  0009b	c3		 ret	 0
_Window_title_bar ENDP
_TEXT	ENDS
PUBLIC	_Window_rect
; Function compile flags: /Ogtpy
;	COMDAT _Window_rect
_TEXT	SEGMENT
_window$ = 8						; size = 4
_rect$ = 12						; size = 4
_Window_rect PROC					; COMDAT

; 384  :     if( NULL == window || NULL == rect )

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _window$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	74 2e		 je	 SHORT $LN1@Window_rec
  00008	8b 44 24 08	 mov	 eax, DWORD PTR _rect$[esp-4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 26		 je	 SHORT $LN1@Window_rec

; 386  : 
; 387  :     rect->rect_left     = 0;

  00010	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 388  :     rect->rect_top      = 0;

  00015	66 c7 40 02 00
	00		 mov	 WORD PTR [eax+2], 0

; 389  :     rect->rect_right    = WIN_RECT_WIDTH(window);

  0001b	0f b7 51 64	 movzx	 edx, WORD PTR [ecx+100]
  0001f	66 2b 51 60	 sub	 dx, WORD PTR [ecx+96]
  00023	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 390  :     rect->rect_bottom   = WIN_RECT_HEIGHT(window);

  00027	0f b7 51 66	 movzx	 edx, WORD PTR [ecx+102]
  0002b	66 2b 51 62	 sub	 dx, WORD PTR [ecx+98]
  0002f	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 391  : 
; 392  :     return RESULT_SUCCEED;

  00033	33 c0		 xor	 eax, eax

; 393  : }

  00035	c3		 ret	 0
$LN1@Window_rec:

; 385  :         return RESULT_FAILED;

  00036	83 c8 ff	 or	 eax, -1

; 393  : }

  00039	c3		 ret	 0
_Window_rect ENDP
_TEXT	ENDS
PUBLIC	_Window_get_client_rect
; Function compile flags: /Ogtpy
;	COMDAT _Window_get_client_rect
_TEXT	SEGMENT
_window$ = 8						; size = 4
_rect$ = 12						; size = 4
_Window_get_client_rect PROC				; COMDAT

; 140  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 141  :     if( NULL == window || NULL == rect )

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _window$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 52		 je	 SHORT $LN4@Window_get
  0000a	8b 74 24 10	 mov	 esi, DWORD PTR _rect$[esp+4]
  0000e	85 f6		 test	 esi, esi
  00010	74 4a		 je	 SHORT $LN4@Window_get

; 143  :     
; 144  :     Window_rect(window,rect);

  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 _Window_rect
  00019	83 c4 08	 add	 esp, 8

; 145  : 
; 146  :     if( window->win_style & WIN_STYLE_3D )

  0001c	f6 47 68 02	 test	 BYTE PTR [edi+104], 2
  00020	74 0d		 je	 SHORT $LN3@Window_get

; 147  :     {
; 148  :         rect->rect_right    -= 8;

  00022	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00027	66 01 46 04	 add	 WORD PTR [esi+4], ax

; 149  :         rect->rect_bottom   -= 8;

  0002b	66 01 46 06	 add	 WORD PTR [esi+6], ax
$LN3@Window_get:

; 150  :     }
; 151  : 
; 152  :     if( window->win_style & WIN_STYLE_CLIENT )

  0002f	f6 47 68 10	 test	 BYTE PTR [edi+104], 16	; 00000010H
  00033	74 0d		 je	 SHORT $LN2@Window_get

; 153  :     {
; 154  :         rect->rect_right    -= 6;

  00035	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0003a	66 01 46 04	 add	 WORD PTR [esi+4], ax

; 155  :         rect->rect_bottom   -= 6;

  0003e	66 01 46 06	 add	 WORD PTR [esi+6], ax
$LN2@Window_get:

; 156  :     }
; 157  : 
; 158  :     if( window->win_style & WIN_STYLE_TITLE_BAR )

  00042	f6 47 68 04	 test	 BYTE PTR [edi+104], 4
  00046	74 0f		 je	 SHORT $LN1@Window_get

; 159  :         rect->rect_bottom   -= win_task_bar_height + 2;

  00048	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0004d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _win_task_bar_height
  00053	66 01 46 06	 add	 WORD PTR [esi+6], ax
$LN1@Window_get:
  00057	5f		 pop	 edi

; 160  : 
; 161  :     return RESULT_SUCCEED;

  00058	33 c0		 xor	 eax, eax
  0005a	5e		 pop	 esi

; 162  : }

  0005b	c3		 ret	 0
$LN4@Window_get:
  0005c	5f		 pop	 edi

; 142  :         return RESULT_FAILED;

  0005d	83 c8 ff	 or	 eax, -1
  00060	5e		 pop	 esi

; 162  : }

  00061	c3		 ret	 0
_Window_get_client_rect ENDP
_TEXT	ENDS
PUBLIC	_Window_client
; Function compile flags: /Ogtpy
;	COMDAT _Window_client
_TEXT	SEGMENT
tv139 = -8						; size = 4
_rect$ = -8						; size = 8
_bottom$ = 8						; size = 4
_window$ = 8						; size = 4
_Window_client PROC					; COMDAT

; 328  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp

; 329  :     rect_t                  rect = {0};

  00005	33 c0		 xor	 eax, eax
  00007	56		 push	 esi

; 330  :     int                     left,
; 331  :                             top,
; 332  :                             right,
; 333  :                             bottom;
; 334  :     int                     i;
; 335  : 
; 336  :     /*
; 337  :      *  画四个边界
; 338  :      */
; 339  :     Window_get_client_rect(window,&rect);

  00008	8b 74 24 18	 mov	 esi, DWORD PTR _window$[esp+16]
  0000c	66 89 44 24 0c	 mov	 WORD PTR _rect$[esp+20], ax
  00011	89 44 24 0e	 mov	 DWORD PTR _rect$[esp+22], eax
  00015	66 89 44 24 12	 mov	 WORD PTR _rect$[esp+26], ax
  0001a	57		 push	 edi
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR _rect$[esp+24]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _Window_get_client_rect

; 340  : 
; 341  :     left    = WIN_RECT_LEFT(window);
; 342  :     top     = WIN_RECT_TOP(window);
; 343  :     right   = WIN_RECT_RIGHT(window);
; 344  :     bottom  = WIN_RECT_BOTTOM(window);

  00026	0f bf 4e 66	 movsx	 ecx, WORD PTR [esi+102]

; 345  : 
; 346  :     if( window->win_style & WIN_STYLE_TITLE_BAR )

  0002a	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0002d	0f bf 5e 60	 movsx	 ebx, WORD PTR [esi+96]
  00031	0f bf 7e 62	 movsx	 edi, WORD PTR [esi+98]
  00035	0f bf 6e 64	 movsx	 ebp, WORD PTR [esi+100]
  00039	83 c4 08	 add	 esp, 8
  0003c	a8 04		 test	 al, 4
  0003e	89 4c 24 1c	 mov	 DWORD PTR _bottom$[esp+20], ecx
  00042	74 20		 je	 SHORT $LN10@Window_cli

; 347  :     {
; 348  :         top                 += win_task_bar_height + 2;

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _win_task_bar_height

; 349  :         
; 350  :         rect.rect_top       += win_task_bar_height + 2;
; 351  :         rect.rect_bottom    += win_task_bar_height + 2;

  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _win_task_bar_height
  00050	8d 7c 0f 02	 lea	 edi, DWORD PTR [edi+ecx+2]
  00054	83 c1 02	 add	 ecx, 2
  00057	66 01 4c 24 12	 add	 WORD PTR _rect$[esp+26], cx
  0005c	83 c2 02	 add	 edx, 2
  0005f	66 01 54 24 16	 add	 WORD PTR _rect$[esp+30], dx
$LN10@Window_cli:

; 352  :     }
; 353  : 
; 354  :     if( window->win_style & WIN_STYLE_3D )

  00064	a8 02		 test	 al, 2
  00066	74 36		 je	 SHORT $LN4@Window_cli

; 355  :     {
; 356  :         left                += 5;
; 357  :         top                 += 5;
; 358  :         right               -= 5;
; 359  :         bottom              -= 4;

  00068	83 6c 24 1c 04	 sub	 DWORD PTR _bottom$[esp+20], 4

; 360  : 
; 361  :         rect.rect_left      += 5;
; 362  :         rect.rect_top       += 5;
; 363  :         rect.rect_right     += 9;

  0006d	66 83 44 24 14
	09		 add	 WORD PTR _rect$[esp+28], 9

; 364  :         rect.rect_bottom    += 10;

  00073	66 83 44 24 16
	0a		 add	 WORD PTR _rect$[esp+30], 10 ; 0000000aH
  00079	b8 05 00 00 00	 mov	 eax, 5
  0007e	66 01 44 24 10	 add	 WORD PTR _rect$[esp+24], ax
  00083	66 01 44 24 12	 add	 WORD PTR _rect$[esp+26], ax
  00088	03 d8		 add	 ebx, eax
  0008a	03 f8		 add	 edi, eax
  0008c	2b e8		 sub	 ebp, eax

; 365  :         Window_draw_frame(window,&rect,WIN_SUNKEN);

  0008e	6a 00		 push	 0
  00090	8d 44 24 14	 lea	 eax, DWORD PTR _rect$[esp+28]
  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 _Window_draw_frame
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Window_cli:

; 366  :     }
; 367  : 
; 368  :     win_graph->g_fill_rect(win_graph,left + 2,top + 2,right - 2,bottom - 2,
; 369  :         window->win_color_client_bkgd);

  0009e	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000a1	8b 54 24 1c	 mov	 edx, DWORD PTR _bottom$[esp+20]
  000a5	51		 push	 ecx
  000a6	83 c2 fe	 add	 edx, -2			; fffffffeH
  000a9	52		 push	 edx
  000aa	8d 45 fe	 lea	 eax, DWORD PTR [ebp-2]
  000ad	50		 push	 eax
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  000b3	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  000b6	51		 push	 ecx
  000b7	8d 53 02	 lea	 edx, DWORD PTR [ebx+2]
  000ba	52		 push	 edx
  000bb	50		 push	 eax
  000bc	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [eax+140]
  000c2	ff d0		 call	 eax
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
  000c7	c7 44 24 10 03
	00 00 00	 mov	 DWORD PTR tv139[esp+24], 3
  000cf	90		 npad	 1
$LL3@Window_cli:

; 370  : 
; 371  :     for( i = 0 ; i < 3 ; i++)
; 372  :     {
; 373  :         left--;
; 374  :         top--;
; 375  :         right++;
; 376  :         bottom++;

  000d0	8b 44 24 1c	 mov	 eax, DWORD PTR _bottom$[esp+20]

; 377  :         win_graph->g_rect(win_graph,left,top,right,bottom,window->win_color);

  000d4	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000d7	51		 push	 ecx
  000d8	83 c0 01	 add	 eax, 1
  000db	50		 push	 eax
  000dc	83 c5 01	 add	 ebp, 1
  000df	55		 push	 ebp
  000e0	83 ef 01	 sub	 edi, 1
  000e3	57		 push	 edi
  000e4	83 eb 01	 sub	 ebx, 1
  000e7	89 44 24 2c	 mov	 DWORD PTR _bottom$[esp+36], eax
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  000f0	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  000f6	53		 push	 ebx
  000f7	50		 push	 eax
  000f8	ff d2		 call	 edx
  000fa	83 c4 18	 add	 esp, 24			; 00000018H
  000fd	83 6c 24 10 01	 sub	 DWORD PTR tv139[esp+24], 1
  00102	75 cc		 jne	 SHORT $LL3@Window_cli
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5d		 pop	 ebp
  00107	5b		 pop	 ebx

; 378  :     }
; 379  : }

  00108	83 c4 08	 add	 esp, 8
  0010b	c3		 ret	 0
_Window_client ENDP
_TEXT	ENDS
PUBLIC	_Window_draw
; Function compile flags: /Ogtpy
;	COMDAT _Window_draw
_TEXT	SEGMENT
_rect$ = -8						; size = 8
_window$ = 8						; size = 4
_Window_draw PROC					; COMDAT

; 396  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 397  :     rect_t                  rect;
; 398  :     /*  填充窗体背景  */
; 399  :     if( window->win_style & WIN_STYLE_FILE_BKGD )

  00004	8b 74 24 10	 mov	 esi, DWORD PTR _window$[esp+8]
  00008	f6 46 68 08	 test	 BYTE PTR [esi+104], 8
  0000c	74 29		 je	 SHORT $LN5@Window_dra@2

; 400  :         win_graph->g_fill_rect(win_graph,
; 401  :             window->win_rect.rect_left,window->win_rect.rect_top,
; 402  :             window->win_rect.rect_right,window->win_rect.rect_bottom,
; 403  :             window->win_color);

  0000e	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00011	0f bf 4e 66	 movsx	 ecx, WORD PTR [esi+102]
  00015	0f bf 56 64	 movsx	 edx, WORD PTR [esi+100]
  00019	50		 push	 eax
  0001a	0f bf 46 62	 movsx	 eax, WORD PTR [esi+98]
  0001e	51		 push	 ecx
  0001f	0f bf 4e 60	 movsx	 ecx, WORD PTR [esi+96]
  00023	52		 push	 edx
  00024	50		 push	 eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _win_graph
  0002a	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	ff d2		 call	 edx
  00034	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@Window_dra@2:

; 404  : 
; 405  :     /*  3D显示   */
; 406  :     if( window->win_style & WIN_STYLE_3D )

  00037	f6 46 68 02	 test	 BYTE PTR [esi+104], 2
  0003b	74 3e		 je	 SHORT $LN4@Window_dra@2

; 407  :     {
; 408  :         Window_rect(window,&rect);

  0003d	8d 44 24 04	 lea	 eax, DWORD PTR _rect$[esp+12]
  00041	85 c0		 test	 eax, eax
  00043	74 26		 je	 SHORT $LN8@Window_dra@2
  00045	66 8b 4e 64	 mov	 cx, WORD PTR [esi+100]
  00049	66 2b 4e 60	 sub	 cx, WORD PTR [esi+96]
  0004d	66 8b 56 66	 mov	 dx, WORD PTR [esi+102]
  00051	33 c0		 xor	 eax, eax
  00053	66 2b 56 62	 sub	 dx, WORD PTR [esi+98]
  00057	66 89 44 24 04	 mov	 WORD PTR _rect$[esp+12], ax
  0005c	66 89 44 24 06	 mov	 WORD PTR _rect$[esp+14], ax
  00061	66 89 4c 24 08	 mov	 WORD PTR _rect$[esp+16], cx
  00066	66 89 54 24 0a	 mov	 WORD PTR _rect$[esp+18], dx
$LN8@Window_dra@2:

; 409  :         Window_draw_frame(window,&rect,WIN_RAISED);

  0006b	6a 01		 push	 1
  0006d	8d 44 24 08	 lea	 eax, DWORD PTR _rect$[esp+16]
  00071	50		 push	 eax
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _Window_draw_frame
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Window_dra@2:

; 410  :     }
; 411  : 
; 412  :     /*  标题栏   */
; 413  :     if( window->win_style & WIN_STYLE_TITLE_BAR )

  0007b	f6 46 68 04	 test	 BYTE PTR [esi+104], 4
  0007f	74 07		 je	 SHORT $LN3@Window_dra@2

; 414  :         Window_title_bar(window);

  00081	8b c6		 mov	 eax, esi
  00083	e8 00 00 00 00	 call	 _Window_title_bar
$LN3@Window_dra@2:

; 415  : 
; 416  :     /*  3D显示   */
; 417  :     if( window->win_style & WIN_STYLE_CLIENT )

  00088	f6 46 68 10	 test	 BYTE PTR [esi+104], 16	; 00000010H
  0008c	74 09		 je	 SHORT $LN2@Window_dra@2

; 418  :         Window_client(window);

  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 _Window_client
  00094	83 c4 04	 add	 esp, 4
$LN2@Window_dra@2:

; 419  : 
; 420  :     /*  画窗体边框   */
; 421  :     if( window->win_style & WIN_STYLE_BORDER )

  00097	f6 46 68 01	 test	 BYTE PTR [esi+104], 1
  0009b	74 09		 je	 SHORT $LN1@Window_dra@2

; 422  :         Window_draw_border(window);

  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _Window_draw_border
  000a3	83 c4 04	 add	 esp, 4
$LN1@Window_dra@2:
  000a6	5e		 pop	 esi

; 423  : }

  000a7	83 c4 08	 add	 esp, 8
  000aa	c3		 ret	 0
_Window_draw ENDP
_TEXT	ENDS
PUBLIC	_Window_initial
EXTRN	_Graph_get:PROC
EXTRN	__memzero:PROC
_BSS	SEGMENT
_win_desktop DD	01H DUP (?)
_win_task_bar DB 0338H DUP (?)
_win_system DB	0338H DUP (?)
_win_pool DB	0670H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _Window_initial
_TEXT	SEGMENT
_Window_initial PROC					; COMDAT

; 428  :     window_t                * window = win_pool;
; 429  : 
; 430  :     _memzero(win_pool,sizeof(window_t) * WINDOW_MAX);

  00000	68 70 06 00 00	 push	 1648			; 00000670H
  00005	68 00 00 00 00	 push	 OFFSET _win_pool
  0000a	e8 00 00 00 00	 call	 __memzero

; 431  :     _memzero(&win_system,sizeof(window_t));

  0000f	68 38 03 00 00	 push	 824			; 00000338H
  00014	68 00 00 00 00	 push	 OFFSET _win_system
  00019	e8 00 00 00 00	 call	 __memzero

; 432  :     _memzero(&win_task_bar,sizeof(window_t));

  0001e	68 38 03 00 00	 push	 824			; 00000338H
  00023	68 00 00 00 00	 push	 OFFSET _win_task_bar
  00028	e8 00 00 00 00	 call	 __memzero

; 433  : 
; 434  :     win_desktop             = WINCLR_DESKTOP_DEFUALT;
; 435  :     win_background          = WINCLR_BACKGROUND_DEFAULT;

  0002d	b8 c0 c0 c0 00	 mov	 eax, 12632256		; 00c0c0c0H
  00032	ba 80 80 40 00	 mov	 edx, 4227200		; 00408080H

; 436  :     win_color_title_bar     = WINCLR_TITLE_BAR_DEFAULT;
; 437  : 
; 438  :     win_task_bar_height     = 20;
; 439  : 
; 440  :     /*  主窗体无边框狂，平面  */
; 441  :     win_system.win_rect.rect_right      = 640;

  00037	b9 80 02 00 00	 mov	 ecx, 640		; 00000280H

; 442  :     win_system.win_rect.rect_bottom     = 480;
; 443  :     win_system.win_color                = WINCLR_DESKTOP_DEFUALT;
; 444  :     win_system.win_style                = WIN_STYLE_FILE_BKGD;
; 445  : 
; 446  :     /*  任务栏无边框狂，立体  */
; 447  :     win_task_bar.win_rect.rect_left     = 0;
; 448  :     win_task_bar.win_rect.rect_top      = 480 - 2 - win_task_bar_height;
; 449  :     win_task_bar.win_rect.rect_right    = 640;
; 450  :     win_task_bar.win_rect.rect_bottom   = 480 + 2;
; 451  : 
; 452  :     win_task_bar.win_color              = WINCLR_BACKGROUND_DEFAULT;
; 453  :     win_task_bar.win_style              = WIN_STYLE_FILE_BKGD | WIN_STYLE_3D;
; 454  :     
; 455  :     window->win_rect.rect_left          = 200;
; 456  :     window->win_rect.rect_top           = 100;
; 457  :     window->win_rect.rect_right         = 400;
; 458  :     window->win_rect.rect_bottom        = 270;
; 459  :     window->win_color_client_bkgd       = WINCLR_CLIENT_BKGD_DEF;
; 460  :     window->win_color                   = WINCLR_BACKGROUND_DEFAULT;
; 461  :     window->win_style                   = WIN_STYLE_3D | WIN_STYLE_TITLE_BAR | 
; 462  :                                           WIN_STYLE_CLIENT;
; 463  :     
; 464  :     win_graph = Graph_get(0);

  0003c	6a 00		 push	 0
  0003e	89 15 00 00 00
	00		 mov	 DWORD PTR _win_desktop, edx
  00044	a3 00 00 00 00	 mov	 DWORD PTR _win_background, eax
  00049	c7 05 00 00 00
	00 c0 00 00 00	 mov	 DWORD PTR _win_color_title_bar, 192 ; 000000c0H
  00053	c7 05 00 00 00
	00 14 00 00 00	 mov	 DWORD PTR _win_task_bar_height, 20 ; 00000014H
  0005d	66 89 0d 64 00
	00 00		 mov	 WORD PTR _win_system+100, cx
  00064	66 c7 05 66 00
	00 00 e0 01	 mov	 WORD PTR _win_system+102, 480 ; 000001e0H
  0006d	89 15 58 00 00
	00		 mov	 DWORD PTR _win_system+88, edx
  00073	c7 05 68 00 00
	00 08 00 00 00	 mov	 DWORD PTR _win_system+104, 8
  0007d	66 c7 05 60 00
	00 00 00 00	 mov	 WORD PTR _win_task_bar+96, 0
  00086	66 c7 05 62 00
	00 00 ca 01	 mov	 WORD PTR _win_task_bar+98, 458 ; 000001caH
  0008f	66 89 0d 64 00
	00 00		 mov	 WORD PTR _win_task_bar+100, cx
  00096	66 c7 05 66 00
	00 00 e2 01	 mov	 WORD PTR _win_task_bar+102, 482 ; 000001e2H
  0009f	a3 58 00 00 00	 mov	 DWORD PTR _win_task_bar+88, eax
  000a4	c7 05 68 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _win_task_bar+104, 10 ; 0000000aH
  000ae	66 c7 05 60 00
	00 00 c8 00	 mov	 WORD PTR _win_pool+96, 200 ; 000000c8H
  000b7	66 c7 05 62 00
	00 00 64 00	 mov	 WORD PTR _win_pool+98, 100 ; 00000064H
  000c0	66 c7 05 64 00
	00 00 90 01	 mov	 WORD PTR _win_pool+100, 400 ; 00000190H
  000c9	66 c7 05 66 00
	00 00 0e 01	 mov	 WORD PTR _win_pool+102, 270 ; 0000010eH
  000d2	c7 05 5c 00 00
	00 ff ff ff 00	 mov	 DWORD PTR _win_pool+92, 16777215 ; 00ffffffH
  000dc	a3 58 00 00 00	 mov	 DWORD PTR _win_pool+88, eax
  000e1	c7 05 68 00 00
	00 16 00 00 00	 mov	 DWORD PTR _win_pool+104, 22 ; 00000016H
  000eb	e8 00 00 00 00	 call	 _Graph_get

; 465  : 
; 466  :     /*  先画桌面，在画任务栏  */
; 467  :     Window_draw(&win_system);

  000f0	68 00 00 00 00	 push	 OFFSET _win_system
  000f5	a3 00 00 00 00	 mov	 DWORD PTR _win_graph, eax
  000fa	e8 00 00 00 00	 call	 _Window_draw

; 468  :     Window_draw(&win_task_bar);

  000ff	68 00 00 00 00	 push	 OFFSET _win_task_bar
  00104	e8 00 00 00 00	 call	 _Window_draw

; 469  :     Window_draw(window);

  00109	68 00 00 00 00	 push	 OFFSET _win_pool
  0010e	e8 00 00 00 00	 call	 _Window_draw
  00113	83 c4 28	 add	 esp, 40			; 00000028H

; 470  : }

  00116	c3		 ret	 0
_Window_initial ENDP
_TEXT	ENDS
END
