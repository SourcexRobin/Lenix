; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\arch\cpu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_critical_nest
_BSS	SEGMENT
_critical_nest DB 01H DUP (?)
_BSS	ENDS
PUBLIC	_Io_delay
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\arch\cpu.c
;	COMDAT _Io_delay
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Io_delay PROC						; COMDAT

; 45   : {

  00000	51		 push	 ecx

; 46   :     volatile int i = 0;

  00001	c7 04 24 00 00
	00 00		 mov	 DWORD PTR _i$[esp+4], 0

; 47   : 
; 48   :     return ++i;

  00008	83 04 24 01	 add	 DWORD PTR _i$[esp+4], 1
  0000c	8b 04 24	 mov	 eax, DWORD PTR _i$[esp+4]

; 49   : }

  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
_Io_delay ENDP
_TEXT	ENDS
PUBLIC	_Cpu_tas_s
EXTRN	_Cpu_psw_set:PROC
EXTRN	_Cpu_disable_interrupt:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Cpu_tas_s
_TEXT	SEGMENT
_lck$ = 8						; size = 4
_test$ = 12						; size = 4
_set$ = 16						; size = 4
_Cpu_tas_s PROC						; COMDAT

; 57   : {

  00000	56		 push	 esi

; 58   : #if _CFG_CRITICAL_METHOD_ == 1
; 59   :     
; 60   :     Cpu_disable_interrupt();
; 61   : 
; 62   :     ++critical_nest;
; 63   : 
; 64   :     ASSERT(critical_nest < 255);
; 65   : 
; 66   :     if( test == *lck )
; 67   :         *lck  = set;
; 68   :     else
; 69   :         test = *lck;
; 70   : 
; 71   :     if( --critical_nest == 0 )
; 72   :         Cpu_enable_interrupt();
; 73   : #else
; 74   :     psw_t psw;
; 75   : 
; 76   :     psw = Cpu_disable_interrupt();

  00001	e8 00 00 00 00	 call	 _Cpu_disable_interrupt

; 77   : 
; 78   :     if( test == *lck )

  00006	8b 54 24 08	 mov	 edx, DWORD PTR _lck$[esp]
  0000a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000c	8b 74 24 0c	 mov	 esi, DWORD PTR _test$[esp]
  00010	3b f1		 cmp	 esi, ecx
  00012	75 13		 jne	 SHORT $LN2@Cpu_tas_s

; 79   :         *lck  = set;

  00014	8b 4c 24 10	 mov	 ecx, DWORD PTR _set$[esp]

; 80   :     else
; 81   :         test = *lck;
; 82   : 
; 83   :     Cpu_psw_set(psw);

  00018	50		 push	 eax
  00019	89 0a		 mov	 DWORD PTR [edx], ecx
  0001b	e8 00 00 00 00	 call	 _Cpu_psw_set
  00020	83 c4 04	 add	 esp, 4

; 84   : 
; 85   : #endif
; 86   : 
; 87   :     return test;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 88   : }

  00026	c3		 ret	 0
$LN2@Cpu_tas_s:

; 80   :     else
; 81   :         test = *lck;
; 82   : 
; 83   :     Cpu_psw_set(psw);

  00027	50		 push	 eax
  00028	8b f1		 mov	 esi, ecx
  0002a	e8 00 00 00 00	 call	 _Cpu_psw_set
  0002f	83 c4 04	 add	 esp, 4

; 84   : 
; 85   : #endif
; 86   : 
; 87   :     return test;

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi

; 88   : }

  00035	c3		 ret	 0
_Cpu_tas_s ENDP
_TEXT	ENDS
END
