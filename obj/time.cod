; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\libc\time.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08INBOOONO@Saturday?$AA@			; `string'
PUBLIC	??_C@_06JECMNKMI@Friday?$AA@			; `string'
PUBLIC	??_C@_08HACCIKIA@Thursday?$AA@			; `string'
PUBLIC	??_C@_09DLIGFAKA@Wednesday?$AA@			; `string'
PUBLIC	??_C@_07BAAGCFCM@Tuesday?$AA@			; `string'
PUBLIC	??_C@_06JLEDEDGH@Monday?$AA@			; `string'
PUBLIC	??_C@_06OOPIFAJ@Sunday?$AA@			; `string'
_DATA	SEGMENT
_week	DD	FLAT:??_C@_06OOPIFAJ@Sunday?$AA@
	DD	FLAT:??_C@_06JLEDEDGH@Monday?$AA@
	DD	FLAT:??_C@_07BAAGCFCM@Tuesday?$AA@
	DD	FLAT:??_C@_09DLIGFAKA@Wednesday?$AA@
	DD	FLAT:??_C@_08HACCIKIA@Thursday?$AA@
	DD	FLAT:??_C@_06JECMNKMI@Friday?$AA@
	DD	FLAT:??_C@_08INBOOONO@Saturday?$AA@
_DATA	ENDS
;	COMDAT ??_C@_08INBOOONO@Saturday?$AA@
CONST	SEGMENT
??_C@_08INBOOONO@Saturday?$AA@ DB 'Saturday', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JECMNKMI@Friday?$AA@
CONST	SEGMENT
??_C@_06JECMNKMI@Friday?$AA@ DB 'Friday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HACCIKIA@Thursday?$AA@
CONST	SEGMENT
??_C@_08HACCIKIA@Thursday?$AA@ DB 'Thursday', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DLIGFAKA@Wednesday?$AA@
CONST	SEGMENT
??_C@_09DLIGFAKA@Wednesday?$AA@ DB 'Wednesday', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAAGCFCM@Tuesday?$AA@
CONST	SEGMENT
??_C@_07BAAGCFCM@Tuesday?$AA@ DB 'Tuesday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLEDEDGH@Monday?$AA@
CONST	SEGMENT
??_C@_06JLEDEDGH@Monday?$AA@ DB 'Monday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOPIFAJ@Sunday?$AA@
CONST	SEGMENT
??_C@_06OOPIFAJ@Sunday?$AA@ DB 'Sunday', 00H		; `string'
CONST	ENDS
PUBLIC	_Time_to_short
; Function compile flags: /Ogtpy
; File e:\sourcexstudio\lenix\lenix\src\libc\time.c
;	COMDAT _Time_to_short
_TEXT	SEGMENT
_time$ = 8						; size = 4
_Time_to_short PROC					; COMDAT

; 21   :     stime_t         st;
; 22   : 
; 23   :     st.st_second = time->time_second / 2;
; 24   :     st.st_minute = time->time_minute;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _time$[esp-4]
  00004	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 25   :     st.st_hour   = time->time_hour;

  00007	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0000a	66 0f b6 09	 movzx	 cx, BYTE PTR [ecx]
  0000e	24 3f		 and	 al, 63			; 0000003fH
  00010	66 0f b6 c0	 movzx	 ax, al
  00014	d0 ea		 shr	 dl, 1
  00016	80 e2 1f	 and	 dl, 31			; 0000001fH
  00019	66 c1 e0 05	 shl	 ax, 5
  0001d	66 0f b6 d2	 movzx	 dx, dl
  00021	66 0b c2	 or	 ax, dx
  00024	66 25 ff 07	 and	 ax, 2047		; 000007ffH
  00028	66 c1 e1 0b	 shl	 cx, 11			; 0000000bH
  0002c	66 0b c1	 or	 ax, cx

; 26   : 
; 27   :     return st;
; 28   : }

  0002f	c3		 ret	 0
_Time_to_short ENDP
_TEXT	ENDS
PUBLIC	_Date_to_short
; Function compile flags: /Ogtpy
;	COMDAT _Date_to_short
_TEXT	SEGMENT
_date$ = 8						; size = 4
_Date_to_short PROC					; COMDAT

; 32   :     sdate_t         sd;
; 33   :     
; 34   :     sd.sd_day   = date->date_day;
; 35   :     sd.sd_month = date->date_month;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _date$[esp-4]
  00004	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00007	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]

; 36   :     sd.sd_year  = date->date_year - 1980;

  0000a	66 8b 09	 mov	 cx, WORD PTR [ecx]
  0000d	24 0f		 and	 al, 15			; 0000000fH
  0000f	66 0f b6 c0	 movzx	 ax, al
  00013	80 e2 1f	 and	 dl, 31			; 0000001fH
  00016	66 c1 e0 05	 shl	 ax, 5
  0001a	66 0f b6 d2	 movzx	 dx, dl
  0001e	66 0b c2	 or	 ax, dx
  00021	66 83 e9 3c	 sub	 cx, 60			; 0000003cH
  00025	66 25 ff 01	 and	 ax, 511			; 000001ffH
  00029	66 c1 e1 09	 shl	 cx, 9
  0002d	66 0b c1	 or	 ax, cx

; 37   : 
; 38   :     return sd;
; 39   : }

  00030	c3		 ret	 0
_Date_to_short ENDP
_TEXT	ENDS
PUBLIC	_Time_to_long
; Function compile flags: /Ogtpy
;	COMDAT _Time_to_long
_TEXT	SEGMENT
_date$ = 8						; size = 4
_time$ = 12						; size = 4
_Time_to_long PROC					; COMDAT

; 42   : {

  00000	56		 push	 esi

; 43   :     ltime_t         lt;
; 44   : 
; 45   :     lt.lt_second    = time->time_second / 2;
; 46   :     lt.lt_minute    = time->time_second;
; 47   :     lt.lt_hour      = time->time_hour;
; 48   :     lt.lt_day       = date->date_day;
; 49   :     lt.lt_month     = date->date_month;
; 50   :     lt.lt_year      = date->date_year - 1980;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _date$[esp]
  00005	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00008	0f b6 56 02	 movzx	 edx, BYTE PTR [esi+2]
  0000c	83 e8 3c	 sub	 eax, 60			; 0000003cH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	83 e2 0f	 and	 edx, 15			; 0000000fH
  00015	0b c2		 or	 eax, edx
  00017	0f b6 56 03	 movzx	 edx, BYTE PTR [esi+3]
  0001b	c1 e0 05	 shl	 eax, 5
  0001e	83 e2 1f	 and	 edx, 31			; 0000001fH
  00021	0b c2		 or	 eax, edx
  00023	57		 push	 edi
  00024	8b 7c 24 10	 mov	 edi, DWORD PTR _time$[esp+4]
  00028	0f b6 17	 movzx	 edx, BYTE PTR [edi]
  0002b	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]
  0002f	c1 e0 05	 shl	 eax, 5
  00032	83 e2 1f	 and	 edx, 31			; 0000001fH
  00035	0b c2		 or	 eax, edx
  00037	8b d1		 mov	 edx, ecx
  00039	c1 e0 06	 shl	 eax, 6
  0003c	83 e2 3f	 and	 edx, 63			; 0000003fH
  0003f	0b c2		 or	 eax, edx
  00041	d1 e9		 shr	 ecx, 1
  00043	c1 e0 05	 shl	 eax, 5
  00046	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00049	5f		 pop	 edi
  0004a	0b c1		 or	 eax, ecx
  0004c	5e		 pop	 esi

; 51   : 
; 52   :     return lt;
; 53   : }

  0004d	c3		 ret	 0
_Time_to_long ENDP
_TEXT	ENDS
PUBLIC	_Time_get_time
EXTRN	_Machine_time_get:PROC
EXTRN	_Machine_date_get:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Time_get_time
_TEXT	SEGMENT
_date$ = 8						; size = 4
_time$ = 12						; size = 4
_Time_get_time PROC					; COMDAT

; 56   : {

  00000	56		 push	 esi

; 57   :     Machine_date_get(date);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _date$[esp]
  00005	57		 push	 edi
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _Machine_date_get

; 58   :     Machine_time_get(time);

  0000c	8b 7c 24 14	 mov	 edi, DWORD PTR _time$[esp+8]
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _Machine_time_get

; 59   : 
; 60   :     return Time_to_long(date,time);

  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	0f b6 56 02	 movzx	 edx, BYTE PTR [esi+2]
  0001d	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]
  00021	83 e8 3c	 sub	 eax, 60			; 0000003cH
  00024	c1 e0 04	 shl	 eax, 4
  00027	83 e2 0f	 and	 edx, 15			; 0000000fH
  0002a	0b c2		 or	 eax, edx
  0002c	0f b6 56 03	 movzx	 edx, BYTE PTR [esi+3]
  00030	c1 e0 05	 shl	 eax, 5
  00033	83 e2 1f	 and	 edx, 31			; 0000001fH
  00036	0b c2		 or	 eax, edx
  00038	0f b6 17	 movzx	 edx, BYTE PTR [edi]
  0003b	c1 e0 05	 shl	 eax, 5
  0003e	83 e2 1f	 and	 edx, 31			; 0000001fH
  00041	0b c2		 or	 eax, edx
  00043	8b d1		 mov	 edx, ecx
  00045	c1 e0 06	 shl	 eax, 6
  00048	83 e2 3f	 and	 edx, 63			; 0000003fH
  0004b	83 c4 08	 add	 esp, 8
  0004e	0b c2		 or	 eax, edx
  00050	d1 e9		 shr	 ecx, 1
  00052	c1 e0 05	 shl	 eax, 5
  00055	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00058	5f		 pop	 edi
  00059	0b c1		 or	 eax, ecx
  0005b	5e		 pop	 esi

; 61   : }

  0005c	c3		 ret	 0
_Time_get_time ENDP
_TEXT	ENDS
PUBLIC	_Time_get_ltime
; Function compile flags: /Ogtpy
;	COMDAT _Time_get_ltime
_TEXT	SEGMENT
_date$ = -8						; size = 4
_time$ = -4						; size = 4
_Time_get_ltime PROC					; COMDAT

; 65   :     date_t          date;
; 66   :     time_t          time;
; 67   : 
; 68   :     Machine_date_get(&date);

  00000	8d 44 24 f8	 lea	 eax, DWORD PTR _date$[esp]
  00004	83 ec 08	 sub	 esp, 8
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _Machine_date_get

; 69   :     Machine_time_get(&time);

  0000d	8d 4c 24 08	 lea	 ecx, DWORD PTR _time$[esp+12]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _Machine_time_get

; 70   : 
; 71   :     return Time_to_long(&date,&time);

  00017	0f b7 44 24 08	 movzx	 eax, WORD PTR _date$[esp+16]
  0001c	0f b6 54 24 0a	 movzx	 edx, BYTE PTR _date$[esp+18]
  00021	0f b6 4c 24 0e	 movzx	 ecx, BYTE PTR _time$[esp+18]
  00026	83 e8 3c	 sub	 eax, 60			; 0000003cH
  00029	c1 e0 04	 shl	 eax, 4
  0002c	83 e2 0f	 and	 edx, 15			; 0000000fH
  0002f	0b c2		 or	 eax, edx
  00031	0f b6 54 24 0b	 movzx	 edx, BYTE PTR _date$[esp+19]
  00036	c1 e0 05	 shl	 eax, 5
  00039	83 e2 1f	 and	 edx, 31			; 0000001fH
  0003c	0b c2		 or	 eax, edx
  0003e	0f b6 54 24 0c	 movzx	 edx, BYTE PTR _time$[esp+16]
  00043	c1 e0 05	 shl	 eax, 5
  00046	83 e2 1f	 and	 edx, 31			; 0000001fH
  00049	0b c2		 or	 eax, edx
  0004b	8b d1		 mov	 edx, ecx
  0004d	c1 e0 06	 shl	 eax, 6
  00050	83 e2 3f	 and	 edx, 63			; 0000003fH
  00053	0b c2		 or	 eax, edx
  00055	d1 e9		 shr	 ecx, 1
  00057	c1 e0 05	 shl	 eax, 5
  0005a	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0005d	0b c1		 or	 eax, ecx

; 72   : }

  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c3		 ret	 0
_Time_get_ltime ENDP
_TEXT	ENDS
PUBLIC	_Ltime_to_date_time
; Function compile flags: /Ogtpy
;	COMDAT _Ltime_to_date_time
_TEXT	SEGMENT
_ltime$ = 8						; size = 4
_date$ = 12						; size = 4
_time$ = 16						; size = 4
_Ltime_to_date_time PROC				; COMDAT

; 76   :     date->date_year     = (byte_t)ltime.lt_year + 1980;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ltime$[esp-4]
  00004	8b c8		 mov	 ecx, eax
  00006	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00009	80 e1 7f	 and	 cl, 127			; 0000007fH
  0000c	66 0f b6 d1	 movzx	 dx, cl
  00010	8b 4c 24 08	 mov	 ecx, DWORD PTR _date$[esp-4]
  00014	66 81 c2 bc 07	 add	 dx, 1980		; 000007bcH
  00019	66 89 11	 mov	 WORD PTR [ecx], dx

; 77   :     date->date_month    = (byte_t)ltime.lt_month;

  0001c	8b d0		 mov	 edx, eax
  0001e	c1 ea 15	 shr	 edx, 21			; 00000015H
  00021	80 e2 0f	 and	 dl, 15			; 0000000fH
  00024	88 51 02	 mov	 BYTE PTR [ecx+2], dl

; 78   :     date->date_day      = (byte_t)ltime.lt_day;

  00027	8b d0		 mov	 edx, eax
  00029	c1 ea 10	 shr	 edx, 16			; 00000010H
  0002c	80 e2 1f	 and	 dl, 31			; 0000001fH
  0002f	88 51 03	 mov	 BYTE PTR [ecx+3], dl

; 79   :     time->time_hour     = (byte_t)ltime.lt_hour;

  00032	8b 4c 24 0c	 mov	 ecx, DWORD PTR _time$[esp-4]
  00036	8b d0		 mov	 edx, eax
  00038	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0003b	80 e2 1f	 and	 dl, 31			; 0000001fH
  0003e	88 11		 mov	 BYTE PTR [ecx], dl

; 80   :     time->time_minute   = (byte_t)ltime.lt_minute;

  00040	8b d0		 mov	 edx, eax
  00042	c1 ea 05	 shr	 edx, 5

; 81   :     time->time_second   = (byte_t)ltime.lt_second * 2;

  00045	24 1f		 and	 al, 31			; 0000001fH
  00047	80 e2 3f	 and	 dl, 63			; 0000003fH
  0004a	02 c0		 add	 al, al
  0004c	88 51 01	 mov	 BYTE PTR [ecx+1], dl
  0004f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 82   : }

  00052	c3		 ret	 0
_Ltime_to_date_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GNOLGLLG@assert?5failed?$AA@		; `string'
PUBLIC	??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_06EEBGGNGI@time?4c?$AA@			; `string'
PUBLIC	_Stime_to_time
EXTRN	_Sys_halt:PROC
EXTRN	__printf:PROC
;	COMDAT ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
CONST	SEGMENT
??_C@_0O@GNOLGLLG@assert?5failed?$AA@ DB 'assert failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@ DB 'a'
	DB	'ssert: %s ', 0aH, 'file: %s', 0aH, 'line : %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEBGGNGI@time?4c?$AA@
CONST	SEGMENT
??_C@_06EEBGGNGI@time?4c?$AA@ DB 'time.c', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Stime_to_time
_TEXT	SEGMENT
_stime$ = 8						; size = 2
_time$ = 12						; size = 4
_Stime_to_time PROC					; COMDAT

; 85   : {

  00000	56		 push	 esi

; 86   :     ASSERT( time );

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _time$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 23		 jne	 SHORT $LN3@Stime_to_t
  00009	6a 56		 push	 86			; 00000056H
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_06EEBGGNGI@time?4c?$AA@
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_04CLCEDBPF@time?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0001a	e8 00 00 00 00	 call	 __printf
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00024	e8 00 00 00 00	 call	 _Sys_halt
  00029	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@Stime_to_t:

; 87   :     time->time_second   = (byte_t)stime.st_hour * 2;

  0002c	8b 44 24 08	 mov	 eax, DWORD PTR _stime$[esp]

; 88   :     time->time_minute   = (byte_t)stime.st_minute;

  00030	8b 54 24 08	 mov	 edx, DWORD PTR _stime$[esp]
  00034	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00037	24 1f		 and	 al, 31			; 0000001fH
  00039	8a c8		 mov	 cl, al
  0003b	c1 ea 05	 shr	 edx, 5
  0003e	02 c9		 add	 cl, cl
  00040	80 e2 3f	 and	 dl, 63			; 0000003fH

; 89   :     time->time_hour     = (byte_t)stime.st_hour;

  00043	88 06		 mov	 BYTE PTR [esi], al
  00045	88 4e 02	 mov	 BYTE PTR [esi+2], cl
  00048	88 56 01	 mov	 BYTE PTR [esi+1], dl

; 90   :     return time;

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi

; 91   : }

  0004e	c3		 ret	 0
_Stime_to_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_04JNIHBGGH@date?$AA@			; `string'
PUBLIC	_Sdate_to_date
;	COMDAT ??_C@_04JNIHBGGH@date?$AA@
CONST	SEGMENT
??_C@_04JNIHBGGH@date?$AA@ DB 'date', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Sdate_to_date
_TEXT	SEGMENT
_sdate$ = 8						; size = 2
_date$ = 12						; size = 4
_Sdate_to_date PROC					; COMDAT

; 94   : {

  00000	56		 push	 esi

; 95   :     ASSERT( date );

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _date$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 23		 jne	 SHORT $LN3@Sdate_to_d
  00009	6a 5f		 push	 95			; 0000005fH
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_06EEBGGNGI@time?4c?$AA@
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_04JNIHBGGH@date?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NFBECFLL@assert?3?5?$CFs?5?6file?3?5?$CFs?6line?5?3?5?$CFd?6?$AA@
  0001a	e8 00 00 00 00	 call	 __printf
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GNOLGLLG@assert?5failed?$AA@
  00024	e8 00 00 00 00	 call	 _Sys_halt
  00029	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@Sdate_to_d:

; 96   :     date->date_year     = (byte_t)sdate.sd_year + 1980;

  0002c	8b 44 24 08	 mov	 eax, DWORD PTR _sdate$[esp]
  00030	8b c8		 mov	 ecx, eax
  00032	c1 e9 09	 shr	 ecx, 9
  00035	80 e1 7f	 and	 cl, 127			; 0000007fH
  00038	66 0f b6 d1	 movzx	 dx, cl

; 97   :     date->date_month    = (byte_t)sdate.sd_month;

  0003c	8b c8		 mov	 ecx, eax
  0003e	c1 e9 05	 shr	 ecx, 5

; 98   :     date->date_day      = (byte_t)sdate.sd_day;

  00041	24 1f		 and	 al, 31			; 0000001fH
  00043	66 81 c2 bc 07	 add	 dx, 1980		; 000007bcH
  00048	80 e1 0f	 and	 cl, 15			; 0000000fH
  0004b	88 46 03	 mov	 BYTE PTR [esi+3], al
  0004e	66 89 16	 mov	 WORD PTR [esi], dx
  00051	88 4e 02	 mov	 BYTE PTR [esi+2], cl

; 99   :     return date;

  00054	8b c6		 mov	 eax, esi
  00056	5e		 pop	 esi

; 100  : }

  00057	c3		 ret	 0
_Sdate_to_date ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FNOEGDMM@?$CF02d?3?$CF02d?3?$CF02d?5?$CF?99s?$AA@ ; `string'
PUBLIC	_Time_to_string
EXTRN	__sprintf:PROC
;	COMDAT ??_C@_0BE@FNOEGDMM@?$CF02d?3?$CF02d?3?$CF02d?5?$CF?99s?$AA@
CONST	SEGMENT
??_C@_0BE@FNOEGDMM@?$CF02d?3?$CF02d?3?$CF02d?5?$CF?99s?$AA@ DB '%02d:%02d'
	DB	':%02d %-9s', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Time_to_string
_TEXT	SEGMENT
_time$ = 8						; size = 4
_str$ = 12						; size = 4
_Time_to_string PROC					; COMDAT

; 104  :     _sprintf(str,"%02d:%02d:%02d %-9s",
; 105  :         time->time_hour,time->time_minute,time->time_second,
; 106  :         week[time->time_week]);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _time$[esp-4]
  00004	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00008	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _week[ecx*4]
  0000f	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00013	56		 push	 esi
  00014	8b 74 24 0c	 mov	 esi, DWORD PTR _str$[esp]
  00018	52		 push	 edx
  00019	0f b6 50 01	 movzx	 edx, BYTE PTR [eax+1]
  0001d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FNOEGDMM@?$CF02d?3?$CF02d?3?$CF02d?5?$CF?99s?$AA@
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 __sprintf
  0002e	83 c4 18	 add	 esp, 24			; 00000018H

; 107  :     return str;

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi

; 108  : }

  00034	c3		 ret	 0
_Time_to_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@ ; `string'
PUBLIC	_Date_to_string
;	COMDAT ??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@ DB '%04d-%02d-%02d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Date_to_string
_TEXT	SEGMENT
_date$ = 8						; size = 4
_str$ = 12						; size = 4
_Date_to_string PROC					; COMDAT

; 112  :     _sprintf(str,"%04d-%02d-%02d",
; 113  :         date->date_year,date->date_month,date->date_day );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _date$[esp-4]
  00004	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00008	0f b6 50 02	 movzx	 edx, BYTE PTR [eax+2]
  0000c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000f	56		 push	 esi
  00010	8b 74 24 0c	 mov	 esi, DWORD PTR _str$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 __sprintf
  00022	83 c4 14	 add	 esp, 20			; 00000014H

; 114  :     return str;

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 115  : }

  00028	c3		 ret	 0
_Date_to_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ ; `string'
PUBLIC	_Stime_to_string
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ DB '%02d:%02d:%02d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Stime_to_string
_TEXT	SEGMENT
_stime$ = 8						; size = 2
_str$ = 12						; size = 4
_Stime_to_string PROC					; COMDAT

; 119  :     _sprintf(str,"%02d:%02d:%02d",
; 120  :         stime.st_hour,stime.st_minute,stime.st_second );

  00000	0f b7 44 24 04	 movzx	 eax, WORD PTR _stime$[esp-4]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR _str$[esp]
  0000a	8b c8		 mov	 ecx, eax
  0000c	8b d0		 mov	 edx, eax
  0000e	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00011	51		 push	 ecx
  00012	c1 ea 05	 shr	 edx, 5
  00015	83 e2 3f	 and	 edx, 63			; 0000003fH
  00018	52		 push	 edx
  00019	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 __sprintf
  00028	83 c4 14	 add	 esp, 20			; 00000014H

; 121  :     return str;

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 122  : }

  0002e	c3		 ret	 0
_Stime_to_string ENDP
_TEXT	ENDS
PUBLIC	_Sdate_to_string
; Function compile flags: /Ogtpy
;	COMDAT _Sdate_to_string
_TEXT	SEGMENT
_sdate$ = 8						; size = 2
_str$ = 12						; size = 4
_Sdate_to_string PROC					; COMDAT

; 126  :     _sprintf(str,"%04d-%02d-%02d",
; 127  :         sdate.sd_year + 1980,sdate.sd_month,sdate.sd_day);

  00000	0f b7 44 24 04	 movzx	 eax, WORD PTR _sdate$[esp-4]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR _str$[esp]
  0000a	8b c8		 mov	 ecx, eax
  0000c	8b d0		 mov	 edx, eax
  0000e	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00011	51		 push	 ecx
  00012	c1 ea 05	 shr	 edx, 5
  00015	83 e2 0f	 and	 edx, 15			; 0000000fH
  00018	52		 push	 edx
  00019	c1 e8 09	 shr	 eax, 9
  0001c	05 bc 07 00 00	 add	 eax, 1980		; 000007bcH
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 __sprintf
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 128  :     return str;

  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi

; 129  : }

  00033	c3		 ret	 0
_Sdate_to_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@ ; `string'
PUBLIC	_Ltime_to_string
;	COMDAT ??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@ DB '%'
	DB	'04d-%02d-%02d %02d:%02d:%02d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Ltime_to_string
_TEXT	SEGMENT
_ltime$ = 8						; size = 4
_str$ = 12						; size = 4
_Ltime_to_string PROC					; COMDAT

; 133  :     _sprintf(str,"%04d-%02d-%02d %02d:%02d:%02d",
; 134  :         ltime.lt_year + 1980,ltime.lt_month,ltime.lt_day,
; 135  :         ltime.lt_hour,ltime.lt_minute,ltime.lt_second*2);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ltime$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _str$[esp]
  00009	8b c8		 mov	 ecx, eax
  0000b	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0000e	03 c9		 add	 ecx, ecx
  00010	51		 push	 ecx
  00011	8b d0		 mov	 edx, eax
  00013	c1 ea 05	 shr	 edx, 5
  00016	8b c8		 mov	 ecx, eax
  00018	83 e2 3f	 and	 edx, 63			; 0000003fH
  0001b	52		 push	 edx
  0001c	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0001f	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00022	51		 push	 ecx
  00023	8b d0		 mov	 edx, eax
  00025	8b c8		 mov	 ecx, eax
  00027	c1 ea 10	 shr	 edx, 16			; 00000010H
  0002a	83 e2 1f	 and	 edx, 31			; 0000001fH
  0002d	52		 push	 edx
  0002e	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00031	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00034	51		 push	 ecx
  00035	c1 e8 19	 shr	 eax, 25			; 00000019H
  00038	05 bc 07 00 00	 add	 eax, 1980		; 000007bcH
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 __sprintf
  00049	83 c4 20	 add	 esp, 32			; 00000020H

; 136  :     return str;

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 137  : }

  0004f	c3		 ret	 0
_Ltime_to_string ENDP
_TEXT	ENDS
END
