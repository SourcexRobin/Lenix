; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	E:\SourcexStudio\Lenix\Lenix\src\gui\graph.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__real@3fe0000000000000
PUBLIC	_Graph_clip_line_rect
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3fe0000000000000
; File e:\sourcexstudio\lenix\lenix\src\gui\graph.c
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _Graph_clip_line_rect
_TEXT	SEGMENT
_left$ = -20						; size = 4
_right$ = -16						; size = 4
_p2code$ = -12						; size = 4
_bottom$ = -8						; size = 4
_top$ = -4						; size = 4
tv407 = 8						; size = 4
tv405 = 8						; size = 4
tv398 = 8						; size = 4
tv396 = 8						; size = 4
tv380 = 8						; size = 4
tv366 = 8						; size = 4
tv349 = 8						; size = 4
tv333 = 8						; size = 4
_x1$ = 8						; size = 4
tv426 = 12						; size = 4
tv424 = 12						; size = 4
tv418 = 12						; size = 4
tv413 = 12						; size = 4
_y1$ = 12						; size = 4
tv663 = 16						; size = 4
tv650 = 16						; size = 4
tv598 = 16						; size = 4
tv585 = 16						; size = 4
tv386 = 16						; size = 4
tv372 = 16						; size = 4
tv356 = 16						; size = 4
tv342 = 16						; size = 4
_x2$ = 16						; size = 4
tv681 = 20						; size = 4
_y2$ = 20						; size = 4
tv700 = 24						; size = 4
tv698 = 24						; size = 4
tv691 = 24						; size = 4
tv688 = 24						; size = 4
tv684 = 24						; size = 4
tv680 = 24						; size = 4
tv678 = 24						; size = 4
tv672 = 24						; size = 4
tv670 = 24						; size = 4
tv657 = 24						; size = 4
tv644 = 24						; size = 4
tv592 = 24						; size = 4
tv579 = 24						; size = 4
_rect$ = 24						; size = 4
_nx1$ = 28						; size = 4
_ny1$ = 32						; size = 4
_nx2$ = 36						; size = 4
_ny2$ = 40						; size = 4
_Graph_clip_line_rect PROC				; COMDAT

; 15   : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 16   :    // 创建并设置起点p1和终点p2的位置代码p1code和p2code   
; 17   :    int p1code = 0;  
; 18   :    int p2code = 0;  
; 19   :  
; 20   :    int left,top,right,bottom;
; 21   : 
; 22   :    left     = rect->rect_left;

  00003	8b 44 24 28	 mov	 eax, DWORD PTR _rect$[esp+16]

; 23   :    top      = rect->rect_top;

  00007	0f bf 50 02	 movsx	 edx, WORD PTR [eax+2]
  0000b	53		 push	 ebx
  0000c	0f bf 18	 movsx	 ebx, WORD PTR [eax]
  0000f	55		 push	 ebp

; 24   :    right    = rect->rect_right;

  00010	0f bf 68 04	 movsx	 ebp, WORD PTR [eax+4]

; 25   :    bottom   = rect->rect_bottom;

  00014	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  00018	56		 push	 esi

; 26   : 
; 27   :    if (y1 < top)  

  00019	8b 74 24 28	 mov	 esi, DWORD PTR _y1$[esp+28]
  0001d	33 c9		 xor	 ecx, ecx
  0001f	3b f2		 cmp	 esi, edx
  00021	57		 push	 edi
  00022	89 4c 24 18	 mov	 DWORD PTR _p2code$[esp+36], ecx
  00026	89 5c 24 10	 mov	 DWORD PTR _left$[esp+36], ebx
  0002a	89 54 24 20	 mov	 DWORD PTR _top$[esp+36], edx
  0002e	89 6c 24 14	 mov	 DWORD PTR _right$[esp+36], ebp
  00032	89 44 24 1c	 mov	 DWORD PTR _bottom$[esp+36], eax
  00036	7d 07		 jge	 SHORT $LN54@Graph_clip

; 28   :        p1code |= 8;  

  00038	b9 08 00 00 00	 mov	 ecx, 8
  0003d	eb 09		 jmp	 SHORT $LN52@Graph_clip
$LN54@Graph_clip:

; 29   :    else if (y1 > bottom)  

  0003f	3b f0		 cmp	 esi, eax
  00041	7e 05		 jle	 SHORT $LN52@Graph_clip

; 30   :        p1code |= 4;  

  00043	b9 04 00 00 00	 mov	 ecx, 4
$LN52@Graph_clip:

; 31   :  
; 32   :    if (x1 < left)  

  00048	8b 7c 24 28	 mov	 edi, DWORD PTR _x1$[esp+32]
  0004c	3b fb		 cmp	 edi, ebx
  0004e	7d 05		 jge	 SHORT $LN51@Graph_clip

; 33   :        p1code |= 1;  

  00050	83 c9 01	 or	 ecx, 1
  00053	eb 07		 jmp	 SHORT $LN58@Graph_clip
$LN51@Graph_clip:

; 34   :    else if (x1 > right)  

  00055	3b fd		 cmp	 edi, ebp
  00057	7e 03		 jle	 SHORT $LN58@Graph_clip

; 35   :        p1code |= 2;  

  00059	83 c9 02	 or	 ecx, 2
$LN58@Graph_clip:

; 36   :  
; 37   :    if (y2 < top)  

  0005c	8b 6c 24 34	 mov	 ebp, DWORD PTR _y2$[esp+32]
  00060	3b ea		 cmp	 ebp, edx
  00062	7d 0a		 jge	 SHORT $LN48@Graph_clip

; 38   :        p2code |= 8;  

  00064	c7 44 24 18 08
	00 00 00	 mov	 DWORD PTR _p2code$[esp+36], 8
  0006c	eb 0c		 jmp	 SHORT $LN46@Graph_clip
$LN48@Graph_clip:

; 39   :    else if (y2 > bottom)  

  0006e	3b e8		 cmp	 ebp, eax
  00070	7e 08		 jle	 SHORT $LN46@Graph_clip

; 40   :        p2code |= 4;  

  00072	c7 44 24 18 04
	00 00 00	 mov	 DWORD PTR _p2code$[esp+36], 4
$LN46@Graph_clip:

; 41   :  
; 42   :    if (x2 < left)  

  0007a	8b 5c 24 30	 mov	 ebx, DWORD PTR _x2$[esp+32]
  0007e	3b 5c 24 10	 cmp	 ebx, DWORD PTR _left$[esp+36]
  00082	7d 07		 jge	 SHORT $LN45@Graph_clip

; 43   :        p2code |= 1;  

  00084	83 4c 24 18 01	 or	 DWORD PTR _p2code$[esp+36], 1
  00089	eb 0b		 jmp	 SHORT $LN66@Graph_clip
$LN45@Graph_clip:

; 44   :    else if (x2 > right)  

  0008b	3b 5c 24 14	 cmp	 ebx, DWORD PTR _right$[esp+36]
  0008f	7e 05		 jle	 SHORT $LN66@Graph_clip

; 45   :        p2code |= 2;  

  00091	83 4c 24 18 02	 or	 DWORD PTR _p2code$[esp+36], 2
$LN66@Graph_clip:

; 46   :  
; 47   :    // 过滤同侧情况   
; 48   :    if ((p1code & p2code))  

  00096	85 4c 24 18	 test	 DWORD PTR _p2code$[esp+36], ecx

; 49   :        return 0;  

  0009a	0f 85 32 03 00
	00		 jne	 $LN1@Graph_clip

; 50   :  
; 51   :    // 完全保留   
; 52   :    if (p1code == 0 && p2code == 0)  

  000a0	85 c9		 test	 ecx, ecx
  000a2	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  000a8	75 2e		 jne	 SHORT $LN41@Graph_clip
  000aa	83 7c 24 18 00	 cmp	 DWORD PTR _p2code$[esp+36], 0
  000af	75 30		 jne	 SHORT $LN59@Graph_clip

; 53   :    {  
; 54   :        *nx1 = x1;  

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR _nx1$[esp+32]
  000b5	dd d8		 fstp	 ST(0)

; 55   :        *ny1 = y1;  

  000b7	8b 4c 24 40	 mov	 ecx, DWORD PTR _ny1$[esp+32]

; 56   :        *nx2 = x2;  

  000bb	8b 54 24 44	 mov	 edx, DWORD PTR _nx2$[esp+32]
  000bf	89 38		 mov	 DWORD PTR [eax], edi

; 57   :        *ny2 = y2;  

  000c1	8b 44 24 48	 mov	 eax, DWORD PTR _ny2$[esp+32]
  000c5	89 31		 mov	 DWORD PTR [ecx], esi
  000c7	89 1a		 mov	 DWORD PTR [edx], ebx
  000c9	89 28		 mov	 DWORD PTR [eax], ebp
$LN139@Graph_clip:
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp

; 58   :        return 1;  

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	5b		 pop	 ebx

; 204  : } 

  000d4	83 c4 14	 add	 esp, 20			; 00000014H
  000d7	c3		 ret	 0
$LN41@Graph_clip:

; 59   :    }  
; 60   :      
; 61   :    // 计算np1的坐标*nx1, *ny1   
; 62   :    switch(p1code)  

  000d8	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000db	0f 87 87 02 00
	00		 ja	 $LN60@Graph_clip
$LN59@Graph_clip:
  000e1	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN140@Graph_clip[ecx*4]
$LN38@Graph_clip:

; 63   :    {  
; 64   :    case 0: // C   
; 65   :        *nx1 = x1;  

  000e8	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]

; 66   :        *ny1 = y1;  

  000ec	8b 54 24 40	 mov	 edx, DWORD PTR _ny1$[esp+32]
  000f0	89 39		 mov	 DWORD PTR [ecx], edi
  000f2	89 32		 mov	 DWORD PTR [edx], esi

; 67   :        break;  

  000f4	e9 6f 02 00 00	 jmp	 $LN60@Graph_clip
$LN37@Graph_clip:

; 68   :    case 8: // N   
; 69   :        *ny1 = top;  

  000f9	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  000fd	89 10		 mov	 DWORD PTR [eax], edx

; 70   :        *nx1 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  000ff	2b d6		 sub	 edx, esi
  00101	8b cb		 mov	 ecx, ebx
  00103	2b cf		 sub	 ecx, edi
  00105	0f af d1	 imul	 edx, ecx
  00108	89 54 24 38	 mov	 DWORD PTR tv700[esp+32], edx
  0010c	8b d5		 mov	 edx, ebp
  0010e	2b d6		 sub	 edx, esi
  00110	db 44 24 38	 fild	 DWORD PTR tv700[esp+32]
  00114	89 54 24 38	 mov	 DWORD PTR tv698[esp+32], edx
  00118	db 44 24 38	 fild	 DWORD PTR tv698[esp+32]
  0011c	de f9		 fdivp	 ST(1), ST(0)
  0011e	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00122	d8 c1		 fadd	 ST(0), ST(1)
  00124	e8 00 00 00 00	 call	 __ftol2_sse
  00129	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]

; 71   :        break;  

  0012d	e9 34 02 00 00	 jmp	 $LN132@Graph_clip
$LN36@Graph_clip:

; 72   :    case 4: // S   
; 73   :        *ny1 = bottom;  

  00132	8b 54 24 40	 mov	 edx, DWORD PTR _ny1$[esp+32]
  00136	89 02		 mov	 DWORD PTR [edx], eax

; 74   :        *nx1 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00138	8b cb		 mov	 ecx, ebx
  0013a	2b c6		 sub	 eax, esi
  0013c	2b cf		 sub	 ecx, edi
  0013e	0f af c1	 imul	 eax, ecx
  00141	89 44 24 38	 mov	 DWORD PTR tv691[esp+32], eax
  00145	8b d5		 mov	 edx, ebp
  00147	2b d6		 sub	 edx, esi
  00149	db 44 24 38	 fild	 DWORD PTR tv691[esp+32]
  0014d	89 54 24 38	 mov	 DWORD PTR tv688[esp+32], edx
  00151	db 44 24 38	 fild	 DWORD PTR tv688[esp+32]
  00155	de f9		 fdivp	 ST(1), ST(0)
  00157	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  0015b	d8 c1		 fadd	 ST(0), ST(1)
  0015d	e8 00 00 00 00	 call	 __ftol2_sse
  00162	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]

; 75   :        break;  

  00166	e9 fb 01 00 00	 jmp	 $LN132@Graph_clip
$LN35@Graph_clip:

; 76   :    case 1: // W   
; 77   :        *nx1 = left;  

  0016b	8b 54 24 3c	 mov	 edx, DWORD PTR _nx1$[esp+32]
  0016f	8b 44 24 10	 mov	 eax, DWORD PTR _left$[esp+36]
  00173	89 02		 mov	 DWORD PTR [edx], eax

; 78   :        *ny1 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00175	8b cd		 mov	 ecx, ebp
  00177	2b c7		 sub	 eax, edi
  00179	2b ce		 sub	 ecx, esi
  0017b	0f af c1	 imul	 eax, ecx
  0017e	89 44 24 38	 mov	 DWORD PTR tv680[esp+32], eax
  00182	8b d3		 mov	 edx, ebx
  00184	2b d7		 sub	 edx, edi
  00186	db 44 24 38	 fild	 DWORD PTR tv680[esp+32]
  0018a	89 54 24 38	 mov	 DWORD PTR tv678[esp+32], edx
  0018e	db 44 24 38	 fild	 DWORD PTR tv678[esp+32]
  00192	de f9		 fdivp	 ST(1), ST(0)

; 79   :        break;  

  00194	e9 be 01 00 00	 jmp	 $LN133@Graph_clip
$LN34@Graph_clip:

; 80   :    case 2: // E   
; 81   :        *nx1 = right;  

  00199	8b 54 24 3c	 mov	 edx, DWORD PTR _nx1$[esp+32]
  0019d	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  001a1	89 02		 mov	 DWORD PTR [edx], eax

; 82   :        *ny1 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  001a3	8b cd		 mov	 ecx, ebp
  001a5	2b c7		 sub	 eax, edi
  001a7	2b ce		 sub	 ecx, esi
  001a9	0f af c1	 imul	 eax, ecx
  001ac	89 44 24 38	 mov	 DWORD PTR tv672[esp+32], eax
  001b0	8b d3		 mov	 edx, ebx
  001b2	2b d7		 sub	 edx, edi
  001b4	db 44 24 38	 fild	 DWORD PTR tv672[esp+32]
  001b8	89 54 24 38	 mov	 DWORD PTR tv670[esp+32], edx
  001bc	db 44 24 38	 fild	 DWORD PTR tv670[esp+32]
  001c0	de f9		 fdivp	 ST(1), ST(0)

; 83   :        break;  

  001c2	e9 90 01 00 00	 jmp	 $LN133@Graph_clip
$LN33@Graph_clip:

; 84   :    case 9: // NW   
; 85   :        // 先和求N的一样   
; 86   :        *ny1 = top;  

  001c7	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  001cb	89 10		 mov	 DWORD PTR [eax], edx

; 87   :        *nx1 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  001cd	8b c3		 mov	 eax, ebx
  001cf	2b c7		 sub	 eax, edi
  001d1	2b d6		 sub	 edx, esi
  001d3	0f af d0	 imul	 edx, eax
  001d6	89 54 24 30	 mov	 DWORD PTR tv663[esp+32], edx
  001da	8b cd		 mov	 ecx, ebp
  001dc	2b ce		 sub	 ecx, esi
  001de	db 44 24 30	 fild	 DWORD PTR tv663[esp+32]
  001e2	89 4c 24 38	 mov	 DWORD PTR tv684[esp+32], ecx
  001e6	89 44 24 34	 mov	 DWORD PTR tv681[esp+32], eax
  001ea	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  001ee	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  001f2	d8 c1		 fadd	 ST(0), ST(1)
  001f4	e8 00 00 00 00	 call	 __ftol2_sse
  001f9	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]
  001fd	89 01		 mov	 DWORD PTR [ecx], eax

; 88   :  
; 89   :        // 然后判断结果   
; 90   :        if (*nx1 < left || *nx1 > right) // 上面的假设错误，需要算与左边线的交点   

  001ff	8b 4c 24 10	 mov	 ecx, DWORD PTR _left$[esp+36]
  00203	3b c1		 cmp	 eax, ecx
  00205	7c 0a		 jl	 SHORT $LN31@Graph_clip
  00207	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  0020b	0f 8e 57 01 00
	00		 jle	 $LN60@Graph_clip
$LN31@Graph_clip:

; 91   :        {  
; 92   :            *nx1 = left;  

  00211	8b 54 24 3c	 mov	 edx, DWORD PTR _nx1$[esp+32]
  00215	89 0a		 mov	 DWORD PTR [edx], ecx

; 93   :            *ny1 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00217	2b cf		 sub	 ecx, edi
  00219	0f af 4c 24 38	 imul	 ecx, DWORD PTR tv684[esp+32]
  0021e	89 4c 24 38	 mov	 DWORD PTR tv657[esp+32], ecx
  00222	db 44 24 38	 fild	 DWORD PTR tv657[esp+32]

; 94   :        }  
; 95   :        break;  

  00226	e9 28 01 00 00	 jmp	 $LN134@Graph_clip
$LN30@Graph_clip:

; 96   :    case 10: // NE   
; 97   :        *ny1 = top;  

  0022b	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  0022f	89 10		 mov	 DWORD PTR [eax], edx

; 98   :        *nx1 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00231	8b c3		 mov	 eax, ebx
  00233	2b c7		 sub	 eax, edi
  00235	2b d6		 sub	 edx, esi
  00237	0f af d0	 imul	 edx, eax
  0023a	89 54 24 30	 mov	 DWORD PTR tv650[esp+32], edx
  0023e	8b cd		 mov	 ecx, ebp
  00240	2b ce		 sub	 ecx, esi
  00242	db 44 24 30	 fild	 DWORD PTR tv650[esp+32]
  00246	89 4c 24 38	 mov	 DWORD PTR tv684[esp+32], ecx
  0024a	89 44 24 34	 mov	 DWORD PTR tv681[esp+32], eax
  0024e	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  00252	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00256	d8 c1		 fadd	 ST(0), ST(1)
  00258	e8 00 00 00 00	 call	 __ftol2_sse

; 99   :  
; 100  :        if (*nx1 < left || *nx1 > right)  

  0025d	3b 44 24 10	 cmp	 eax, DWORD PTR _left$[esp+36]
  00261	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]
  00265	89 01		 mov	 DWORD PTR [ecx], eax
  00267	7c 0a		 jl	 SHORT $LN28@Graph_clip
  00269	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  0026d	0f 8e f5 00 00
	00		 jle	 $LN60@Graph_clip
$LN28@Graph_clip:

; 101  :        {  
; 102  :            *nx1 = right;  

  00273	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  00277	8b d1		 mov	 edx, ecx
  00279	89 02		 mov	 DWORD PTR [edx], eax

; 103  :            *ny1 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  0027b	2b c7		 sub	 eax, edi
  0027d	0f af 44 24 38	 imul	 eax, DWORD PTR tv684[esp+32]
  00282	89 44 24 38	 mov	 DWORD PTR tv644[esp+32], eax
  00286	db 44 24 38	 fild	 DWORD PTR tv644[esp+32]

; 104  :        }  
; 105  :        break;  

  0028a	e9 c4 00 00 00	 jmp	 $LN134@Graph_clip
$LN27@Graph_clip:

; 106  :    case 6: // SE   
; 107  :        *ny1 = bottom;  

  0028f	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  00293	8b 54 24 1c	 mov	 edx, DWORD PTR _bottom$[esp+36]
  00297	89 10		 mov	 DWORD PTR [eax], edx

; 108  :        *nx1 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00299	8b c3		 mov	 eax, ebx
  0029b	2b c7		 sub	 eax, edi
  0029d	2b d6		 sub	 edx, esi
  0029f	0f af d0	 imul	 edx, eax
  002a2	89 54 24 30	 mov	 DWORD PTR tv598[esp+32], edx
  002a6	8b cd		 mov	 ecx, ebp
  002a8	2b ce		 sub	 ecx, esi
  002aa	db 44 24 30	 fild	 DWORD PTR tv598[esp+32]
  002ae	89 4c 24 38	 mov	 DWORD PTR tv684[esp+32], ecx
  002b2	89 44 24 34	 mov	 DWORD PTR tv681[esp+32], eax
  002b6	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  002ba	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  002be	d8 c1		 fadd	 ST(0), ST(1)
  002c0	e8 00 00 00 00	 call	 __ftol2_sse

; 109  :  
; 110  :        if (*nx1 < left || *nx1 > right)  

  002c5	3b 44 24 10	 cmp	 eax, DWORD PTR _left$[esp+36]
  002c9	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]
  002cd	89 01		 mov	 DWORD PTR [ecx], eax
  002cf	7c 0a		 jl	 SHORT $LN25@Graph_clip
  002d1	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  002d5	0f 8e 8d 00 00
	00		 jle	 $LN60@Graph_clip
$LN25@Graph_clip:

; 111  :        {  
; 112  :             *nx1 = right;  

  002db	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  002df	8b d1		 mov	 edx, ecx
  002e1	89 02		 mov	 DWORD PTR [edx], eax

; 113  :             *ny1 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  002e3	2b c7		 sub	 eax, edi
  002e5	0f af 44 24 38	 imul	 eax, DWORD PTR tv684[esp+32]
  002ea	89 44 24 38	 mov	 DWORD PTR tv592[esp+32], eax
  002ee	db 44 24 38	 fild	 DWORD PTR tv592[esp+32]

; 114  :        }  
; 115  :        break;  

  002f2	eb 5f		 jmp	 SHORT $LN134@Graph_clip
$LN24@Graph_clip:

; 116  :     case 5: // SW   
; 117  :         *ny1 = bottom;  

  002f4	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  002f8	8b 54 24 1c	 mov	 edx, DWORD PTR _bottom$[esp+36]
  002fc	89 10		 mov	 DWORD PTR [eax], edx

; 118  :         *nx1 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  002fe	8b c3		 mov	 eax, ebx
  00300	2b c7		 sub	 eax, edi
  00302	2b d6		 sub	 edx, esi
  00304	0f af d0	 imul	 edx, eax
  00307	89 54 24 30	 mov	 DWORD PTR tv585[esp+32], edx
  0030b	8b cd		 mov	 ecx, ebp
  0030d	2b ce		 sub	 ecx, esi
  0030f	db 44 24 30	 fild	 DWORD PTR tv585[esp+32]
  00313	89 4c 24 38	 mov	 DWORD PTR tv684[esp+32], ecx
  00317	89 44 24 34	 mov	 DWORD PTR tv681[esp+32], eax
  0031b	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  0031f	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00323	d8 c1		 fadd	 ST(0), ST(1)
  00325	e8 00 00 00 00	 call	 __ftol2_sse
  0032a	8b 4c 24 3c	 mov	 ecx, DWORD PTR _nx1$[esp+32]
  0032e	89 01		 mov	 DWORD PTR [ecx], eax

; 119  :   
; 120  :         if (*nx1 < left || *nx1 > right)  

  00330	8b 4c 24 10	 mov	 ecx, DWORD PTR _left$[esp+36]
  00334	3b c1		 cmp	 eax, ecx
  00336	7c 06		 jl	 SHORT $LN22@Graph_clip
  00338	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  0033c	7e 2a		 jle	 SHORT $LN60@Graph_clip
$LN22@Graph_clip:

; 121  :         {  
; 122  :             *nx1 = left;  

  0033e	8b 54 24 3c	 mov	 edx, DWORD PTR _nx1$[esp+32]
  00342	89 0a		 mov	 DWORD PTR [edx], ecx

; 123  :             *ny1 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00344	2b cf		 sub	 ecx, edi
  00346	0f af 4c 24 38	 imul	 ecx, DWORD PTR tv684[esp+32]
  0034b	89 4c 24 38	 mov	 DWORD PTR tv579[esp+32], ecx
  0034f	db 44 24 38	 fild	 DWORD PTR tv579[esp+32]
$LN134@Graph_clip:
  00353	da 74 24 34	 fidiv	 DWORD PTR tv681[esp+32]
$LN133@Graph_clip:
  00357	da 44 24 2c	 fiadd	 DWORD PTR _y1$[esp+32]
  0035b	d8 c1		 fadd	 ST(0), ST(1)
  0035d	e8 00 00 00 00	 call	 __ftol2_sse
  00362	8b 4c 24 40	 mov	 ecx, DWORD PTR _ny1$[esp+32]
$LN132@Graph_clip:
  00366	89 01		 mov	 DWORD PTR [ecx], eax
$LN60@Graph_clip:

; 124  :         }  
; 125  :         break;  
; 126  :     }  
; 127  :   
; 128  :     // 计算np2的坐标*nx2, *ny2   
; 129  :     switch(p2code)  

  00368	8b 44 24 18	 mov	 eax, DWORD PTR _p2code$[esp+36]
  0036c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0036f	77 13		 ja	 SHORT $LN130@Graph_clip
  00371	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN141@Graph_clip[eax*4]
$LN103@Graph_clip:

; 130  :     {  
; 131  :     case 0: // C   
; 132  :         *nx2 = x2;  

  00378	8b 54 24 44	 mov	 edx, DWORD PTR _nx2$[esp+32]

; 133  :         *ny2 = y2;  

  0037c	8b 44 24 48	 mov	 eax, DWORD PTR _ny2$[esp+32]
  00380	89 1a		 mov	 DWORD PTR [edx], ebx
  00382	89 28		 mov	 DWORD PTR [eax], ebp
$LN130@Graph_clip:

; 187  :   
; 188  :         if (*nx2 < left || *nx2 > right)  

  00384	dd d8		 fstp	 ST(0)
$LN63@Graph_clip:

; 192  :         }  
; 193  :         break;  
; 194  :     }  
; 195  :   
; 196  :     // 过滤一种直线与矩形不相交的特殊情况   
; 197  :     if (*nx1 < left   || *nx1 > right   || *ny1 < top    || *ny1 > bottom  ||  
; 198  :         *nx2 < left   || *nx2 > right   || *ny2 < top    || *ny2 > bottom)  

  00386	8b 54 24 3c	 mov	 edx, DWORD PTR _nx1$[esp+32]
  0038a	8b 02		 mov	 eax, DWORD PTR [edx]
  0038c	8b 4c 24 10	 mov	 ecx, DWORD PTR _left$[esp+36]
  00390	3b c1		 cmp	 eax, ecx
  00392	7c 3e		 jl	 SHORT $LN1@Graph_clip
  00394	8b 74 24 14	 mov	 esi, DWORD PTR _right$[esp+36]
  00398	3b c6		 cmp	 eax, esi
  0039a	7f 36		 jg	 SHORT $LN1@Graph_clip
  0039c	8b 44 24 40	 mov	 eax, DWORD PTR _ny1$[esp+32]
  003a0	8b 00		 mov	 eax, DWORD PTR [eax]
  003a2	8b 54 24 20	 mov	 edx, DWORD PTR _top$[esp+36]
  003a6	3b c2		 cmp	 eax, edx
  003a8	7c 28		 jl	 SHORT $LN1@Graph_clip
  003aa	8b 7c 24 1c	 mov	 edi, DWORD PTR _bottom$[esp+36]
  003ae	3b c7		 cmp	 eax, edi
  003b0	7f 20		 jg	 SHORT $LN1@Graph_clip
  003b2	8b 44 24 44	 mov	 eax, DWORD PTR _nx2$[esp+32]
  003b6	8b 00		 mov	 eax, DWORD PTR [eax]
  003b8	3b c1		 cmp	 eax, ecx
  003ba	7c 16		 jl	 SHORT $LN1@Graph_clip
  003bc	3b c6		 cmp	 eax, esi
  003be	7f 12		 jg	 SHORT $LN1@Graph_clip
  003c0	8b 4c 24 48	 mov	 ecx, DWORD PTR _ny2$[esp+32]
  003c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  003c6	3b c2		 cmp	 eax, edx
  003c8	7c 08		 jl	 SHORT $LN1@Graph_clip
  003ca	3b c7		 cmp	 eax, edi

; 201  :     }  
; 202  :   
; 203  :     return 1;  

  003cc	0f 8e f9 fc ff
	ff		 jle	 $LN139@Graph_clip
$LN1@Graph_clip:
  003d2	5f		 pop	 edi
  003d3	5e		 pop	 esi
  003d4	5d		 pop	 ebp

; 199  :     {  
; 200  :         return 0;  

  003d5	33 c0		 xor	 eax, eax
  003d7	5b		 pop	 ebx

; 204  : } 

  003d8	83 c4 14	 add	 esp, 20			; 00000014H
  003db	c3		 ret	 0
$LN18@Graph_clip:

; 134  :         break;  
; 135  :     case 8: // N   
; 136  :         *ny2 = top;  

  003dc	8b 44 24 20	 mov	 eax, DWORD PTR _top$[esp+36]
  003e0	8b 4c 24 48	 mov	 ecx, DWORD PTR _ny2$[esp+32]
  003e4	89 01		 mov	 DWORD PTR [ecx], eax

; 137  :         *nx2 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  003e6	2b c6		 sub	 eax, esi
  003e8	2b df		 sub	 ebx, edi
  003ea	0f af c3	 imul	 eax, ebx
  003ed	89 44 24 2c	 mov	 DWORD PTR tv426[esp+32], eax
  003f1	2b ee		 sub	 ebp, esi
  003f3	db 44 24 2c	 fild	 DWORD PTR tv426[esp+32]
  003f7	89 6c 24 2c	 mov	 DWORD PTR tv424[esp+32], ebp
  003fb	db 44 24 2c	 fild	 DWORD PTR tv424[esp+32]
$LN136@Graph_clip:
  003ff	de f9		 fdivp	 ST(1), ST(0)
  00401	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00405	de c1		 faddp	 ST(1), ST(0)
  00407	e8 00 00 00 00	 call	 __ftol2_sse
  0040c	8b 54 24 44	 mov	 edx, DWORD PTR _nx2$[esp+32]
  00410	89 02		 mov	 DWORD PTR [edx], eax

; 138  :         break;  

  00412	e9 6f ff ff ff	 jmp	 $LN63@Graph_clip
$LN17@Graph_clip:

; 139  :     case 4: // S   
; 140  :         *ny2 = bottom;  

  00417	8b 44 24 1c	 mov	 eax, DWORD PTR _bottom$[esp+36]
  0041b	8b 4c 24 48	 mov	 ecx, DWORD PTR _ny2$[esp+32]
  0041f	89 01		 mov	 DWORD PTR [ecx], eax

; 141  :         *nx2 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00421	2b c6		 sub	 eax, esi
  00423	2b df		 sub	 ebx, edi
  00425	0f af c3	 imul	 eax, ebx
  00428	89 44 24 2c	 mov	 DWORD PTR tv418[esp+32], eax
  0042c	2b ee		 sub	 ebp, esi
  0042e	db 44 24 2c	 fild	 DWORD PTR tv418[esp+32]
  00432	89 6c 24 2c	 mov	 DWORD PTR tv413[esp+32], ebp
  00436	db 44 24 2c	 fild	 DWORD PTR tv413[esp+32]

; 142  :         break;  

  0043a	eb c3		 jmp	 SHORT $LN136@Graph_clip
$LN16@Graph_clip:

; 143  :     case 1: // W   
; 144  :         *nx2 = left;  

  0043c	8b 4c 24 44	 mov	 ecx, DWORD PTR _nx2$[esp+32]
  00440	8b 44 24 10	 mov	 eax, DWORD PTR _left$[esp+36]
  00444	89 01		 mov	 DWORD PTR [ecx], eax

; 145  :         *ny2 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00446	2b c7		 sub	 eax, edi
  00448	2b ee		 sub	 ebp, esi
  0044a	0f af c5	 imul	 eax, ebp
  0044d	89 44 24 28	 mov	 DWORD PTR tv407[esp+32], eax
  00451	2b df		 sub	 ebx, edi
  00453	db 44 24 28	 fild	 DWORD PTR tv407[esp+32]
  00457	89 5c 24 28	 mov	 DWORD PTR tv405[esp+32], ebx
  0045b	db 44 24 28	 fild	 DWORD PTR tv405[esp+32]
  0045f	de f9		 fdivp	 ST(1), ST(0)
  00461	da 44 24 2c	 fiadd	 DWORD PTR _y1$[esp+32]
  00465	de c1		 faddp	 ST(1), ST(0)
  00467	e8 00 00 00 00	 call	 __ftol2_sse
  0046c	8b 54 24 48	 mov	 edx, DWORD PTR _ny2$[esp+32]
  00470	89 02		 mov	 DWORD PTR [edx], eax
  00472	e9 0f ff ff ff	 jmp	 $LN63@Graph_clip
$LN15@Graph_clip:

; 146  :         break;  
; 147  :     case 2: // E   
; 148  :         *nx2 = right;  

  00477	8b 4c 24 44	 mov	 ecx, DWORD PTR _nx2$[esp+32]
  0047b	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  0047f	89 01		 mov	 DWORD PTR [ecx], eax

; 149  :         *ny2 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00481	2b c7		 sub	 eax, edi
  00483	2b ee		 sub	 ebp, esi
  00485	0f af c5	 imul	 eax, ebp
  00488	89 44 24 28	 mov	 DWORD PTR tv398[esp+32], eax
  0048c	2b df		 sub	 ebx, edi
  0048e	db 44 24 28	 fild	 DWORD PTR tv398[esp+32]
  00492	89 5c 24 28	 mov	 DWORD PTR tv396[esp+32], ebx
  00496	db 44 24 28	 fild	 DWORD PTR tv396[esp+32]
  0049a	de f9		 fdivp	 ST(1), ST(0)
  0049c	da 44 24 2c	 fiadd	 DWORD PTR _y1$[esp+32]
  004a0	de c1		 faddp	 ST(1), ST(0)
  004a2	e8 00 00 00 00	 call	 __ftol2_sse
  004a7	8b 54 24 48	 mov	 edx, DWORD PTR _ny2$[esp+32]
  004ab	89 02		 mov	 DWORD PTR [edx], eax
  004ad	e9 d4 fe ff ff	 jmp	 $LN63@Graph_clip
$LN14@Graph_clip:

; 150  :         break;  
; 151  :     case 9: // NW   
; 152  :         
; 153  :         // 先和求N的一样   
; 154  :         *ny2 = top;  

  004b2	8b 4c 24 48	 mov	 ecx, DWORD PTR _ny2$[esp+32]
  004b6	8b 44 24 20	 mov	 eax, DWORD PTR _top$[esp+36]
  004ba	89 01		 mov	 DWORD PTR [ecx], eax

; 155  :         *nx2 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  004bc	2b df		 sub	 ebx, edi
  004be	2b c6		 sub	 eax, esi
  004c0	0f af c3	 imul	 eax, ebx
  004c3	89 44 24 30	 mov	 DWORD PTR tv386[esp+32], eax
  004c7	2b ee		 sub	 ebp, esi
  004c9	89 6c 24 38	 mov	 DWORD PTR tv684[esp+32], ebp
  004cd	db 44 24 30	 fild	 DWORD PTR tv386[esp+32]
  004d1	89 5c 24 34	 mov	 DWORD PTR tv681[esp+32], ebx
  004d5	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  004d9	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  004dd	d8 c1		 fadd	 ST(0), ST(1)
  004df	e8 00 00 00 00	 call	 __ftol2_sse

; 156  :   
; 157  :         // 然后判断结果   
; 158  :         if (*nx2 < left || *nx2 > right) // 上面的假设错误，需要算与左边线的交点   

  004e4	8b 4c 24 10	 mov	 ecx, DWORD PTR _left$[esp+36]
  004e8	3b c1		 cmp	 eax, ecx
  004ea	8b 54 24 44	 mov	 edx, DWORD PTR _nx2$[esp+32]
  004ee	89 02		 mov	 DWORD PTR [edx], eax
  004f0	7c 0a		 jl	 SHORT $LN12@Graph_clip
  004f2	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  004f6	0f 8e 88 fe ff
	ff		 jle	 $LN130@Graph_clip
$LN12@Graph_clip:

; 159  :         {  
; 160  :             *nx2 = left;  

  004fc	8b c2		 mov	 eax, edx
  004fe	89 08		 mov	 DWORD PTR [eax], ecx

; 161  :             *ny2 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00500	2b cf		 sub	 ecx, edi
  00502	0f af cd	 imul	 ecx, ebp
  00505	89 4c 24 28	 mov	 DWORD PTR tv380[esp+32], ecx
  00509	db 44 24 28	 fild	 DWORD PTR tv380[esp+32]
$LN138@Graph_clip:
  0050d	da 74 24 34	 fidiv	 DWORD PTR tv681[esp+32]
  00511	da 44 24 2c	 fiadd	 DWORD PTR _y1$[esp+32]
  00515	de c1		 faddp	 ST(1), ST(0)
  00517	e8 00 00 00 00	 call	 __ftol2_sse
  0051c	8b 4c 24 48	 mov	 ecx, DWORD PTR _ny2$[esp+32]
  00520	89 01		 mov	 DWORD PTR [ecx], eax

; 162  :         }  
; 163  :         break;  

  00522	e9 5f fe ff ff	 jmp	 $LN63@Graph_clip
$LN11@Graph_clip:

; 164  :     case 10: // NE   
; 165  :         *ny2 = top;  

  00527	8b 54 24 48	 mov	 edx, DWORD PTR _ny2$[esp+32]
  0052b	8b 44 24 20	 mov	 eax, DWORD PTR _top$[esp+36]
  0052f	89 02		 mov	 DWORD PTR [edx], eax

; 166  :         *nx2 = (int)(x1 + (top - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00531	2b df		 sub	 ebx, edi
  00533	2b c6		 sub	 eax, esi
  00535	0f af c3	 imul	 eax, ebx
  00538	89 44 24 30	 mov	 DWORD PTR tv372[esp+32], eax
  0053c	2b ee		 sub	 ebp, esi
  0053e	89 6c 24 38	 mov	 DWORD PTR tv684[esp+32], ebp
  00542	db 44 24 30	 fild	 DWORD PTR tv372[esp+32]
  00546	89 5c 24 34	 mov	 DWORD PTR tv681[esp+32], ebx
  0054a	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  0054e	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00552	d8 c1		 fadd	 ST(0), ST(1)
  00554	e8 00 00 00 00	 call	 __ftol2_sse

; 167  :   
; 168  :         if (*nx2 < left || *nx2 > right)  

  00559	3b 44 24 10	 cmp	 eax, DWORD PTR _left$[esp+36]
  0055d	8b 4c 24 44	 mov	 ecx, DWORD PTR _nx2$[esp+32]
  00561	89 01		 mov	 DWORD PTR [ecx], eax
  00563	7c 0a		 jl	 SHORT $LN9@Graph_clip
  00565	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  00569	0f 8e 15 fe ff
	ff		 jle	 $LN130@Graph_clip
$LN9@Graph_clip:

; 169  :         {  
; 170  :             *nx2 = right;  

  0056f	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  00573	8b d1		 mov	 edx, ecx
  00575	89 02		 mov	 DWORD PTR [edx], eax

; 171  :             *ny2 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00577	2b c7		 sub	 eax, edi
  00579	0f af c5	 imul	 eax, ebp
  0057c	89 44 24 28	 mov	 DWORD PTR tv366[esp+32], eax
  00580	db 44 24 28	 fild	 DWORD PTR tv366[esp+32]

; 172  :         }  
; 173  :         break;  

  00584	eb 87		 jmp	 SHORT $LN138@Graph_clip
$LN8@Graph_clip:

; 174  :     case 6: // SE   
; 175  :         *ny2 = bottom;  

  00586	8b 54 24 48	 mov	 edx, DWORD PTR _ny2$[esp+32]
  0058a	8b 44 24 1c	 mov	 eax, DWORD PTR _bottom$[esp+36]
  0058e	89 02		 mov	 DWORD PTR [edx], eax

; 176  :         *nx2 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  00590	2b df		 sub	 ebx, edi
  00592	2b c6		 sub	 eax, esi
  00594	0f af c3	 imul	 eax, ebx
  00597	89 44 24 30	 mov	 DWORD PTR tv356[esp+32], eax
  0059b	2b ee		 sub	 ebp, esi
  0059d	89 6c 24 38	 mov	 DWORD PTR tv684[esp+32], ebp
  005a1	db 44 24 30	 fild	 DWORD PTR tv356[esp+32]
  005a5	89 5c 24 34	 mov	 DWORD PTR tv681[esp+32], ebx
  005a9	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  005ad	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  005b1	d8 c1		 fadd	 ST(0), ST(1)
  005b3	e8 00 00 00 00	 call	 __ftol2_sse

; 177  :   
; 178  :         if (*nx2 < left || *nx2 > right)  

  005b8	3b 44 24 10	 cmp	 eax, DWORD PTR _left$[esp+36]
  005bc	8b 4c 24 44	 mov	 ecx, DWORD PTR _nx2$[esp+32]
  005c0	89 01		 mov	 DWORD PTR [ecx], eax
  005c2	7c 0a		 jl	 SHORT $LN6@Graph_clip
  005c4	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  005c8	0f 8e b6 fd ff
	ff		 jle	 $LN130@Graph_clip
$LN6@Graph_clip:

; 179  :         {  
; 180  :             *nx2 = right;  

  005ce	8b 44 24 14	 mov	 eax, DWORD PTR _right$[esp+36]
  005d2	8b d1		 mov	 edx, ecx
  005d4	89 02		 mov	 DWORD PTR [edx], eax

; 181  :             *ny2 = (int)(y1 + (right - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  005d6	2b c7		 sub	 eax, edi
  005d8	0f af c5	 imul	 eax, ebp
  005db	89 44 24 28	 mov	 DWORD PTR tv349[esp+32], eax
  005df	db 44 24 28	 fild	 DWORD PTR tv349[esp+32]

; 182  :         }  
; 183  :         break;  

  005e3	e9 25 ff ff ff	 jmp	 $LN138@Graph_clip
$LN5@Graph_clip:

; 184  :     case 5: // SW   
; 185  :         *ny2 = bottom;  

  005e8	8b 54 24 48	 mov	 edx, DWORD PTR _ny2$[esp+32]
  005ec	8b 44 24 1c	 mov	 eax, DWORD PTR _bottom$[esp+36]
  005f0	89 02		 mov	 DWORD PTR [edx], eax

; 186  :         *nx2 = (int)(x1 + (bottom - y1) * (x2 - x1) / (double)(y2 - y1) + 0.5);  

  005f2	2b df		 sub	 ebx, edi
  005f4	2b c6		 sub	 eax, esi
  005f6	0f af c3	 imul	 eax, ebx
  005f9	89 44 24 30	 mov	 DWORD PTR tv342[esp+32], eax
  005fd	2b ee		 sub	 ebp, esi
  005ff	89 6c 24 38	 mov	 DWORD PTR tv684[esp+32], ebp
  00603	db 44 24 30	 fild	 DWORD PTR tv342[esp+32]
  00607	89 5c 24 34	 mov	 DWORD PTR tv681[esp+32], ebx
  0060b	da 74 24 38	 fidiv	 DWORD PTR tv684[esp+32]
  0060f	da 44 24 28	 fiadd	 DWORD PTR _x1$[esp+32]
  00613	d8 c1		 fadd	 ST(0), ST(1)
  00615	e8 00 00 00 00	 call	 __ftol2_sse
  0061a	8b 4c 24 44	 mov	 ecx, DWORD PTR _nx2$[esp+32]
  0061e	89 01		 mov	 DWORD PTR [ecx], eax

; 187  :   
; 188  :         if (*nx2 < left || *nx2 > right)  

  00620	8b 4c 24 10	 mov	 ecx, DWORD PTR _left$[esp+36]
  00624	3b c1		 cmp	 eax, ecx
  00626	7c 0a		 jl	 SHORT $LN3@Graph_clip
  00628	3b 44 24 14	 cmp	 eax, DWORD PTR _right$[esp+36]
  0062c	0f 8e 52 fd ff
	ff		 jle	 $LN130@Graph_clip
$LN3@Graph_clip:

; 189  :         {  
; 190  :             *nx2 = left;  

  00632	8b 54 24 44	 mov	 edx, DWORD PTR _nx2$[esp+32]
  00636	89 0a		 mov	 DWORD PTR [edx], ecx

; 191  :             *ny2 = (int)(y1 + (left - x1) * (y2 - y1) / (double)(x2 - x1) + 0.5);  

  00638	2b cf		 sub	 ecx, edi
  0063a	0f af cd	 imul	 ecx, ebp
  0063d	89 4c 24 28	 mov	 DWORD PTR tv333[esp+32], ecx
  00641	db 44 24 28	 fild	 DWORD PTR tv333[esp+32]
  00645	e9 c3 fe ff ff	 jmp	 $LN138@Graph_clip
  0064a	8b ff		 npad	 2
$LN140@Graph_clip:

; 204  : } 

  0064c	00 00 00 00	 DD	 $LN38@Graph_clip
  00650	00 00 00 00	 DD	 $LN35@Graph_clip
  00654	00 00 00 00	 DD	 $LN34@Graph_clip
  00658	00 00 00 00	 DD	 $LN60@Graph_clip
  0065c	00 00 00 00	 DD	 $LN36@Graph_clip
  00660	00 00 00 00	 DD	 $LN24@Graph_clip
  00664	00 00 00 00	 DD	 $LN27@Graph_clip
  00668	00 00 00 00	 DD	 $LN60@Graph_clip
  0066c	00 00 00 00	 DD	 $LN37@Graph_clip
  00670	00 00 00 00	 DD	 $LN33@Graph_clip
  00674	00 00 00 00	 DD	 $LN30@Graph_clip
$LN141@Graph_clip:
  00678	00 00 00 00	 DD	 $LN103@Graph_clip
  0067c	00 00 00 00	 DD	 $LN16@Graph_clip
  00680	00 00 00 00	 DD	 $LN15@Graph_clip
  00684	00 00 00 00	 DD	 $LN130@Graph_clip
  00688	00 00 00 00	 DD	 $LN17@Graph_clip
  0068c	00 00 00 00	 DD	 $LN5@Graph_clip
  00690	00 00 00 00	 DD	 $LN8@Graph_clip
  00694	00 00 00 00	 DD	 $LN130@Graph_clip
  00698	00 00 00 00	 DD	 $LN18@Graph_clip
  0069c	00 00 00 00	 DD	 $LN14@Graph_clip
  006a0	00 00 00 00	 DD	 $LN11@Graph_clip
_Graph_clip_line_rect ENDP
_TEXT	ENDS
PUBLIC	_Graph_set_vbuf
; Function compile flags: /Ogtpy
;	COMDAT _Graph_set_vbuf
_TEXT	SEGMENT
_graph$ = 8						; size = 4
_id$ = 12						; size = 4
_Graph_set_vbuf PROC					; COMDAT

; 209  :     if( id < 0 || id > VBUF_CNT )

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _id$[esp-4]
  00004	83 f9 04	 cmp	 ecx, 4
  00007	77 0a		 ja	 SHORT $LN1@Graph_set_

; 211  :     
; 212  :     graph->g_vr_actived = graph->g_vbuf_range + id;

  00009	8b 44 24 04	 mov	 eax, DWORD PTR _graph$[esp-4]
  0000d	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  00010	89 48 64	 mov	 DWORD PTR [eax+100], ecx
$LN1@Graph_set_:

; 210  :         return RESULT_FAILED;

  00013	83 c8 ff	 or	 eax, -1

; 213  : 
; 214  :     return RESULT_FAILED;
; 215  : }

  00016	c3		 ret	 0
_Graph_set_vbuf ENDP
_TEXT	ENDS
PUBLIC	_Graph_vr_get
; Function compile flags: /Ogtpy
;	COMDAT _Graph_vr_get
_TEXT	SEGMENT
_graph$ = 8						; size = 4
_vr$ = 12						; size = 4
_Graph_vr_get PROC					; COMDAT

; 220  :     *vr = *graph->g_vr_actived;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _graph$[esp-4]
  00004	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	8b 44 24 08	 mov	 eax, DWORD PTR _vr$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 221  : 
; 222  :     return vr;
; 223  : }

  00015	c3		 ret	 0
_Graph_vr_get ENDP
_TEXT	ENDS
PUBLIC	_Graph_initial
EXTRN	__memzero:PROC
_BSS	SEGMENT
_graph	DB	0130H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _Graph_initial
_TEXT	SEGMENT
_Graph_initial PROC					; COMDAT

; 228  :     _memzero(graph,sizeof(graph_t) * 2);

  00000	68 30 01 00 00	 push	 304			; 00000130H
  00005	68 00 00 00 00	 push	 OFFSET _graph
  0000a	e8 00 00 00 00	 call	 __memzero
  0000f	83 c4 08	 add	 esp, 8

; 229  : }

  00012	c3		 ret	 0
_Graph_initial ENDP
_TEXT	ENDS
PUBLIC	_Graph_get
; Function compile flags: /Ogtpy
;	COMDAT _Graph_get
_TEXT	SEGMENT
_id$ = 8						; size = 4
_Graph_get PROC						; COMDAT

; 233  :     id = id;
; 234  :     return graph;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET _graph

; 235  : }

  00005	c3		 ret	 0
_Graph_get ENDP
_TEXT	ENDS
PUBLIC	_Graph_screen_get
EXTRN	_Cpu_psw_set:PROC
EXTRN	_Cpu_disable_interrupt:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Graph_screen_get
_TEXT	SEGMENT
_graph$ = 8						; size = 4
_Graph_screen_get PROC					; COMDAT

; 239  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 240  :     screen_t            *   screen  = NULL;
; 241  :     int                     i       = 0;
; 242  :     CRITICAL_DECLARE(graph->g_screen_lock);
; 243  : 
; 244  : 
; 245  :     screen = graph->g_screen;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _graph$[esp+4]
  00006	33 f6		 xor	 esi, esi
  00008	83 c7 20	 add	 edi, 32			; 00000020H

; 246  : 
; 247  :     CRITICAL_BEGIN();

  0000b	e8 00 00 00 00	 call	 _Cpu_disable_interrupt
$LL5@Graph_scre:

; 248  :     
; 249  :     for( ; i < SCREEN_CNT ; i++,screen++)
; 250  :     {
; 251  :         if( screen->srn_lock == 0 )

  00010	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 0d		 je	 SHORT $LN12@Graph_scre
  00017	83 c6 01	 add	 esi, 1
  0001a	83 c7 0c	 add	 edi, 12			; 0000000cH
  0001d	83 fe 04	 cmp	 esi, 4
  00020	7c ee		 jl	 SHORT $LL5@Graph_scre
  00022	eb 07		 jmp	 SHORT $LN3@Graph_scre
$LN12@Graph_scre:

; 252  :         {
; 253  :             screen->srn_lock = 1;

  00024	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
$LN3@Graph_scre:

; 254  :             break;
; 255  :         }
; 256  :     }
; 257  :     CRITICAL_END();

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _Cpu_psw_set
  00031	83 c4 04	 add	 esp, 4

; 258  : 
; 259  :     if( i >= SCREEN_CNT)

  00034	33 c0		 xor	 eax, eax
  00036	83 fe 04	 cmp	 esi, 4
  00039	0f 9d c0	 setge	 al
  0003c	83 e8 01	 sub	 eax, 1
  0003f	23 c7		 and	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 260  :         return NULL;
; 261  : 
; 262  :     return screen;
; 263  : }

  00043	c3		 ret	 0
_Graph_screen_get ENDP
_TEXT	ENDS
PUBLIC	_Graph_screen_put
; Function compile flags: /Ogtpy
;	COMDAT _Graph_screen_put
_TEXT	SEGMENT
_graph$ = 8						; size = 4
_screen$ = 12						; size = 4
_Graph_screen_put PROC					; COMDAT

; 268  :     CRITICAL_DECLARE(graph->g_screen_lock);
; 269  : 
; 270  :     CRITICAL_BEGIN();

  00000	e8 00 00 00 00	 call	 _Cpu_disable_interrupt

; 271  :     
; 272  :     screen->srn_lock = 0;

  00005	8b 4c 24 08	 mov	 ecx, DWORD PTR _screen$[esp-4]

; 273  : 
; 274  :     CRITICAL_END();

  00009	50		 push	 eax
  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00011	e8 00 00 00 00	 call	 _Cpu_psw_set
  00016	59		 pop	 ecx

; 275  : 
; 276  :     graph = graph;
; 277  : }

  00017	c3		 ret	 0
_Graph_screen_put ENDP
_TEXT	ENDS
PUBLIC	_Pen_create
; Function compile flags: /Ogtpy
;	COMDAT _Pen_create
_TEXT	SEGMENT
_pen$ = 8						; size = 4
_color$ = 12						; size = 4
_Pen_create PROC					; COMDAT

; 282  :     if( NULL == pen )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pen$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN1@Pen_create

; 286  : 
; 287  :     return pen;
; 288  : }

  00008	c3		 ret	 0
$LN1@Pen_create:

; 283  :         return NULL;
; 284  : 
; 285  :     pen->pen_color = color;

  00009	8b 4c 24 08	 mov	 ecx, DWORD PTR _color$[esp-4]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 286  : 
; 287  :     return pen;
; 288  : }

  0000f	c3		 ret	 0
_Pen_create ENDP
_TEXT	ENDS
PUBLIC	_Brush_create
; Function compile flags: /Ogtpy
;	COMDAT _Brush_create
_TEXT	SEGMENT
_brush$ = 8						; size = 4
_width$ = 12						; size = 4
_color$ = 16						; size = 4
_Brush_create PROC					; COMDAT

; 293  :     if( NULL == brush )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _brush$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $LN1@Brush_crea

; 298  : 
; 299  :     return brush;
; 300  : }

  00008	c3		 ret	 0
$LN1@Brush_crea:

; 294  :         return NULL;
; 295  : 
; 296  :     brush->brs_color = color;

  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR _color$[esp-4]

; 297  :     brush->brs_width = width;

  0000d	8b 54 24 08	 mov	 edx, DWORD PTR _width$[esp-4]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 298  : 
; 299  :     return brush;
; 300  : }

  00016	c3		 ret	 0
_Brush_create ENDP
_TEXT	ENDS
END
